//this was autogenerated by a tool. Do not modify! Use partial
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
namespace Generated;
[ApiController]
[Route("api/[controller]/[action]")]    
public partial class AdvancedSearch_ApplicationDBContext_DepartmentController : Controller
{
    private ISearchDataDepartment _search;
    public AdvancedSearch_ApplicationDBContext_DepartmentController(ISearchDataDepartment search)
	{
        _search=search;
	}
    [HttpGet]
    public async Task<long> GetAllCount()
    {
       return await _search.GetAllCount();
        
    }
    
    [HttpGet]
    public async IAsyncEnumerable<Department_Table> GetAll()
    {
        await foreach(var item in _search.DepartmentFind_AsyncEnumerable(null))
        {
            yield return (Department_Table)item!;
        }
        
    }
    [HttpGet]   
    public async IAsyncEnumerable<Department_Table> GetSearchSimple(string ColumnName, string Operator, string Value){
           var search = new SearchDepartment();
           search.PageSize = int.MaxValue - 1;
        search.SearchFields = new SearchField<eDepartmentColumns>[1];
        search.SearchFields[0]= new SearchField<eDepartmentColumns>();
        if(Enum.TryParse< eDepartmentColumns >(ColumnName,true ,out var valField)){
            search.SearchFields[0].FieldName = valField;
        }
        else
        {
            search.SearchFields[0].FieldName = (eDepartmentColumns )int.Parse(ColumnName);;
        }
        search.SearchFields[0].Value= Value;
        var criteria= SearchCriteria.None;
        if(Enum.TryParse<SearchCriteria>(Operator,true,out var value))
        {
            criteria = value;
        }
        else
        {
            criteria = (SearchCriteria)int.Parse(Operator);
        }
        
        search.SearchFields[0].Criteria= criteria;
        await foreach (var item in _search.DepartmentFind_AsyncEnumerable(search))
        {
            yield return (Department_Table)item!;
        }

    }
    [HttpGet]
    public async IAsyncEnumerable<Department_Table> GetWithSearch(SearchDepartment s)
    {
        await foreach(var item in _search.DepartmentFind_AsyncEnumerable(s))
        {
            yield return (Department_Table)item!;
        }
        
    }
    [HttpGet]
    public async Task<long> GetWithSearchCount(SearchDepartment? s)
    {
        if (s == null)
            return await GetAllCount();

        return await _search.GetAllCount(s);
    }

//has one key
    [HttpGet]
    public async Task<Department_Table?> GetSingle(long id){
        var data=await _search.DepartmentGetSingle(id);
       if(data == null)
        return null;
       return (Department_Table)data;
    }

        
    [HttpGet]
    public async IAsyncEnumerable<Department_Table> IDDepartment_EqualValue( long  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Equal;
        await foreach (var item in _search.DepartmentSimpleSearch_IDDepartment(sc, value))
        {
            yield return (Department_Table)item!;
        }
    }
    [HttpGet]
    public async IAsyncEnumerable<Department_Table> IDDepartment_DifferentValue( long  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Different;
        await foreach (var item in _search.DepartmentSimpleSearch_IDDepartment(sc, value))
        {
            yield return (Department_Table)item!;
        }
    }
    [HttpGet]
    public  async IAsyncEnumerable<Department_Table> IDDepartment_SimpleSearch(GeneratorFromDB.SearchCriteria sc,  long value){
        await foreach(var item in _search.DepartmentSimpleSearch_IDDepartment(sc,value))
        {
            yield return (Department_Table)item!;
        }
    }

         
     [HttpGet]
    public async IAsyncEnumerable<Department_Table> IDDepartment_EqualValues( long[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchDepartment.FromSearch(GeneratorFromDB.SearchCriteria.InArray,eDepartmentColumns.IDDepartment,value);
        await foreach (var item in _search.DepartmentFind_AsyncEnumerable(sc))
        {
        
            yield return (Department_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<Department_Table> IDDepartment_DifferentValues( long[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchDepartment.FromSearch(GeneratorFromDB.SearchCriteria.NotInArray,eDepartmentColumns.IDDepartment,value);
        await foreach (var item in _search.DepartmentFind_AsyncEnumerable(sc))
        {
        
            yield return (Department_Table)item!;
        }
    }
              [HttpGet]
    public async IAsyncEnumerable<Department_Table> IDDepartment_LessOrEqual(long  val)
    {
        var sc = SearchDepartment.FromSearch(GeneratorFromDB.SearchCriteria.LessOrEqual, eDepartmentColumns.IDDepartment  , val.ToString());
        await foreach (var item in _search.DepartmentFind_AsyncEnumerable(sc))
        {

            yield return (Department_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<Department_Table> IDDepartment_Less(long  val)
    {
        var sc = SearchDepartment.FromSearch(GeneratorFromDB.SearchCriteria.Less, eDepartmentColumns.IDDepartment  , val.ToString());
        await foreach (var item in _search.DepartmentFind_AsyncEnumerable(sc))
        {

            yield return (Department_Table)item!;
        }
    }
     
      [HttpGet]
    public async IAsyncEnumerable<Department_Table> IDDepartment_GreaterOrEqual(long  val)
    {
        var sc = SearchDepartment.FromSearch(GeneratorFromDB.SearchCriteria.GreaterOrEqual, eDepartmentColumns.IDDepartment  , val.ToString());
        await foreach (var item in _search.DepartmentFind_AsyncEnumerable(sc))
        {

            yield return (Department_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<Department_Table> IDDepartment_Greater(long  val)
    {
        var sc = SearchDepartment.FromSearch(GeneratorFromDB.SearchCriteria.Greater, eDepartmentColumns.IDDepartment  , val.ToString());
        await foreach (var item in _search.DepartmentFind_AsyncEnumerable(sc))
        {

            yield return (Department_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<Department_Table> IDDepartment_Between( long  valStart, long valEnd)
    {
        var sc = SearchDepartment.FromSearch(GeneratorFromDB.SearchCriteria.Between, eDepartmentColumns.IDDepartment, valStart +","+ valEnd);
        await foreach (var item in _search.DepartmentFind_AsyncEnumerable(sc))
        {

            yield return (Department_Table)item!;
        }
    }    

    [HttpGet]
    public async IAsyncEnumerable<Department_Table> IDDepartment_NotBetween( long  valStart, long valEnd)
    {
        var sc = SearchDepartment.FromSearch(GeneratorFromDB.SearchCriteria.NotBetween, eDepartmentColumns.IDDepartment, valStart +","+ valEnd);
        await foreach (var item in _search.DepartmentFind_AsyncEnumerable(sc))
        {

            yield return (Department_Table)item!;
        }
    }    

        
    [HttpGet]
    public async IAsyncEnumerable<Department_Table> Name_EqualValue( string  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Equal;
        await foreach (var item in _search.DepartmentSimpleSearch_Name(sc, value))
        {
            yield return (Department_Table)item!;
        }
    }
    [HttpGet]
    public async IAsyncEnumerable<Department_Table> Name_DifferentValue( string  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Different;
        await foreach (var item in _search.DepartmentSimpleSearch_Name(sc, value))
        {
            yield return (Department_Table)item!;
        }
    }
    [HttpGet]
    public  async IAsyncEnumerable<Department_Table> Name_SimpleSearch(GeneratorFromDB.SearchCriteria sc,  string value){
        await foreach(var item in _search.DepartmentSimpleSearch_Name(sc,value))
        {
            yield return (Department_Table)item!;
        }
    }

         
     [HttpGet]
    public async IAsyncEnumerable<Department_Table> Name_EqualValues( string[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchDepartment.FromSearch(GeneratorFromDB.SearchCriteria.InArray,eDepartmentColumns.Name,value);
        await foreach (var item in _search.DepartmentFind_AsyncEnumerable(sc))
        {
        
            yield return (Department_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<Department_Table> Name_DifferentValues( string[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchDepartment.FromSearch(GeneratorFromDB.SearchCriteria.NotInArray,eDepartmentColumns.Name,value);
        await foreach (var item in _search.DepartmentFind_AsyncEnumerable(sc))
        {
        
            yield return (Department_Table)item!;
        }
    }
         [HttpGet]
    public async IAsyncEnumerable<Department_Table> Name_Contains(string  val)
    {
        var sc = SearchDepartment.FromSearch(GeneratorFromDB.SearchCriteria.Contains, eDepartmentColumns.Name  , val);
        await foreach (var item in _search.DepartmentFind_AsyncEnumerable(sc))
        {

            yield return (Department_Table)item!;
        }
    }

     [HttpGet]
    public async IAsyncEnumerable<Department_Table> Name_EndsWith(string  val)
    {
        var sc = SearchDepartment.FromSearch(GeneratorFromDB.SearchCriteria.EndsWith, eDepartmentColumns.Name  , val);
        await foreach (var item in _search.DepartmentFind_AsyncEnumerable(sc))
        {

            yield return (Department_Table)item!;
        }
    }

      [HttpGet]
    public async IAsyncEnumerable<Department_Table> Name_StartsWith(string  val)
    {
        var sc = SearchDepartment.FromSearch(GeneratorFromDB.SearchCriteria.StartsWith, eDepartmentColumns.Name  , val);
        await foreach (var item in _search.DepartmentFind_AsyncEnumerable(sc))
        {

            yield return (Department_Table)item!;
        }
    }


              [HttpGet]
    public async IAsyncEnumerable<Department_Table> Name_LessOrEqual(string  val)
    {
        var sc = SearchDepartment.FromSearch(GeneratorFromDB.SearchCriteria.LessOrEqual, eDepartmentColumns.Name  , val.ToString());
        await foreach (var item in _search.DepartmentFind_AsyncEnumerable(sc))
        {

            yield return (Department_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<Department_Table> Name_Less(string  val)
    {
        var sc = SearchDepartment.FromSearch(GeneratorFromDB.SearchCriteria.Less, eDepartmentColumns.Name  , val.ToString());
        await foreach (var item in _search.DepartmentFind_AsyncEnumerable(sc))
        {

            yield return (Department_Table)item!;
        }
    }
     
      [HttpGet]
    public async IAsyncEnumerable<Department_Table> Name_GreaterOrEqual(string  val)
    {
        var sc = SearchDepartment.FromSearch(GeneratorFromDB.SearchCriteria.GreaterOrEqual, eDepartmentColumns.Name  , val.ToString());
        await foreach (var item in _search.DepartmentFind_AsyncEnumerable(sc))
        {

            yield return (Department_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<Department_Table> Name_Greater(string  val)
    {
        var sc = SearchDepartment.FromSearch(GeneratorFromDB.SearchCriteria.Greater, eDepartmentColumns.Name  , val.ToString());
        await foreach (var item in _search.DepartmentFind_AsyncEnumerable(sc))
        {

            yield return (Department_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<Department_Table> Name_Between( string  valStart, string valEnd)
    {
        var sc = SearchDepartment.FromSearch(GeneratorFromDB.SearchCriteria.Between, eDepartmentColumns.Name, valStart +","+ valEnd);
        await foreach (var item in _search.DepartmentFind_AsyncEnumerable(sc))
        {

            yield return (Department_Table)item!;
        }
    }    

    [HttpGet]
    public async IAsyncEnumerable<Department_Table> Name_NotBetween( string  valStart, string valEnd)
    {
        var sc = SearchDepartment.FromSearch(GeneratorFromDB.SearchCriteria.NotBetween, eDepartmentColumns.Name, valStart +","+ valEnd);
        await foreach (var item in _search.DepartmentFind_AsyncEnumerable(sc))
        {

            yield return (Department_Table)item!;
        }
    }    

            


    


}//end class

