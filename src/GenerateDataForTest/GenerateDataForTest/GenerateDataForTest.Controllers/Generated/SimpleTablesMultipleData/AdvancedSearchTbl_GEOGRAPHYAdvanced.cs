//5.this was autogenerated by a tool. Do not modify! Use partial
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
namespace Generated;
[ApiController]
[Route("api/[controller]/[action]")]    
public partial class AdvancedSearch_SimpleTablesMultipleData_Tbl_GEOGRAPHYController : Controller
{
    private ISearchDataTbl_GEOGRAPHY _search;
    public AdvancedSearch_SimpleTablesMultipleData_Tbl_GEOGRAPHYController(ISearchDataTbl_GEOGRAPHY search)
	{
        _search=search;
	}
    [HttpGet]
    public async Task<long> GetAllCount()
    {
       return await _search.GetAllCount();
        
    }
    
    [HttpGet]
    public async IAsyncEnumerable<Tbl_GEOGRAPHY_Table> GetAll()
    {
        await foreach(var item in _search.Tbl_GEOGRAPHYFind_AsyncEnumerable(null))
        {
            yield return (Tbl_GEOGRAPHY_Table)item!;
        }
        
    }
    [HttpGet]   
    public async IAsyncEnumerable<Tbl_GEOGRAPHY_Table> GetSearchSimple(string ColumnName, string Operator, string Value){
           var search = new SearchTbl_GEOGRAPHY();
           search.PageSize = int.MaxValue - 1;
        search.SearchFields = new SearchField<eTbl_GEOGRAPHYColumns>[1];
        search.SearchFields[0]= new SearchField<eTbl_GEOGRAPHYColumns>();
        if(Enum.TryParse< eTbl_GEOGRAPHYColumns >(ColumnName,true ,out var valField)){
            search.SearchFields[0].FieldName = valField;
        }
        else
        {
            search.SearchFields[0].FieldName = (eTbl_GEOGRAPHYColumns )int.Parse(ColumnName);;
        }
        search.SearchFields[0].Value= Value;
        var criteria= SearchCriteria.None;
        if(Enum.TryParse<SearchCriteria>(Operator,true,out var value))
        {
            criteria = value;
        }
        else
        {
            criteria = (SearchCriteria)int.Parse(Operator);
        }
        
        search.SearchFields[0].Criteria= criteria;
        await foreach (var item in _search.Tbl_GEOGRAPHYFind_AsyncEnumerable(search))
        {
            yield return (Tbl_GEOGRAPHY_Table)item!;
        }

    }
    [HttpGet]
    public async IAsyncEnumerable<Tbl_GEOGRAPHY_Table> GetWithSearch(SearchTbl_GEOGRAPHY s)
    {
        await foreach(var item in _search.Tbl_GEOGRAPHYFind_AsyncEnumerable(s))
        {
            yield return (Tbl_GEOGRAPHY_Table)item!;
        }
        
    }
    [HttpGet]
    public async Task<long> GetWithSearchCount(SearchTbl_GEOGRAPHY? s)
    {
        if (s == null)
            return await GetAllCount();

        return await _search.GetAllCount(s);
    }

//has one key
    [HttpGet]
    public async Task<Tbl_GEOGRAPHY_Table?> GetSingle(int id){
        var data=await _search.Tbl_GEOGRAPHYGetSingle(id);
       if(data == null)
        return null;
       return (Tbl_GEOGRAPHY_Table)data;
    }

        
    [HttpGet]
    public async IAsyncEnumerable<Tbl_GEOGRAPHY_Table> ID_EqualValue( int  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Equal;
        await foreach (var item in _search.Tbl_GEOGRAPHYSimpleSearch_ID(sc, value))
        {
            yield return (Tbl_GEOGRAPHY_Table)item!;
        }
    }
    [HttpGet]
    public async IAsyncEnumerable<Tbl_GEOGRAPHY_Table> ID_DifferentValue( int  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Different;
        await foreach (var item in _search.Tbl_GEOGRAPHYSimpleSearch_ID(sc, value))
        {
            yield return (Tbl_GEOGRAPHY_Table)item!;
        }
    }
    [HttpGet]
    public  async IAsyncEnumerable<Tbl_GEOGRAPHY_Table> ID_SimpleSearch(GeneratorFromDB.SearchCriteria sc,  int value){
        await foreach(var item in _search.Tbl_GEOGRAPHYSimpleSearch_ID(sc,value))
        {
            yield return (Tbl_GEOGRAPHY_Table)item!;
        }
    }

         
     [HttpGet]
    public async IAsyncEnumerable<Tbl_GEOGRAPHY_Table> ID_EqualValues( int[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchTbl_GEOGRAPHY.FromSearch(GeneratorFromDB.SearchCriteria.InArray,eTbl_GEOGRAPHYColumns.ID,value);
        await foreach (var item in _search.Tbl_GEOGRAPHYFind_AsyncEnumerable(sc))
        {
        
            yield return (Tbl_GEOGRAPHY_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<Tbl_GEOGRAPHY_Table> ID_DifferentValues( int[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchTbl_GEOGRAPHY.FromSearch(GeneratorFromDB.SearchCriteria.NotInArray,eTbl_GEOGRAPHYColumns.ID,value);
        await foreach (var item in _search.Tbl_GEOGRAPHYFind_AsyncEnumerable(sc))
        {
        
            yield return (Tbl_GEOGRAPHY_Table)item!;
        }
    }
              [HttpGet]
    public async IAsyncEnumerable<Tbl_GEOGRAPHY_Table> ID_LessOrEqual(int  val)
    {
        var sc = SearchTbl_GEOGRAPHY.FromSearch(GeneratorFromDB.SearchCriteria.LessOrEqual, eTbl_GEOGRAPHYColumns.ID  , val.ToString());
        await foreach (var item in _search.Tbl_GEOGRAPHYFind_AsyncEnumerable(sc))
        {

            yield return (Tbl_GEOGRAPHY_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<Tbl_GEOGRAPHY_Table> ID_Less(int  val)
    {
        var sc = SearchTbl_GEOGRAPHY.FromSearch(GeneratorFromDB.SearchCriteria.Less, eTbl_GEOGRAPHYColumns.ID  , val.ToString());
        await foreach (var item in _search.Tbl_GEOGRAPHYFind_AsyncEnumerable(sc))
        {

            yield return (Tbl_GEOGRAPHY_Table)item!;
        }
    }
     
      [HttpGet]
    public async IAsyncEnumerable<Tbl_GEOGRAPHY_Table> ID_GreaterOrEqual(int  val)
    {
        var sc = SearchTbl_GEOGRAPHY.FromSearch(GeneratorFromDB.SearchCriteria.GreaterOrEqual, eTbl_GEOGRAPHYColumns.ID  , val.ToString());
        await foreach (var item in _search.Tbl_GEOGRAPHYFind_AsyncEnumerable(sc))
        {

            yield return (Tbl_GEOGRAPHY_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<Tbl_GEOGRAPHY_Table> ID_Greater(int  val)
    {
        var sc = SearchTbl_GEOGRAPHY.FromSearch(GeneratorFromDB.SearchCriteria.Greater, eTbl_GEOGRAPHYColumns.ID  , val.ToString());
        await foreach (var item in _search.Tbl_GEOGRAPHYFind_AsyncEnumerable(sc))
        {

            yield return (Tbl_GEOGRAPHY_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<Tbl_GEOGRAPHY_Table> ID_Between( int  valStart, int valEnd)
    {
        var sc = SearchTbl_GEOGRAPHY.FromSearch(GeneratorFromDB.SearchCriteria.Between, eTbl_GEOGRAPHYColumns.ID, valStart +","+ valEnd);
        await foreach (var item in _search.Tbl_GEOGRAPHYFind_AsyncEnumerable(sc))
        {

            yield return (Tbl_GEOGRAPHY_Table)item!;
        }
    }    

    [HttpGet]
    public async IAsyncEnumerable<Tbl_GEOGRAPHY_Table> ID_NotBetween( int  valStart, int valEnd)
    {
        var sc = SearchTbl_GEOGRAPHY.FromSearch(GeneratorFromDB.SearchCriteria.NotBetween, eTbl_GEOGRAPHYColumns.ID, valStart +","+ valEnd);
        await foreach (var item in _search.Tbl_GEOGRAPHYFind_AsyncEnumerable(sc))
        {

            yield return (Tbl_GEOGRAPHY_Table)item!;
        }
    }    

            


    


}//end class

