//5.this was autogenerated by a tool. Do not modify! Use partial
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
namespace Generated;
[ApiController]
[Route("api/[controller]/[action]")]    
public partial class AdvancedSearch_SimpleTablesMultipleData_Tbl_TINYINTController : Controller
{
    private ISearchDataTbl_TINYINT _search;
    public AdvancedSearch_SimpleTablesMultipleData_Tbl_TINYINTController(ISearchDataTbl_TINYINT search)
	{
        _search=search;
	}
    [HttpGet]
    public async Task<long> GetAllCount()
    {
       return await _search.GetAllCount();
        
    }
    
    [HttpGet]
    public async IAsyncEnumerable<Tbl_TINYINT_Table> GetAll()
    {
        await foreach(var item in _search.Tbl_TINYINTFind_AsyncEnumerable(null))
        {
            yield return (Tbl_TINYINT_Table)item!;
        }
        
    }
    [HttpGet]   
    public async IAsyncEnumerable<Tbl_TINYINT_Table> GetSearchSimple(string ColumnName, string Operator, string Value){
           var search = new SearchTbl_TINYINT();
           search.PageSize = int.MaxValue - 1;
        search.SearchFields = new SearchField<eTbl_TINYINTColumns>[1];
        search.SearchFields[0]= new SearchField<eTbl_TINYINTColumns>();
        if(Enum.TryParse< eTbl_TINYINTColumns >(ColumnName,true ,out var valField)){
            search.SearchFields[0].FieldName = valField;
        }
        else
        {
            search.SearchFields[0].FieldName = (eTbl_TINYINTColumns )int.Parse(ColumnName);;
        }
        search.SearchFields[0].Value= Value;
        var criteria= SearchCriteria.None;
        if(Enum.TryParse<SearchCriteria>(Operator,true,out var value))
        {
            criteria = value;
        }
        else
        {
            criteria = (SearchCriteria)int.Parse(Operator);
        }
        
        search.SearchFields[0].Criteria= criteria;
        await foreach (var item in _search.Tbl_TINYINTFind_AsyncEnumerable(search))
        {
            yield return (Tbl_TINYINT_Table)item!;
        }

    }
    [HttpGet]
    public async IAsyncEnumerable<Tbl_TINYINT_Table> GetWithSearch(SearchTbl_TINYINT s)
    {
        await foreach(var item in _search.Tbl_TINYINTFind_AsyncEnumerable(s))
        {
            yield return (Tbl_TINYINT_Table)item!;
        }
        
    }
    [HttpGet]
    public async Task<long> GetWithSearchCount(SearchTbl_TINYINT? s)
    {
        if (s == null)
            return await GetAllCount();

        return await _search.GetAllCount(s);
    }

//has one key
    [HttpGet]
    public async Task<Tbl_TINYINT_Table?> GetSingle(int id){
        var data=await _search.Tbl_TINYINTGetSingle(id);
       if(data == null)
        return null;
       return (Tbl_TINYINT_Table)data;
    }

        
    [HttpGet]
    public async IAsyncEnumerable<Tbl_TINYINT_Table> ID_EqualValue( int  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Equal;
        await foreach (var item in _search.Tbl_TINYINTSimpleSearch_ID(sc, value))
        {
            yield return (Tbl_TINYINT_Table)item!;
        }
    }
    [HttpGet]
    public async IAsyncEnumerable<Tbl_TINYINT_Table> ID_DifferentValue( int  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Different;
        await foreach (var item in _search.Tbl_TINYINTSimpleSearch_ID(sc, value))
        {
            yield return (Tbl_TINYINT_Table)item!;
        }
    }
    [HttpGet]
    public  async IAsyncEnumerable<Tbl_TINYINT_Table> ID_SimpleSearch(GeneratorFromDB.SearchCriteria sc,  int value){
        await foreach(var item in _search.Tbl_TINYINTSimpleSearch_ID(sc,value))
        {
            yield return (Tbl_TINYINT_Table)item!;
        }
    }

         
     [HttpGet]
    public async IAsyncEnumerable<Tbl_TINYINT_Table> ID_EqualValues( int[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchTbl_TINYINT.FromSearch(GeneratorFromDB.SearchCriteria.InArray,eTbl_TINYINTColumns.ID,value);
        await foreach (var item in _search.Tbl_TINYINTFind_AsyncEnumerable(sc))
        {
        
            yield return (Tbl_TINYINT_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<Tbl_TINYINT_Table> ID_DifferentValues( int[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchTbl_TINYINT.FromSearch(GeneratorFromDB.SearchCriteria.NotInArray,eTbl_TINYINTColumns.ID,value);
        await foreach (var item in _search.Tbl_TINYINTFind_AsyncEnumerable(sc))
        {
        
            yield return (Tbl_TINYINT_Table)item!;
        }
    }
              [HttpGet]
    public async IAsyncEnumerable<Tbl_TINYINT_Table> ID_LessOrEqual(int  val)
    {
        var sc = SearchTbl_TINYINT.FromSearch(GeneratorFromDB.SearchCriteria.LessOrEqual, eTbl_TINYINTColumns.ID  , val.ToString());
        await foreach (var item in _search.Tbl_TINYINTFind_AsyncEnumerable(sc))
        {

            yield return (Tbl_TINYINT_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<Tbl_TINYINT_Table> ID_Less(int  val)
    {
        var sc = SearchTbl_TINYINT.FromSearch(GeneratorFromDB.SearchCriteria.Less, eTbl_TINYINTColumns.ID  , val.ToString());
        await foreach (var item in _search.Tbl_TINYINTFind_AsyncEnumerable(sc))
        {

            yield return (Tbl_TINYINT_Table)item!;
        }
    }
     
      [HttpGet]
    public async IAsyncEnumerable<Tbl_TINYINT_Table> ID_GreaterOrEqual(int  val)
    {
        var sc = SearchTbl_TINYINT.FromSearch(GeneratorFromDB.SearchCriteria.GreaterOrEqual, eTbl_TINYINTColumns.ID  , val.ToString());
        await foreach (var item in _search.Tbl_TINYINTFind_AsyncEnumerable(sc))
        {

            yield return (Tbl_TINYINT_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<Tbl_TINYINT_Table> ID_Greater(int  val)
    {
        var sc = SearchTbl_TINYINT.FromSearch(GeneratorFromDB.SearchCriteria.Greater, eTbl_TINYINTColumns.ID  , val.ToString());
        await foreach (var item in _search.Tbl_TINYINTFind_AsyncEnumerable(sc))
        {

            yield return (Tbl_TINYINT_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<Tbl_TINYINT_Table> ID_Between( int  valStart, int valEnd)
    {
        var sc = SearchTbl_TINYINT.FromSearch(GeneratorFromDB.SearchCriteria.Between, eTbl_TINYINTColumns.ID, valStart +","+ valEnd);
        await foreach (var item in _search.Tbl_TINYINTFind_AsyncEnumerable(sc))
        {

            yield return (Tbl_TINYINT_Table)item!;
        }
    }    

    [HttpGet]
    public async IAsyncEnumerable<Tbl_TINYINT_Table> ID_NotBetween( int  valStart, int valEnd)
    {
        var sc = SearchTbl_TINYINT.FromSearch(GeneratorFromDB.SearchCriteria.NotBetween, eTbl_TINYINTColumns.ID, valStart +","+ valEnd);
        await foreach (var item in _search.Tbl_TINYINTFind_AsyncEnumerable(sc))
        {

            yield return (Tbl_TINYINT_Table)item!;
        }
    }    

        
    [HttpGet]
    public async IAsyncEnumerable<Tbl_TINYINT_Table> DataColumn_EqualValue( byte?  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Equal;
        await foreach (var item in _search.Tbl_TINYINTSimpleSearch_DataColumn(sc, value))
        {
            yield return (Tbl_TINYINT_Table)item!;
        }
    }
    [HttpGet]
    public async IAsyncEnumerable<Tbl_TINYINT_Table> DataColumn_DifferentValue( byte?  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Different;
        await foreach (var item in _search.Tbl_TINYINTSimpleSearch_DataColumn(sc, value))
        {
            yield return (Tbl_TINYINT_Table)item!;
        }
    }
    [HttpGet]
    public  async IAsyncEnumerable<Tbl_TINYINT_Table> DataColumn_SimpleSearch(GeneratorFromDB.SearchCriteria sc,  byte? value){
        await foreach(var item in _search.Tbl_TINYINTSimpleSearch_DataColumn(sc,value))
        {
            yield return (Tbl_TINYINT_Table)item!;
        }
    }

        [HttpGet]
    public async IAsyncEnumerable<Tbl_TINYINT_Table> DataColumn_FindNull(){
        var sc = GeneratorFromDB.SearchCriteria.Equal;
        await foreach(var item in _search.Tbl_TINYINTSimpleSearchNull_DataColumn(sc))
        {
            yield return (Tbl_TINYINT_Table)item!;
        }
    }
    [HttpGet]
    public async IAsyncEnumerable<Tbl_TINYINT_Table> DataColumn_FindNotNull(){
        var sc = GeneratorFromDB.SearchCriteria.Different;
        await foreach(var item in _search.Tbl_TINYINTSimpleSearchNull_DataColumn(sc))
        {
            yield return (Tbl_TINYINT_Table)item!;
        }
    }
         
     [HttpGet]
    public async IAsyncEnumerable<Tbl_TINYINT_Table> DataColumn_EqualValues( byte?[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchTbl_TINYINT.FromSearch(GeneratorFromDB.SearchCriteria.InArray,eTbl_TINYINTColumns.DataColumn,value);
        await foreach (var item in _search.Tbl_TINYINTFind_AsyncEnumerable(sc))
        {
        
            yield return (Tbl_TINYINT_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<Tbl_TINYINT_Table> DataColumn_DifferentValues( byte?[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchTbl_TINYINT.FromSearch(GeneratorFromDB.SearchCriteria.NotInArray,eTbl_TINYINTColumns.DataColumn,value);
        await foreach (var item in _search.Tbl_TINYINTFind_AsyncEnumerable(sc))
        {
        
            yield return (Tbl_TINYINT_Table)item!;
        }
    }
              [HttpGet]
    public async IAsyncEnumerable<Tbl_TINYINT_Table> DataColumn_LessOrEqual(byte  val)
    {
        var sc = SearchTbl_TINYINT.FromSearch(GeneratorFromDB.SearchCriteria.LessOrEqual, eTbl_TINYINTColumns.DataColumn  , val.ToString());
        await foreach (var item in _search.Tbl_TINYINTFind_AsyncEnumerable(sc))
        {

            yield return (Tbl_TINYINT_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<Tbl_TINYINT_Table> DataColumn_Less(byte  val)
    {
        var sc = SearchTbl_TINYINT.FromSearch(GeneratorFromDB.SearchCriteria.Less, eTbl_TINYINTColumns.DataColumn  , val.ToString());
        await foreach (var item in _search.Tbl_TINYINTFind_AsyncEnumerable(sc))
        {

            yield return (Tbl_TINYINT_Table)item!;
        }
    }
     
      [HttpGet]
    public async IAsyncEnumerable<Tbl_TINYINT_Table> DataColumn_GreaterOrEqual(byte  val)
    {
        var sc = SearchTbl_TINYINT.FromSearch(GeneratorFromDB.SearchCriteria.GreaterOrEqual, eTbl_TINYINTColumns.DataColumn  , val.ToString());
        await foreach (var item in _search.Tbl_TINYINTFind_AsyncEnumerable(sc))
        {

            yield return (Tbl_TINYINT_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<Tbl_TINYINT_Table> DataColumn_Greater(byte  val)
    {
        var sc = SearchTbl_TINYINT.FromSearch(GeneratorFromDB.SearchCriteria.Greater, eTbl_TINYINTColumns.DataColumn  , val.ToString());
        await foreach (var item in _search.Tbl_TINYINTFind_AsyncEnumerable(sc))
        {

            yield return (Tbl_TINYINT_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<Tbl_TINYINT_Table> DataColumn_Between( byte  valStart, byte valEnd)
    {
        var sc = SearchTbl_TINYINT.FromSearch(GeneratorFromDB.SearchCriteria.Between, eTbl_TINYINTColumns.DataColumn, valStart +","+ valEnd);
        await foreach (var item in _search.Tbl_TINYINTFind_AsyncEnumerable(sc))
        {

            yield return (Tbl_TINYINT_Table)item!;
        }
    }    

    [HttpGet]
    public async IAsyncEnumerable<Tbl_TINYINT_Table> DataColumn_NotBetween( byte  valStart, byte valEnd)
    {
        var sc = SearchTbl_TINYINT.FromSearch(GeneratorFromDB.SearchCriteria.NotBetween, eTbl_TINYINTColumns.DataColumn, valStart +","+ valEnd);
        await foreach (var item in _search.Tbl_TINYINTFind_AsyncEnumerable(sc))
        {

            yield return (Tbl_TINYINT_Table)item!;
        }
    }    

            


    


}//end class

