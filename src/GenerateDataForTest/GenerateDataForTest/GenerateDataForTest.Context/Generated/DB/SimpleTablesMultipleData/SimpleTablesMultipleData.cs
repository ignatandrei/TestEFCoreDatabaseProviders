//1.this was autogenerated by a tool. Do not modify! Use partial
using System;
using System.Collections.Generic;
using GeneratorFromDB;
using Microsoft.EntityFrameworkCore;

//modified 2023-09-03
namespace Generated;

public partial class SimpleTablesMultipleData : DbContext
{
    public SimpleTablesMultipleData(DbContextOptions<SimpleTablesMultipleData> options)
        : base(options)
    {
    }

    public virtual DbSet<Tbl_BIGINT> Tbl_BIGINT { get; set; }
    //public virtual DbSet<Tbl_BIGINT_Table> Tbl_BIGINT_Table { get; set; }

    public virtual DbSet<Tbl_BINARY> Tbl_BINARY { get; set; }
    //public virtual DbSet<Tbl_BINARY_Table> Tbl_BINARY_Table { get; set; }

    public virtual DbSet<Tbl_BIT> Tbl_BIT { get; set; }
    //public virtual DbSet<Tbl_BIT_Table> Tbl_BIT_Table { get; set; }

    public virtual DbSet<Tbl_CHAR> Tbl_CHAR { get; set; }
    //public virtual DbSet<Tbl_CHAR_Table> Tbl_CHAR_Table { get; set; }

    public virtual DbSet<Tbl_DATE> Tbl_DATE { get; set; }
    //public virtual DbSet<Tbl_DATE_Table> Tbl_DATE_Table { get; set; }

    public virtual DbSet<Tbl_DATETIME> Tbl_DATETIME { get; set; }
    //public virtual DbSet<Tbl_DATETIME_Table> Tbl_DATETIME_Table { get; set; }

    public virtual DbSet<Tbl_DATETIME2> Tbl_DATETIME2 { get; set; }
    //public virtual DbSet<Tbl_DATETIME2_Table> Tbl_DATETIME2_Table { get; set; }

    public virtual DbSet<Tbl_DATETIMEOFFSET> Tbl_DATETIMEOFFSET { get; set; }
    //public virtual DbSet<Tbl_DATETIMEOFFSET_Table> Tbl_DATETIMEOFFSET_Table { get; set; }

    public virtual DbSet<Tbl_DECIMAL> Tbl_DECIMAL { get; set; }
    //public virtual DbSet<Tbl_DECIMAL_Table> Tbl_DECIMAL_Table { get; set; }

    public virtual DbSet<Tbl_FLOAT> Tbl_FLOAT { get; set; }
    //public virtual DbSet<Tbl_FLOAT_Table> Tbl_FLOAT_Table { get; set; }

    public virtual DbSet<Tbl_GEOGRAPHY> Tbl_GEOGRAPHY { get; set; }
    //public virtual DbSet<Tbl_GEOGRAPHY_Table> Tbl_GEOGRAPHY_Table { get; set; }

    public virtual DbSet<Tbl_GEOMETRY> Tbl_GEOMETRY { get; set; }
    //public virtual DbSet<Tbl_GEOMETRY_Table> Tbl_GEOMETRY_Table { get; set; }

    public virtual DbSet<Tbl_HIERARCHYID> Tbl_HIERARCHYID { get; set; }
    //public virtual DbSet<Tbl_HIERARCHYID_Table> Tbl_HIERARCHYID_Table { get; set; }

    public virtual DbSet<Tbl_IMAGE> Tbl_IMAGE { get; set; }
    //public virtual DbSet<Tbl_IMAGE_Table> Tbl_IMAGE_Table { get; set; }

    public virtual DbSet<Tbl_INT> Tbl_INT { get; set; }
    //public virtual DbSet<Tbl_INT_Table> Tbl_INT_Table { get; set; }

    public virtual DbSet<Tbl_JSON> Tbl_JSON { get; set; }
    //public virtual DbSet<Tbl_JSON_Table> Tbl_JSON_Table { get; set; }

    public virtual DbSet<Tbl_MONEY> Tbl_MONEY { get; set; }
    //public virtual DbSet<Tbl_MONEY_Table> Tbl_MONEY_Table { get; set; }

    public virtual DbSet<Tbl_NCHAR> Tbl_NCHAR { get; set; }
    //public virtual DbSet<Tbl_NCHAR_Table> Tbl_NCHAR_Table { get; set; }

    public virtual DbSet<Tbl_NTEXT> Tbl_NTEXT { get; set; }
    //public virtual DbSet<Tbl_NTEXT_Table> Tbl_NTEXT_Table { get; set; }

    public virtual DbSet<Tbl_NVARCHAR> Tbl_NVARCHAR { get; set; }
    //public virtual DbSet<Tbl_NVARCHAR_Table> Tbl_NVARCHAR_Table { get; set; }

    public virtual DbSet<Tbl_REAL> Tbl_REAL { get; set; }
    //public virtual DbSet<Tbl_REAL_Table> Tbl_REAL_Table { get; set; }

    public virtual DbSet<Tbl_SMALLDATETIME> Tbl_SMALLDATETIME { get; set; }
    //public virtual DbSet<Tbl_SMALLDATETIME_Table> Tbl_SMALLDATETIME_Table { get; set; }

    public virtual DbSet<Tbl_SMALLINT> Tbl_SMALLINT { get; set; }
    //public virtual DbSet<Tbl_SMALLINT_Table> Tbl_SMALLINT_Table { get; set; }

    public virtual DbSet<Tbl_TEXT> Tbl_TEXT { get; set; }
    //public virtual DbSet<Tbl_TEXT_Table> Tbl_TEXT_Table { get; set; }

    public virtual DbSet<Tbl_TIME> Tbl_TIME { get; set; }
    //public virtual DbSet<Tbl_TIME_Table> Tbl_TIME_Table { get; set; }

    public virtual DbSet<Tbl_TINYINT> Tbl_TINYINT { get; set; }
    //public virtual DbSet<Tbl_TINYINT_Table> Tbl_TINYINT_Table { get; set; }

    public virtual DbSet<Tbl_UNIQUEIDENTIFIER> Tbl_UNIQUEIDENTIFIER { get; set; }
    //public virtual DbSet<Tbl_UNIQUEIDENTIFIER_Table> Tbl_UNIQUEIDENTIFIER_Table { get; set; }

    public virtual DbSet<Tbl_VARBINARY> Tbl_VARBINARY { get; set; }
    //public virtual DbSet<Tbl_VARBINARY_Table> Tbl_VARBINARY_Table { get; set; }

    public virtual DbSet<Tbl_VARCHAR> Tbl_VARCHAR { get; set; }
    //public virtual DbSet<Tbl_VARCHAR_Table> Tbl_VARCHAR_Table { get; set; }

    public virtual DbSet<Tbl_XML> Tbl_XML { get; set; }
    //public virtual DbSet<Tbl_XML_Table> Tbl_XML_Table { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Tbl_BIGINT>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Tbl_BIGI__3214EC2743970769");
        });

        modelBuilder.Entity<Tbl_BINARY>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Tbl_BINA__3214EC27C1C53C59");

            entity.Property(e => e.DataColumn)
                .HasMaxLength(10)
                .IsFixedLength();
        });

        modelBuilder.Entity<Tbl_BIT>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Tbl_BIT__3214EC2709BAF75C");
        });

        modelBuilder.Entity<Tbl_CHAR>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Tbl_CHAR__3214EC2754525B8D");

            entity.Property(e => e.DataColumn)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<Tbl_DATE>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Tbl_DATE__3214EC2799466671");

            entity.Property(e => e.DataColumn).HasColumnType("date");
        });

        modelBuilder.Entity<Tbl_DATETIME>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Tbl_DATE__3214EC27B76F5021");

            entity.Property(e => e.DataColumn).HasColumnType("datetime");
        });

        modelBuilder.Entity<Tbl_DATETIME2>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Tbl_DATE__3214EC27EBE1F9A5");
        });

        modelBuilder.Entity<Tbl_DATETIMEOFFSET>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Tbl_DATE__3214EC27A3FC71AE");
        });

        modelBuilder.Entity<Tbl_DECIMAL>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Tbl_DECI__3214EC27E0036E7A");

            entity.Property(e => e.DataColumn).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<Tbl_FLOAT>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Tbl_FLOA__3214EC27169D92C2");
        });

        modelBuilder.Entity<Tbl_GEOGRAPHY>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Tbl_GEOG__3214EC27614B412C");
        });

        modelBuilder.Entity<Tbl_GEOMETRY>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Tbl_GEOM__3214EC2740C4B3F6");
        });

        modelBuilder.Entity<Tbl_HIERARCHYID>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Tbl_HIER__3214EC27814795D2");
        });

        modelBuilder.Entity<Tbl_IMAGE>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Tbl_IMAG__3214EC272ABBD18A");

            entity.Property(e => e.DataColumn).HasColumnType("image");
        });

        modelBuilder.Entity<Tbl_INT>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Tbl_INT__3214EC2785CAB757");
        });

        modelBuilder.Entity<Tbl_JSON>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Tbl_JSON__3214EC27B929A58B");
        });

        modelBuilder.Entity<Tbl_MONEY>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Tbl_MONE__3214EC27A2778933");

            entity.Property(e => e.DataColumn).HasColumnType("money");
        });

        modelBuilder.Entity<Tbl_NCHAR>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Tbl_NCHA__3214EC274342D898");

            entity.Property(e => e.DataColumn)
                .HasMaxLength(10)
                .IsFixedLength();
        });

        modelBuilder.Entity<Tbl_NTEXT>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Tbl_NTEX__3214EC270A3DAF05");

            entity.Property(e => e.DataColumn).HasColumnType("ntext");
        });

        modelBuilder.Entity<Tbl_NVARCHAR>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Tbl_NVAR__3214EC277D64F0EF");

            entity.Property(e => e.DataColumn).HasMaxLength(255);
        });

        modelBuilder.Entity<Tbl_REAL>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Tbl_REAL__3214EC27CD0E1E48");
        });

        modelBuilder.Entity<Tbl_SMALLDATETIME>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Tbl_SMAL__3214EC2728B69889");

            entity.Property(e => e.DataColumn).HasColumnType("smalldatetime");
        });

        modelBuilder.Entity<Tbl_SMALLINT>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Tbl_SMAL__3214EC273748F965");
        });

        modelBuilder.Entity<Tbl_TEXT>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Tbl_TEXT__3214EC27C91A69AC");

            entity.Property(e => e.DataColumn).HasColumnType("text");
        });

        modelBuilder.Entity<Tbl_TIME>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Tbl_TIME__3214EC2789D885AF");
        });

        modelBuilder.Entity<Tbl_TINYINT>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Tbl_TINY__3214EC27FD25BB08");
        });

        modelBuilder.Entity<Tbl_UNIQUEIDENTIFIER>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Tbl_UNIQ__3214EC27161D15BF");
        });

        modelBuilder.Entity<Tbl_VARBINARY>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Tbl_VARB__3214EC27D39CB34B");

            entity.Property(e => e.DataColumn).HasMaxLength(255);
        });

        modelBuilder.Entity<Tbl_VARCHAR>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Tbl_VARC__3214EC2753726EFE");

            entity.Property(e => e.DataColumn)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Tbl_XML>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Tbl_XML__3214EC27752328E4");

            entity.Property(e => e.DataColumn).HasColumnType("xml");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}

//added new
public partial class SimpleTablesMultipleData : DbContext
{
    public static MetaDB  metaData = new("SimpleTablesMultipleData");
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void SimpleTablesMultipleData_AddTables(){
        metaData.AddTable(Tbl_BIGINT_Table.metaData);
            metaData.AddTable(Tbl_BINARY_Table.metaData);
            metaData.AddTable(Tbl_BIT_Table.metaData);
            metaData.AddTable(Tbl_CHAR_Table.metaData);
            metaData.AddTable(Tbl_DATE_Table.metaData);
            metaData.AddTable(Tbl_DATETIME_Table.metaData);
            metaData.AddTable(Tbl_DATETIME2_Table.metaData);
            metaData.AddTable(Tbl_DATETIMEOFFSET_Table.metaData);
            metaData.AddTable(Tbl_DECIMAL_Table.metaData);
            metaData.AddTable(Tbl_FLOAT_Table.metaData);
            metaData.AddTable(Tbl_GEOGRAPHY_Table.metaData);
            metaData.AddTable(Tbl_GEOMETRY_Table.metaData);
            metaData.AddTable(Tbl_HIERARCHYID_Table.metaData);
            metaData.AddTable(Tbl_IMAGE_Table.metaData);
            metaData.AddTable(Tbl_INT_Table.metaData);
            metaData.AddTable(Tbl_JSON_Table.metaData);
            metaData.AddTable(Tbl_MONEY_Table.metaData);
            metaData.AddTable(Tbl_NCHAR_Table.metaData);
            metaData.AddTable(Tbl_NTEXT_Table.metaData);
            metaData.AddTable(Tbl_NVARCHAR_Table.metaData);
            metaData.AddTable(Tbl_REAL_Table.metaData);
            metaData.AddTable(Tbl_SMALLDATETIME_Table.metaData);
            metaData.AddTable(Tbl_SMALLINT_Table.metaData);
            metaData.AddTable(Tbl_TEXT_Table.metaData);
            metaData.AddTable(Tbl_TIME_Table.metaData);
            metaData.AddTable(Tbl_TINYINT_Table.metaData);
            metaData.AddTable(Tbl_UNIQUEIDENTIFIER_Table.metaData);
            metaData.AddTable(Tbl_VARBINARY_Table.metaData);
            metaData.AddTable(Tbl_VARCHAR_Table.metaData);
            metaData.AddTable(Tbl_XML_Table.metaData);
        AllDB.Singleton.AddDb(metaData);
    }

        public async Task<Tbl_BIGINT[]> Tbl_BIGINTFind_Array( SearchTbl_BIGINT? search){
 
        IQueryable<Tbl_BIGINT> data= this.Tbl_BIGINT ;
        if(search == null){
            return await data.ToArrayAsync();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_BIGINT> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return await ret.ToArrayAsync();
    }

    public  IAsyncEnumerable<Tbl_BIGINT> Tbl_BIGINTGetAll(){
        return this.Tbl_BIGINTFind_AsyncEnumerable(null);
    }
        public async  Task<Tbl_BIGINT> Tbl_BIGINTSave(Tbl_BIGINT val){

        var data= await Tbl_BIGINTSaveMultiple(val);
        if(data == null)
            return null;

        return data[0];
                
    }
    public async  Task<Tbl_BIGINT[]> Tbl_BIGINTSaveMultiple(params Tbl_BIGINT[] values){

        if(values == null)
            return null;
        if(values.Length == 0)
            return values;
        foreach(var value in values){
            this.Tbl_BIGINT.Add(value);
        }
        await SaveChangesAsync();
        return values;

                
    }

    public  IAsyncEnumerable<Tbl_BIGINT> Tbl_BIGINTSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_BIGINTColumns colToSearch, string value){
        
 var search = SearchTbl_BIGINT.FromSearch(sc,colToSearch,value);
 /*
        var orderBy = new GeneratorFromDB.OrderBy<eTbl_BIGINTColumns>();
                    orderBy.FieldName = eTbl_BIGINTColumns.ID;
                orderBy.Asc = false;
        search.OrderBys = new[] { orderBy };
        search.PageNumber = 1;
        search.PageSize = int.MaxValue-1;
        var s = new GeneratorFromDB.SearchField<eTbl_BIGINTColumns>();
        s.Criteria = sc;
        s.FieldName = colToSearch;
        s.Value = value;
        search.SearchFields = new[] { s };
        */
        var data = this.Tbl_BIGINTFind_AsyncEnumerable(search);
        return data;
    }   
/*
    public IAsyncEnumerable<Tbl_BIGINT> Tbl_BIGINTFind_AsyncEnumerable(SearchTbl_BIGINT? search){
 
        IQueryable<Tbl_BIGINT> data= this.Tbl_BIGINT ;
        if(search == null){
            return data.AsAsyncEnumerable();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_BIGINT> =search.TransformToOrder(data);
        if(search.PageSize>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    }
*/
    public Task<long> Tbl_BIGINTCount( SearchTbl_BIGINT? search){
     
        IQueryable<Tbl_BIGINT> data= this.Tbl_BIGINT ;
        if(search != null){
            data = search.TransformToWhere(data);        
        }        
        return data.LongCountAsync();
    }
    

    //oneKey
    
    public  async Task<bool> Tbl_BIGINTDelete(int id){

        var item = await Tbl_BIGINTGetSingle(id);
        if(item == null)
            return false;
       this.Tbl_BIGINT.Remove(item);
        await this.SaveChangesAsync();
        return true; 
    }
    public  async Task<bool> Tbl_BIGINTModify(Tbl_BIGINT val ){
        //do the attach
        /* var item = await Tbl_BIGINTGetSingle(val.??ID?????);
        if(item == null)
            return false;
        item.CopyFrom(val);        
        await this.SaveChangesAsync();
        */
        this.Tbl_BIGINT.Update(val);
        await this.SaveChangesAsync();
        return true; 
    }
    



    public Task<Tbl_BIGINT?> Tbl_BIGINTGetSingle(int id){
        return this.Tbl_BIGINT.FirstOrDefaultAsync(e => e.ID == id);
    }
    

    public IAsyncEnumerable<Tbl_BIGINT> Tbl_BIGINTFind_AsyncEnumerable(SearchTbl_BIGINT? search){
        IQueryable<Tbl_BIGINT> data= this.Tbl_BIGINT ;
        if(search == null){
                        return data.OrderByDescending(e => e.ID).AsAsyncEnumerable();
                    }
        data = search.TransformToWhere(data); 
        
        IQueryable<Tbl_BIGINT> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret=ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    
    }

        public async Task<Tbl_BINARY[]> Tbl_BINARYFind_Array( SearchTbl_BINARY? search){
 
        IQueryable<Tbl_BINARY> data= this.Tbl_BINARY ;
        if(search == null){
            return await data.ToArrayAsync();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_BINARY> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return await ret.ToArrayAsync();
    }

    public  IAsyncEnumerable<Tbl_BINARY> Tbl_BINARYGetAll(){
        return this.Tbl_BINARYFind_AsyncEnumerable(null);
    }
        public async  Task<Tbl_BINARY> Tbl_BINARYSave(Tbl_BINARY val){

        var data= await Tbl_BINARYSaveMultiple(val);
        if(data == null)
            return null;

        return data[0];
                
    }
    public async  Task<Tbl_BINARY[]> Tbl_BINARYSaveMultiple(params Tbl_BINARY[] values){

        if(values == null)
            return null;
        if(values.Length == 0)
            return values;
        foreach(var value in values){
            this.Tbl_BINARY.Add(value);
        }
        await SaveChangesAsync();
        return values;

                
    }

    public  IAsyncEnumerable<Tbl_BINARY> Tbl_BINARYSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_BINARYColumns colToSearch, string value){
        
 var search = SearchTbl_BINARY.FromSearch(sc,colToSearch,value);
 /*
        var orderBy = new GeneratorFromDB.OrderBy<eTbl_BINARYColumns>();
                    orderBy.FieldName = eTbl_BINARYColumns.ID;
                orderBy.Asc = false;
        search.OrderBys = new[] { orderBy };
        search.PageNumber = 1;
        search.PageSize = int.MaxValue-1;
        var s = new GeneratorFromDB.SearchField<eTbl_BINARYColumns>();
        s.Criteria = sc;
        s.FieldName = colToSearch;
        s.Value = value;
        search.SearchFields = new[] { s };
        */
        var data = this.Tbl_BINARYFind_AsyncEnumerable(search);
        return data;
    }   
/*
    public IAsyncEnumerable<Tbl_BINARY> Tbl_BINARYFind_AsyncEnumerable(SearchTbl_BINARY? search){
 
        IQueryable<Tbl_BINARY> data= this.Tbl_BINARY ;
        if(search == null){
            return data.AsAsyncEnumerable();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_BINARY> =search.TransformToOrder(data);
        if(search.PageSize>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    }
*/
    public Task<long> Tbl_BINARYCount( SearchTbl_BINARY? search){
     
        IQueryable<Tbl_BINARY> data= this.Tbl_BINARY ;
        if(search != null){
            data = search.TransformToWhere(data);        
        }        
        return data.LongCountAsync();
    }
    

    //oneKey
    
    public  async Task<bool> Tbl_BINARYDelete(int id){

        var item = await Tbl_BINARYGetSingle(id);
        if(item == null)
            return false;
       this.Tbl_BINARY.Remove(item);
        await this.SaveChangesAsync();
        return true; 
    }
    public  async Task<bool> Tbl_BINARYModify(Tbl_BINARY val ){
        //do the attach
        /* var item = await Tbl_BINARYGetSingle(val.??ID?????);
        if(item == null)
            return false;
        item.CopyFrom(val);        
        await this.SaveChangesAsync();
        */
        this.Tbl_BINARY.Update(val);
        await this.SaveChangesAsync();
        return true; 
    }
    



    public Task<Tbl_BINARY?> Tbl_BINARYGetSingle(int id){
        return this.Tbl_BINARY.FirstOrDefaultAsync(e => e.ID == id);
    }
    

    public IAsyncEnumerable<Tbl_BINARY> Tbl_BINARYFind_AsyncEnumerable(SearchTbl_BINARY? search){
        IQueryable<Tbl_BINARY> data= this.Tbl_BINARY ;
        if(search == null){
                        return data.OrderByDescending(e => e.ID).AsAsyncEnumerable();
                    }
        data = search.TransformToWhere(data); 
        
        IQueryable<Tbl_BINARY> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret=ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    
    }

        public async Task<Tbl_BIT[]> Tbl_BITFind_Array( SearchTbl_BIT? search){
 
        IQueryable<Tbl_BIT> data= this.Tbl_BIT ;
        if(search == null){
            return await data.ToArrayAsync();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_BIT> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return await ret.ToArrayAsync();
    }

    public  IAsyncEnumerable<Tbl_BIT> Tbl_BITGetAll(){
        return this.Tbl_BITFind_AsyncEnumerable(null);
    }
        public async  Task<Tbl_BIT> Tbl_BITSave(Tbl_BIT val){

        var data= await Tbl_BITSaveMultiple(val);
        if(data == null)
            return null;

        return data[0];
                
    }
    public async  Task<Tbl_BIT[]> Tbl_BITSaveMultiple(params Tbl_BIT[] values){

        if(values == null)
            return null;
        if(values.Length == 0)
            return values;
        foreach(var value in values){
            this.Tbl_BIT.Add(value);
        }
        await SaveChangesAsync();
        return values;

                
    }

    public  IAsyncEnumerable<Tbl_BIT> Tbl_BITSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_BITColumns colToSearch, string value){
        
 var search = SearchTbl_BIT.FromSearch(sc,colToSearch,value);
 /*
        var orderBy = new GeneratorFromDB.OrderBy<eTbl_BITColumns>();
                    orderBy.FieldName = eTbl_BITColumns.ID;
                orderBy.Asc = false;
        search.OrderBys = new[] { orderBy };
        search.PageNumber = 1;
        search.PageSize = int.MaxValue-1;
        var s = new GeneratorFromDB.SearchField<eTbl_BITColumns>();
        s.Criteria = sc;
        s.FieldName = colToSearch;
        s.Value = value;
        search.SearchFields = new[] { s };
        */
        var data = this.Tbl_BITFind_AsyncEnumerable(search);
        return data;
    }   
/*
    public IAsyncEnumerable<Tbl_BIT> Tbl_BITFind_AsyncEnumerable(SearchTbl_BIT? search){
 
        IQueryable<Tbl_BIT> data= this.Tbl_BIT ;
        if(search == null){
            return data.AsAsyncEnumerable();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_BIT> =search.TransformToOrder(data);
        if(search.PageSize>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    }
*/
    public Task<long> Tbl_BITCount( SearchTbl_BIT? search){
     
        IQueryable<Tbl_BIT> data= this.Tbl_BIT ;
        if(search != null){
            data = search.TransformToWhere(data);        
        }        
        return data.LongCountAsync();
    }
    

    //oneKey
    
    public  async Task<bool> Tbl_BITDelete(int id){

        var item = await Tbl_BITGetSingle(id);
        if(item == null)
            return false;
       this.Tbl_BIT.Remove(item);
        await this.SaveChangesAsync();
        return true; 
    }
    public  async Task<bool> Tbl_BITModify(Tbl_BIT val ){
        //do the attach
        /* var item = await Tbl_BITGetSingle(val.??ID?????);
        if(item == null)
            return false;
        item.CopyFrom(val);        
        await this.SaveChangesAsync();
        */
        this.Tbl_BIT.Update(val);
        await this.SaveChangesAsync();
        return true; 
    }
    



    public Task<Tbl_BIT?> Tbl_BITGetSingle(int id){
        return this.Tbl_BIT.FirstOrDefaultAsync(e => e.ID == id);
    }
    

    public IAsyncEnumerable<Tbl_BIT> Tbl_BITFind_AsyncEnumerable(SearchTbl_BIT? search){
        IQueryable<Tbl_BIT> data= this.Tbl_BIT ;
        if(search == null){
                        return data.OrderByDescending(e => e.ID).AsAsyncEnumerable();
                    }
        data = search.TransformToWhere(data); 
        
        IQueryable<Tbl_BIT> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret=ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    
    }

        public async Task<Tbl_CHAR[]> Tbl_CHARFind_Array( SearchTbl_CHAR? search){
 
        IQueryable<Tbl_CHAR> data= this.Tbl_CHAR ;
        if(search == null){
            return await data.ToArrayAsync();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_CHAR> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return await ret.ToArrayAsync();
    }

    public  IAsyncEnumerable<Tbl_CHAR> Tbl_CHARGetAll(){
        return this.Tbl_CHARFind_AsyncEnumerable(null);
    }
        public async  Task<Tbl_CHAR> Tbl_CHARSave(Tbl_CHAR val){

        var data= await Tbl_CHARSaveMultiple(val);
        if(data == null)
            return null;

        return data[0];
                
    }
    public async  Task<Tbl_CHAR[]> Tbl_CHARSaveMultiple(params Tbl_CHAR[] values){

        if(values == null)
            return null;
        if(values.Length == 0)
            return values;
        foreach(var value in values){
            this.Tbl_CHAR.Add(value);
        }
        await SaveChangesAsync();
        return values;

                
    }

    public  IAsyncEnumerable<Tbl_CHAR> Tbl_CHARSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_CHARColumns colToSearch, string value){
        
 var search = SearchTbl_CHAR.FromSearch(sc,colToSearch,value);
 /*
        var orderBy = new GeneratorFromDB.OrderBy<eTbl_CHARColumns>();
                    orderBy.FieldName = eTbl_CHARColumns.ID;
                orderBy.Asc = false;
        search.OrderBys = new[] { orderBy };
        search.PageNumber = 1;
        search.PageSize = int.MaxValue-1;
        var s = new GeneratorFromDB.SearchField<eTbl_CHARColumns>();
        s.Criteria = sc;
        s.FieldName = colToSearch;
        s.Value = value;
        search.SearchFields = new[] { s };
        */
        var data = this.Tbl_CHARFind_AsyncEnumerable(search);
        return data;
    }   
/*
    public IAsyncEnumerable<Tbl_CHAR> Tbl_CHARFind_AsyncEnumerable(SearchTbl_CHAR? search){
 
        IQueryable<Tbl_CHAR> data= this.Tbl_CHAR ;
        if(search == null){
            return data.AsAsyncEnumerable();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_CHAR> =search.TransformToOrder(data);
        if(search.PageSize>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    }
*/
    public Task<long> Tbl_CHARCount( SearchTbl_CHAR? search){
     
        IQueryable<Tbl_CHAR> data= this.Tbl_CHAR ;
        if(search != null){
            data = search.TransformToWhere(data);        
        }        
        return data.LongCountAsync();
    }
    

    //oneKey
    
    public  async Task<bool> Tbl_CHARDelete(int id){

        var item = await Tbl_CHARGetSingle(id);
        if(item == null)
            return false;
       this.Tbl_CHAR.Remove(item);
        await this.SaveChangesAsync();
        return true; 
    }
    public  async Task<bool> Tbl_CHARModify(Tbl_CHAR val ){
        //do the attach
        /* var item = await Tbl_CHARGetSingle(val.??ID?????);
        if(item == null)
            return false;
        item.CopyFrom(val);        
        await this.SaveChangesAsync();
        */
        this.Tbl_CHAR.Update(val);
        await this.SaveChangesAsync();
        return true; 
    }
    



    public Task<Tbl_CHAR?> Tbl_CHARGetSingle(int id){
        return this.Tbl_CHAR.FirstOrDefaultAsync(e => e.ID == id);
    }
    

    public IAsyncEnumerable<Tbl_CHAR> Tbl_CHARFind_AsyncEnumerable(SearchTbl_CHAR? search){
        IQueryable<Tbl_CHAR> data= this.Tbl_CHAR ;
        if(search == null){
                        return data.OrderByDescending(e => e.ID).AsAsyncEnumerable();
                    }
        data = search.TransformToWhere(data); 
        
        IQueryable<Tbl_CHAR> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret=ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    
    }

        public async Task<Tbl_DATE[]> Tbl_DATEFind_Array( SearchTbl_DATE? search){
 
        IQueryable<Tbl_DATE> data= this.Tbl_DATE ;
        if(search == null){
            return await data.ToArrayAsync();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_DATE> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return await ret.ToArrayAsync();
    }

    public  IAsyncEnumerable<Tbl_DATE> Tbl_DATEGetAll(){
        return this.Tbl_DATEFind_AsyncEnumerable(null);
    }
        public async  Task<Tbl_DATE> Tbl_DATESave(Tbl_DATE val){

        var data= await Tbl_DATESaveMultiple(val);
        if(data == null)
            return null;

        return data[0];
                
    }
    public async  Task<Tbl_DATE[]> Tbl_DATESaveMultiple(params Tbl_DATE[] values){

        if(values == null)
            return null;
        if(values.Length == 0)
            return values;
        foreach(var value in values){
            this.Tbl_DATE.Add(value);
        }
        await SaveChangesAsync();
        return values;

                
    }

    public  IAsyncEnumerable<Tbl_DATE> Tbl_DATESimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_DATEColumns colToSearch, string value){
        
 var search = SearchTbl_DATE.FromSearch(sc,colToSearch,value);
 /*
        var orderBy = new GeneratorFromDB.OrderBy<eTbl_DATEColumns>();
                    orderBy.FieldName = eTbl_DATEColumns.ID;
                orderBy.Asc = false;
        search.OrderBys = new[] { orderBy };
        search.PageNumber = 1;
        search.PageSize = int.MaxValue-1;
        var s = new GeneratorFromDB.SearchField<eTbl_DATEColumns>();
        s.Criteria = sc;
        s.FieldName = colToSearch;
        s.Value = value;
        search.SearchFields = new[] { s };
        */
        var data = this.Tbl_DATEFind_AsyncEnumerable(search);
        return data;
    }   
/*
    public IAsyncEnumerable<Tbl_DATE> Tbl_DATEFind_AsyncEnumerable(SearchTbl_DATE? search){
 
        IQueryable<Tbl_DATE> data= this.Tbl_DATE ;
        if(search == null){
            return data.AsAsyncEnumerable();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_DATE> =search.TransformToOrder(data);
        if(search.PageSize>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    }
*/
    public Task<long> Tbl_DATECount( SearchTbl_DATE? search){
     
        IQueryable<Tbl_DATE> data= this.Tbl_DATE ;
        if(search != null){
            data = search.TransformToWhere(data);        
        }        
        return data.LongCountAsync();
    }
    

    //oneKey
    
    public  async Task<bool> Tbl_DATEDelete(int id){

        var item = await Tbl_DATEGetSingle(id);
        if(item == null)
            return false;
       this.Tbl_DATE.Remove(item);
        await this.SaveChangesAsync();
        return true; 
    }
    public  async Task<bool> Tbl_DATEModify(Tbl_DATE val ){
        //do the attach
        /* var item = await Tbl_DATEGetSingle(val.??ID?????);
        if(item == null)
            return false;
        item.CopyFrom(val);        
        await this.SaveChangesAsync();
        */
        this.Tbl_DATE.Update(val);
        await this.SaveChangesAsync();
        return true; 
    }
    



    public Task<Tbl_DATE?> Tbl_DATEGetSingle(int id){
        return this.Tbl_DATE.FirstOrDefaultAsync(e => e.ID == id);
    }
    

    public IAsyncEnumerable<Tbl_DATE> Tbl_DATEFind_AsyncEnumerable(SearchTbl_DATE? search){
        IQueryable<Tbl_DATE> data= this.Tbl_DATE ;
        if(search == null){
                        return data.OrderByDescending(e => e.ID).AsAsyncEnumerable();
                    }
        data = search.TransformToWhere(data); 
        
        IQueryable<Tbl_DATE> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret=ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    
    }

        public async Task<Tbl_DATETIME[]> Tbl_DATETIMEFind_Array( SearchTbl_DATETIME? search){
 
        IQueryable<Tbl_DATETIME> data= this.Tbl_DATETIME ;
        if(search == null){
            return await data.ToArrayAsync();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_DATETIME> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return await ret.ToArrayAsync();
    }

    public  IAsyncEnumerable<Tbl_DATETIME> Tbl_DATETIMEGetAll(){
        return this.Tbl_DATETIMEFind_AsyncEnumerable(null);
    }
        public async  Task<Tbl_DATETIME> Tbl_DATETIMESave(Tbl_DATETIME val){

        var data= await Tbl_DATETIMESaveMultiple(val);
        if(data == null)
            return null;

        return data[0];
                
    }
    public async  Task<Tbl_DATETIME[]> Tbl_DATETIMESaveMultiple(params Tbl_DATETIME[] values){

        if(values == null)
            return null;
        if(values.Length == 0)
            return values;
        foreach(var value in values){
            this.Tbl_DATETIME.Add(value);
        }
        await SaveChangesAsync();
        return values;

                
    }

    public  IAsyncEnumerable<Tbl_DATETIME> Tbl_DATETIMESimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_DATETIMEColumns colToSearch, string value){
        
 var search = SearchTbl_DATETIME.FromSearch(sc,colToSearch,value);
 /*
        var orderBy = new GeneratorFromDB.OrderBy<eTbl_DATETIMEColumns>();
                    orderBy.FieldName = eTbl_DATETIMEColumns.ID;
                orderBy.Asc = false;
        search.OrderBys = new[] { orderBy };
        search.PageNumber = 1;
        search.PageSize = int.MaxValue-1;
        var s = new GeneratorFromDB.SearchField<eTbl_DATETIMEColumns>();
        s.Criteria = sc;
        s.FieldName = colToSearch;
        s.Value = value;
        search.SearchFields = new[] { s };
        */
        var data = this.Tbl_DATETIMEFind_AsyncEnumerable(search);
        return data;
    }   
/*
    public IAsyncEnumerable<Tbl_DATETIME> Tbl_DATETIMEFind_AsyncEnumerable(SearchTbl_DATETIME? search){
 
        IQueryable<Tbl_DATETIME> data= this.Tbl_DATETIME ;
        if(search == null){
            return data.AsAsyncEnumerable();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_DATETIME> =search.TransformToOrder(data);
        if(search.PageSize>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    }
*/
    public Task<long> Tbl_DATETIMECount( SearchTbl_DATETIME? search){
     
        IQueryable<Tbl_DATETIME> data= this.Tbl_DATETIME ;
        if(search != null){
            data = search.TransformToWhere(data);        
        }        
        return data.LongCountAsync();
    }
    

    //oneKey
    
    public  async Task<bool> Tbl_DATETIMEDelete(int id){

        var item = await Tbl_DATETIMEGetSingle(id);
        if(item == null)
            return false;
       this.Tbl_DATETIME.Remove(item);
        await this.SaveChangesAsync();
        return true; 
    }
    public  async Task<bool> Tbl_DATETIMEModify(Tbl_DATETIME val ){
        //do the attach
        /* var item = await Tbl_DATETIMEGetSingle(val.??ID?????);
        if(item == null)
            return false;
        item.CopyFrom(val);        
        await this.SaveChangesAsync();
        */
        this.Tbl_DATETIME.Update(val);
        await this.SaveChangesAsync();
        return true; 
    }
    



    public Task<Tbl_DATETIME?> Tbl_DATETIMEGetSingle(int id){
        return this.Tbl_DATETIME.FirstOrDefaultAsync(e => e.ID == id);
    }
    

    public IAsyncEnumerable<Tbl_DATETIME> Tbl_DATETIMEFind_AsyncEnumerable(SearchTbl_DATETIME? search){
        IQueryable<Tbl_DATETIME> data= this.Tbl_DATETIME ;
        if(search == null){
                        return data.OrderByDescending(e => e.ID).AsAsyncEnumerable();
                    }
        data = search.TransformToWhere(data); 
        
        IQueryable<Tbl_DATETIME> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret=ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    
    }

        public async Task<Tbl_DATETIME2[]> Tbl_DATETIME2Find_Array( SearchTbl_DATETIME2? search){
 
        IQueryable<Tbl_DATETIME2> data= this.Tbl_DATETIME2 ;
        if(search == null){
            return await data.ToArrayAsync();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_DATETIME2> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return await ret.ToArrayAsync();
    }

    public  IAsyncEnumerable<Tbl_DATETIME2> Tbl_DATETIME2GetAll(){
        return this.Tbl_DATETIME2Find_AsyncEnumerable(null);
    }
        public async  Task<Tbl_DATETIME2> Tbl_DATETIME2Save(Tbl_DATETIME2 val){

        var data= await Tbl_DATETIME2SaveMultiple(val);
        if(data == null)
            return null;

        return data[0];
                
    }
    public async  Task<Tbl_DATETIME2[]> Tbl_DATETIME2SaveMultiple(params Tbl_DATETIME2[] values){

        if(values == null)
            return null;
        if(values.Length == 0)
            return values;
        foreach(var value in values){
            this.Tbl_DATETIME2.Add(value);
        }
        await SaveChangesAsync();
        return values;

                
    }

    public  IAsyncEnumerable<Tbl_DATETIME2> Tbl_DATETIME2SimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_DATETIME2Columns colToSearch, string value){
        
 var search = SearchTbl_DATETIME2.FromSearch(sc,colToSearch,value);
 /*
        var orderBy = new GeneratorFromDB.OrderBy<eTbl_DATETIME2Columns>();
                    orderBy.FieldName = eTbl_DATETIME2Columns.ID;
                orderBy.Asc = false;
        search.OrderBys = new[] { orderBy };
        search.PageNumber = 1;
        search.PageSize = int.MaxValue-1;
        var s = new GeneratorFromDB.SearchField<eTbl_DATETIME2Columns>();
        s.Criteria = sc;
        s.FieldName = colToSearch;
        s.Value = value;
        search.SearchFields = new[] { s };
        */
        var data = this.Tbl_DATETIME2Find_AsyncEnumerable(search);
        return data;
    }   
/*
    public IAsyncEnumerable<Tbl_DATETIME2> Tbl_DATETIME2Find_AsyncEnumerable(SearchTbl_DATETIME2? search){
 
        IQueryable<Tbl_DATETIME2> data= this.Tbl_DATETIME2 ;
        if(search == null){
            return data.AsAsyncEnumerable();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_DATETIME2> =search.TransformToOrder(data);
        if(search.PageSize>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    }
*/
    public Task<long> Tbl_DATETIME2Count( SearchTbl_DATETIME2? search){
     
        IQueryable<Tbl_DATETIME2> data= this.Tbl_DATETIME2 ;
        if(search != null){
            data = search.TransformToWhere(data);        
        }        
        return data.LongCountAsync();
    }
    

    //oneKey
    
    public  async Task<bool> Tbl_DATETIME2Delete(int id){

        var item = await Tbl_DATETIME2GetSingle(id);
        if(item == null)
            return false;
       this.Tbl_DATETIME2.Remove(item);
        await this.SaveChangesAsync();
        return true; 
    }
    public  async Task<bool> Tbl_DATETIME2Modify(Tbl_DATETIME2 val ){
        //do the attach
        /* var item = await Tbl_DATETIME2GetSingle(val.??ID?????);
        if(item == null)
            return false;
        item.CopyFrom(val);        
        await this.SaveChangesAsync();
        */
        this.Tbl_DATETIME2.Update(val);
        await this.SaveChangesAsync();
        return true; 
    }
    



    public Task<Tbl_DATETIME2?> Tbl_DATETIME2GetSingle(int id){
        return this.Tbl_DATETIME2.FirstOrDefaultAsync(e => e.ID == id);
    }
    

    public IAsyncEnumerable<Tbl_DATETIME2> Tbl_DATETIME2Find_AsyncEnumerable(SearchTbl_DATETIME2? search){
        IQueryable<Tbl_DATETIME2> data= this.Tbl_DATETIME2 ;
        if(search == null){
                        return data.OrderByDescending(e => e.ID).AsAsyncEnumerable();
                    }
        data = search.TransformToWhere(data); 
        
        IQueryable<Tbl_DATETIME2> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret=ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    
    }

        public async Task<Tbl_DATETIMEOFFSET[]> Tbl_DATETIMEOFFSETFind_Array( SearchTbl_DATETIMEOFFSET? search){
 
        IQueryable<Tbl_DATETIMEOFFSET> data= this.Tbl_DATETIMEOFFSET ;
        if(search == null){
            return await data.ToArrayAsync();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_DATETIMEOFFSET> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return await ret.ToArrayAsync();
    }

    public  IAsyncEnumerable<Tbl_DATETIMEOFFSET> Tbl_DATETIMEOFFSETGetAll(){
        return this.Tbl_DATETIMEOFFSETFind_AsyncEnumerable(null);
    }
        public async  Task<Tbl_DATETIMEOFFSET> Tbl_DATETIMEOFFSETSave(Tbl_DATETIMEOFFSET val){

        var data= await Tbl_DATETIMEOFFSETSaveMultiple(val);
        if(data == null)
            return null;

        return data[0];
                
    }
    public async  Task<Tbl_DATETIMEOFFSET[]> Tbl_DATETIMEOFFSETSaveMultiple(params Tbl_DATETIMEOFFSET[] values){

        if(values == null)
            return null;
        if(values.Length == 0)
            return values;
        foreach(var value in values){
            this.Tbl_DATETIMEOFFSET.Add(value);
        }
        await SaveChangesAsync();
        return values;

                
    }

    public  IAsyncEnumerable<Tbl_DATETIMEOFFSET> Tbl_DATETIMEOFFSETSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_DATETIMEOFFSETColumns colToSearch, string value){
        
 var search = SearchTbl_DATETIMEOFFSET.FromSearch(sc,colToSearch,value);
 /*
        var orderBy = new GeneratorFromDB.OrderBy<eTbl_DATETIMEOFFSETColumns>();
                    orderBy.FieldName = eTbl_DATETIMEOFFSETColumns.ID;
                orderBy.Asc = false;
        search.OrderBys = new[] { orderBy };
        search.PageNumber = 1;
        search.PageSize = int.MaxValue-1;
        var s = new GeneratorFromDB.SearchField<eTbl_DATETIMEOFFSETColumns>();
        s.Criteria = sc;
        s.FieldName = colToSearch;
        s.Value = value;
        search.SearchFields = new[] { s };
        */
        var data = this.Tbl_DATETIMEOFFSETFind_AsyncEnumerable(search);
        return data;
    }   
/*
    public IAsyncEnumerable<Tbl_DATETIMEOFFSET> Tbl_DATETIMEOFFSETFind_AsyncEnumerable(SearchTbl_DATETIMEOFFSET? search){
 
        IQueryable<Tbl_DATETIMEOFFSET> data= this.Tbl_DATETIMEOFFSET ;
        if(search == null){
            return data.AsAsyncEnumerable();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_DATETIMEOFFSET> =search.TransformToOrder(data);
        if(search.PageSize>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    }
*/
    public Task<long> Tbl_DATETIMEOFFSETCount( SearchTbl_DATETIMEOFFSET? search){
     
        IQueryable<Tbl_DATETIMEOFFSET> data= this.Tbl_DATETIMEOFFSET ;
        if(search != null){
            data = search.TransformToWhere(data);        
        }        
        return data.LongCountAsync();
    }
    

    //oneKey
    
    public  async Task<bool> Tbl_DATETIMEOFFSETDelete(int id){

        var item = await Tbl_DATETIMEOFFSETGetSingle(id);
        if(item == null)
            return false;
       this.Tbl_DATETIMEOFFSET.Remove(item);
        await this.SaveChangesAsync();
        return true; 
    }
    public  async Task<bool> Tbl_DATETIMEOFFSETModify(Tbl_DATETIMEOFFSET val ){
        //do the attach
        /* var item = await Tbl_DATETIMEOFFSETGetSingle(val.??ID?????);
        if(item == null)
            return false;
        item.CopyFrom(val);        
        await this.SaveChangesAsync();
        */
        this.Tbl_DATETIMEOFFSET.Update(val);
        await this.SaveChangesAsync();
        return true; 
    }
    



    public Task<Tbl_DATETIMEOFFSET?> Tbl_DATETIMEOFFSETGetSingle(int id){
        return this.Tbl_DATETIMEOFFSET.FirstOrDefaultAsync(e => e.ID == id);
    }
    

    public IAsyncEnumerable<Tbl_DATETIMEOFFSET> Tbl_DATETIMEOFFSETFind_AsyncEnumerable(SearchTbl_DATETIMEOFFSET? search){
        IQueryable<Tbl_DATETIMEOFFSET> data= this.Tbl_DATETIMEOFFSET ;
        if(search == null){
                        return data.OrderByDescending(e => e.ID).AsAsyncEnumerable();
                    }
        data = search.TransformToWhere(data); 
        
        IQueryable<Tbl_DATETIMEOFFSET> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret=ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    
    }

        public async Task<Tbl_DECIMAL[]> Tbl_DECIMALFind_Array( SearchTbl_DECIMAL? search){
 
        IQueryable<Tbl_DECIMAL> data= this.Tbl_DECIMAL ;
        if(search == null){
            return await data.ToArrayAsync();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_DECIMAL> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return await ret.ToArrayAsync();
    }

    public  IAsyncEnumerable<Tbl_DECIMAL> Tbl_DECIMALGetAll(){
        return this.Tbl_DECIMALFind_AsyncEnumerable(null);
    }
        public async  Task<Tbl_DECIMAL> Tbl_DECIMALSave(Tbl_DECIMAL val){

        var data= await Tbl_DECIMALSaveMultiple(val);
        if(data == null)
            return null;

        return data[0];
                
    }
    public async  Task<Tbl_DECIMAL[]> Tbl_DECIMALSaveMultiple(params Tbl_DECIMAL[] values){

        if(values == null)
            return null;
        if(values.Length == 0)
            return values;
        foreach(var value in values){
            this.Tbl_DECIMAL.Add(value);
        }
        await SaveChangesAsync();
        return values;

                
    }

    public  IAsyncEnumerable<Tbl_DECIMAL> Tbl_DECIMALSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_DECIMALColumns colToSearch, string value){
        
 var search = SearchTbl_DECIMAL.FromSearch(sc,colToSearch,value);
 /*
        var orderBy = new GeneratorFromDB.OrderBy<eTbl_DECIMALColumns>();
                    orderBy.FieldName = eTbl_DECIMALColumns.ID;
                orderBy.Asc = false;
        search.OrderBys = new[] { orderBy };
        search.PageNumber = 1;
        search.PageSize = int.MaxValue-1;
        var s = new GeneratorFromDB.SearchField<eTbl_DECIMALColumns>();
        s.Criteria = sc;
        s.FieldName = colToSearch;
        s.Value = value;
        search.SearchFields = new[] { s };
        */
        var data = this.Tbl_DECIMALFind_AsyncEnumerable(search);
        return data;
    }   
/*
    public IAsyncEnumerable<Tbl_DECIMAL> Tbl_DECIMALFind_AsyncEnumerable(SearchTbl_DECIMAL? search){
 
        IQueryable<Tbl_DECIMAL> data= this.Tbl_DECIMAL ;
        if(search == null){
            return data.AsAsyncEnumerable();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_DECIMAL> =search.TransformToOrder(data);
        if(search.PageSize>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    }
*/
    public Task<long> Tbl_DECIMALCount( SearchTbl_DECIMAL? search){
     
        IQueryable<Tbl_DECIMAL> data= this.Tbl_DECIMAL ;
        if(search != null){
            data = search.TransformToWhere(data);        
        }        
        return data.LongCountAsync();
    }
    

    //oneKey
    
    public  async Task<bool> Tbl_DECIMALDelete(int id){

        var item = await Tbl_DECIMALGetSingle(id);
        if(item == null)
            return false;
       this.Tbl_DECIMAL.Remove(item);
        await this.SaveChangesAsync();
        return true; 
    }
    public  async Task<bool> Tbl_DECIMALModify(Tbl_DECIMAL val ){
        //do the attach
        /* var item = await Tbl_DECIMALGetSingle(val.??ID?????);
        if(item == null)
            return false;
        item.CopyFrom(val);        
        await this.SaveChangesAsync();
        */
        this.Tbl_DECIMAL.Update(val);
        await this.SaveChangesAsync();
        return true; 
    }
    



    public Task<Tbl_DECIMAL?> Tbl_DECIMALGetSingle(int id){
        return this.Tbl_DECIMAL.FirstOrDefaultAsync(e => e.ID == id);
    }
    

    public IAsyncEnumerable<Tbl_DECIMAL> Tbl_DECIMALFind_AsyncEnumerable(SearchTbl_DECIMAL? search){
        IQueryable<Tbl_DECIMAL> data= this.Tbl_DECIMAL ;
        if(search == null){
                        return data.OrderByDescending(e => e.ID).AsAsyncEnumerable();
                    }
        data = search.TransformToWhere(data); 
        
        IQueryable<Tbl_DECIMAL> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret=ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    
    }

        public async Task<Tbl_FLOAT[]> Tbl_FLOATFind_Array( SearchTbl_FLOAT? search){
 
        IQueryable<Tbl_FLOAT> data= this.Tbl_FLOAT ;
        if(search == null){
            return await data.ToArrayAsync();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_FLOAT> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return await ret.ToArrayAsync();
    }

    public  IAsyncEnumerable<Tbl_FLOAT> Tbl_FLOATGetAll(){
        return this.Tbl_FLOATFind_AsyncEnumerable(null);
    }
        public async  Task<Tbl_FLOAT> Tbl_FLOATSave(Tbl_FLOAT val){

        var data= await Tbl_FLOATSaveMultiple(val);
        if(data == null)
            return null;

        return data[0];
                
    }
    public async  Task<Tbl_FLOAT[]> Tbl_FLOATSaveMultiple(params Tbl_FLOAT[] values){

        if(values == null)
            return null;
        if(values.Length == 0)
            return values;
        foreach(var value in values){
            this.Tbl_FLOAT.Add(value);
        }
        await SaveChangesAsync();
        return values;

                
    }

    public  IAsyncEnumerable<Tbl_FLOAT> Tbl_FLOATSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_FLOATColumns colToSearch, string value){
        
 var search = SearchTbl_FLOAT.FromSearch(sc,colToSearch,value);
 /*
        var orderBy = new GeneratorFromDB.OrderBy<eTbl_FLOATColumns>();
                    orderBy.FieldName = eTbl_FLOATColumns.ID;
                orderBy.Asc = false;
        search.OrderBys = new[] { orderBy };
        search.PageNumber = 1;
        search.PageSize = int.MaxValue-1;
        var s = new GeneratorFromDB.SearchField<eTbl_FLOATColumns>();
        s.Criteria = sc;
        s.FieldName = colToSearch;
        s.Value = value;
        search.SearchFields = new[] { s };
        */
        var data = this.Tbl_FLOATFind_AsyncEnumerable(search);
        return data;
    }   
/*
    public IAsyncEnumerable<Tbl_FLOAT> Tbl_FLOATFind_AsyncEnumerable(SearchTbl_FLOAT? search){
 
        IQueryable<Tbl_FLOAT> data= this.Tbl_FLOAT ;
        if(search == null){
            return data.AsAsyncEnumerable();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_FLOAT> =search.TransformToOrder(data);
        if(search.PageSize>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    }
*/
    public Task<long> Tbl_FLOATCount( SearchTbl_FLOAT? search){
     
        IQueryable<Tbl_FLOAT> data= this.Tbl_FLOAT ;
        if(search != null){
            data = search.TransformToWhere(data);        
        }        
        return data.LongCountAsync();
    }
    

    //oneKey
    
    public  async Task<bool> Tbl_FLOATDelete(int id){

        var item = await Tbl_FLOATGetSingle(id);
        if(item == null)
            return false;
       this.Tbl_FLOAT.Remove(item);
        await this.SaveChangesAsync();
        return true; 
    }
    public  async Task<bool> Tbl_FLOATModify(Tbl_FLOAT val ){
        //do the attach
        /* var item = await Tbl_FLOATGetSingle(val.??ID?????);
        if(item == null)
            return false;
        item.CopyFrom(val);        
        await this.SaveChangesAsync();
        */
        this.Tbl_FLOAT.Update(val);
        await this.SaveChangesAsync();
        return true; 
    }
    



    public Task<Tbl_FLOAT?> Tbl_FLOATGetSingle(int id){
        return this.Tbl_FLOAT.FirstOrDefaultAsync(e => e.ID == id);
    }
    

    public IAsyncEnumerable<Tbl_FLOAT> Tbl_FLOATFind_AsyncEnumerable(SearchTbl_FLOAT? search){
        IQueryable<Tbl_FLOAT> data= this.Tbl_FLOAT ;
        if(search == null){
                        return data.OrderByDescending(e => e.ID).AsAsyncEnumerable();
                    }
        data = search.TransformToWhere(data); 
        
        IQueryable<Tbl_FLOAT> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret=ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    
    }

        public async Task<Tbl_GEOGRAPHY[]> Tbl_GEOGRAPHYFind_Array( SearchTbl_GEOGRAPHY? search){
 
        IQueryable<Tbl_GEOGRAPHY> data= this.Tbl_GEOGRAPHY ;
        if(search == null){
            return await data.ToArrayAsync();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_GEOGRAPHY> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return await ret.ToArrayAsync();
    }

    public  IAsyncEnumerable<Tbl_GEOGRAPHY> Tbl_GEOGRAPHYGetAll(){
        return this.Tbl_GEOGRAPHYFind_AsyncEnumerable(null);
    }
        public async  Task<Tbl_GEOGRAPHY> Tbl_GEOGRAPHYSave(Tbl_GEOGRAPHY val){

        var data= await Tbl_GEOGRAPHYSaveMultiple(val);
        if(data == null)
            return null;

        return data[0];
                
    }
    public async  Task<Tbl_GEOGRAPHY[]> Tbl_GEOGRAPHYSaveMultiple(params Tbl_GEOGRAPHY[] values){

        if(values == null)
            return null;
        if(values.Length == 0)
            return values;
        foreach(var value in values){
            this.Tbl_GEOGRAPHY.Add(value);
        }
        await SaveChangesAsync();
        return values;

                
    }

    public  IAsyncEnumerable<Tbl_GEOGRAPHY> Tbl_GEOGRAPHYSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_GEOGRAPHYColumns colToSearch, string value){
        
 var search = SearchTbl_GEOGRAPHY.FromSearch(sc,colToSearch,value);
 /*
        var orderBy = new GeneratorFromDB.OrderBy<eTbl_GEOGRAPHYColumns>();
                    orderBy.FieldName = eTbl_GEOGRAPHYColumns.ID;
                orderBy.Asc = false;
        search.OrderBys = new[] { orderBy };
        search.PageNumber = 1;
        search.PageSize = int.MaxValue-1;
        var s = new GeneratorFromDB.SearchField<eTbl_GEOGRAPHYColumns>();
        s.Criteria = sc;
        s.FieldName = colToSearch;
        s.Value = value;
        search.SearchFields = new[] { s };
        */
        var data = this.Tbl_GEOGRAPHYFind_AsyncEnumerable(search);
        return data;
    }   
/*
    public IAsyncEnumerable<Tbl_GEOGRAPHY> Tbl_GEOGRAPHYFind_AsyncEnumerable(SearchTbl_GEOGRAPHY? search){
 
        IQueryable<Tbl_GEOGRAPHY> data= this.Tbl_GEOGRAPHY ;
        if(search == null){
            return data.AsAsyncEnumerable();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_GEOGRAPHY> =search.TransformToOrder(data);
        if(search.PageSize>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    }
*/
    public Task<long> Tbl_GEOGRAPHYCount( SearchTbl_GEOGRAPHY? search){
     
        IQueryable<Tbl_GEOGRAPHY> data= this.Tbl_GEOGRAPHY ;
        if(search != null){
            data = search.TransformToWhere(data);        
        }        
        return data.LongCountAsync();
    }
    

    //oneKey
    
    public  async Task<bool> Tbl_GEOGRAPHYDelete(int id){

        var item = await Tbl_GEOGRAPHYGetSingle(id);
        if(item == null)
            return false;
       this.Tbl_GEOGRAPHY.Remove(item);
        await this.SaveChangesAsync();
        return true; 
    }
    public  async Task<bool> Tbl_GEOGRAPHYModify(Tbl_GEOGRAPHY val ){
        //do the attach
        /* var item = await Tbl_GEOGRAPHYGetSingle(val.??ID?????);
        if(item == null)
            return false;
        item.CopyFrom(val);        
        await this.SaveChangesAsync();
        */
        this.Tbl_GEOGRAPHY.Update(val);
        await this.SaveChangesAsync();
        return true; 
    }
    



    public Task<Tbl_GEOGRAPHY?> Tbl_GEOGRAPHYGetSingle(int id){
        return this.Tbl_GEOGRAPHY.FirstOrDefaultAsync(e => e.ID == id);
    }
    

    public IAsyncEnumerable<Tbl_GEOGRAPHY> Tbl_GEOGRAPHYFind_AsyncEnumerable(SearchTbl_GEOGRAPHY? search){
        IQueryable<Tbl_GEOGRAPHY> data= this.Tbl_GEOGRAPHY ;
        if(search == null){
                        return data.OrderByDescending(e => e.ID).AsAsyncEnumerable();
                    }
        data = search.TransformToWhere(data); 
        
        IQueryable<Tbl_GEOGRAPHY> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret=ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    
    }

        public async Task<Tbl_GEOMETRY[]> Tbl_GEOMETRYFind_Array( SearchTbl_GEOMETRY? search){
 
        IQueryable<Tbl_GEOMETRY> data= this.Tbl_GEOMETRY ;
        if(search == null){
            return await data.ToArrayAsync();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_GEOMETRY> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return await ret.ToArrayAsync();
    }

    public  IAsyncEnumerable<Tbl_GEOMETRY> Tbl_GEOMETRYGetAll(){
        return this.Tbl_GEOMETRYFind_AsyncEnumerable(null);
    }
        public async  Task<Tbl_GEOMETRY> Tbl_GEOMETRYSave(Tbl_GEOMETRY val){

        var data= await Tbl_GEOMETRYSaveMultiple(val);
        if(data == null)
            return null;

        return data[0];
                
    }
    public async  Task<Tbl_GEOMETRY[]> Tbl_GEOMETRYSaveMultiple(params Tbl_GEOMETRY[] values){

        if(values == null)
            return null;
        if(values.Length == 0)
            return values;
        foreach(var value in values){
            this.Tbl_GEOMETRY.Add(value);
        }
        await SaveChangesAsync();
        return values;

                
    }

    public  IAsyncEnumerable<Tbl_GEOMETRY> Tbl_GEOMETRYSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_GEOMETRYColumns colToSearch, string value){
        
 var search = SearchTbl_GEOMETRY.FromSearch(sc,colToSearch,value);
 /*
        var orderBy = new GeneratorFromDB.OrderBy<eTbl_GEOMETRYColumns>();
                    orderBy.FieldName = eTbl_GEOMETRYColumns.ID;
                orderBy.Asc = false;
        search.OrderBys = new[] { orderBy };
        search.PageNumber = 1;
        search.PageSize = int.MaxValue-1;
        var s = new GeneratorFromDB.SearchField<eTbl_GEOMETRYColumns>();
        s.Criteria = sc;
        s.FieldName = colToSearch;
        s.Value = value;
        search.SearchFields = new[] { s };
        */
        var data = this.Tbl_GEOMETRYFind_AsyncEnumerable(search);
        return data;
    }   
/*
    public IAsyncEnumerable<Tbl_GEOMETRY> Tbl_GEOMETRYFind_AsyncEnumerable(SearchTbl_GEOMETRY? search){
 
        IQueryable<Tbl_GEOMETRY> data= this.Tbl_GEOMETRY ;
        if(search == null){
            return data.AsAsyncEnumerable();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_GEOMETRY> =search.TransformToOrder(data);
        if(search.PageSize>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    }
*/
    public Task<long> Tbl_GEOMETRYCount( SearchTbl_GEOMETRY? search){
     
        IQueryable<Tbl_GEOMETRY> data= this.Tbl_GEOMETRY ;
        if(search != null){
            data = search.TransformToWhere(data);        
        }        
        return data.LongCountAsync();
    }
    

    //oneKey
    
    public  async Task<bool> Tbl_GEOMETRYDelete(int id){

        var item = await Tbl_GEOMETRYGetSingle(id);
        if(item == null)
            return false;
       this.Tbl_GEOMETRY.Remove(item);
        await this.SaveChangesAsync();
        return true; 
    }
    public  async Task<bool> Tbl_GEOMETRYModify(Tbl_GEOMETRY val ){
        //do the attach
        /* var item = await Tbl_GEOMETRYGetSingle(val.??ID?????);
        if(item == null)
            return false;
        item.CopyFrom(val);        
        await this.SaveChangesAsync();
        */
        this.Tbl_GEOMETRY.Update(val);
        await this.SaveChangesAsync();
        return true; 
    }
    



    public Task<Tbl_GEOMETRY?> Tbl_GEOMETRYGetSingle(int id){
        return this.Tbl_GEOMETRY.FirstOrDefaultAsync(e => e.ID == id);
    }
    

    public IAsyncEnumerable<Tbl_GEOMETRY> Tbl_GEOMETRYFind_AsyncEnumerable(SearchTbl_GEOMETRY? search){
        IQueryable<Tbl_GEOMETRY> data= this.Tbl_GEOMETRY ;
        if(search == null){
                        return data.OrderByDescending(e => e.ID).AsAsyncEnumerable();
                    }
        data = search.TransformToWhere(data); 
        
        IQueryable<Tbl_GEOMETRY> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret=ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    
    }

        public async Task<Tbl_HIERARCHYID[]> Tbl_HIERARCHYIDFind_Array( SearchTbl_HIERARCHYID? search){
 
        IQueryable<Tbl_HIERARCHYID> data= this.Tbl_HIERARCHYID ;
        if(search == null){
            return await data.ToArrayAsync();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_HIERARCHYID> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return await ret.ToArrayAsync();
    }

    public  IAsyncEnumerable<Tbl_HIERARCHYID> Tbl_HIERARCHYIDGetAll(){
        return this.Tbl_HIERARCHYIDFind_AsyncEnumerable(null);
    }
        public async  Task<Tbl_HIERARCHYID> Tbl_HIERARCHYIDSave(Tbl_HIERARCHYID val){

        var data= await Tbl_HIERARCHYIDSaveMultiple(val);
        if(data == null)
            return null;

        return data[0];
                
    }
    public async  Task<Tbl_HIERARCHYID[]> Tbl_HIERARCHYIDSaveMultiple(params Tbl_HIERARCHYID[] values){

        if(values == null)
            return null;
        if(values.Length == 0)
            return values;
        foreach(var value in values){
            this.Tbl_HIERARCHYID.Add(value);
        }
        await SaveChangesAsync();
        return values;

                
    }

    public  IAsyncEnumerable<Tbl_HIERARCHYID> Tbl_HIERARCHYIDSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_HIERARCHYIDColumns colToSearch, string value){
        
 var search = SearchTbl_HIERARCHYID.FromSearch(sc,colToSearch,value);
 /*
        var orderBy = new GeneratorFromDB.OrderBy<eTbl_HIERARCHYIDColumns>();
                    orderBy.FieldName = eTbl_HIERARCHYIDColumns.ID;
                orderBy.Asc = false;
        search.OrderBys = new[] { orderBy };
        search.PageNumber = 1;
        search.PageSize = int.MaxValue-1;
        var s = new GeneratorFromDB.SearchField<eTbl_HIERARCHYIDColumns>();
        s.Criteria = sc;
        s.FieldName = colToSearch;
        s.Value = value;
        search.SearchFields = new[] { s };
        */
        var data = this.Tbl_HIERARCHYIDFind_AsyncEnumerable(search);
        return data;
    }   
/*
    public IAsyncEnumerable<Tbl_HIERARCHYID> Tbl_HIERARCHYIDFind_AsyncEnumerable(SearchTbl_HIERARCHYID? search){
 
        IQueryable<Tbl_HIERARCHYID> data= this.Tbl_HIERARCHYID ;
        if(search == null){
            return data.AsAsyncEnumerable();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_HIERARCHYID> =search.TransformToOrder(data);
        if(search.PageSize>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    }
*/
    public Task<long> Tbl_HIERARCHYIDCount( SearchTbl_HIERARCHYID? search){
     
        IQueryable<Tbl_HIERARCHYID> data= this.Tbl_HIERARCHYID ;
        if(search != null){
            data = search.TransformToWhere(data);        
        }        
        return data.LongCountAsync();
    }
    

    //oneKey
    
    public  async Task<bool> Tbl_HIERARCHYIDDelete(int id){

        var item = await Tbl_HIERARCHYIDGetSingle(id);
        if(item == null)
            return false;
       this.Tbl_HIERARCHYID.Remove(item);
        await this.SaveChangesAsync();
        return true; 
    }
    public  async Task<bool> Tbl_HIERARCHYIDModify(Tbl_HIERARCHYID val ){
        //do the attach
        /* var item = await Tbl_HIERARCHYIDGetSingle(val.??ID?????);
        if(item == null)
            return false;
        item.CopyFrom(val);        
        await this.SaveChangesAsync();
        */
        this.Tbl_HIERARCHYID.Update(val);
        await this.SaveChangesAsync();
        return true; 
    }
    



    public Task<Tbl_HIERARCHYID?> Tbl_HIERARCHYIDGetSingle(int id){
        return this.Tbl_HIERARCHYID.FirstOrDefaultAsync(e => e.ID == id);
    }
    

    public IAsyncEnumerable<Tbl_HIERARCHYID> Tbl_HIERARCHYIDFind_AsyncEnumerable(SearchTbl_HIERARCHYID? search){
        IQueryable<Tbl_HIERARCHYID> data= this.Tbl_HIERARCHYID ;
        if(search == null){
                        return data.OrderByDescending(e => e.ID).AsAsyncEnumerable();
                    }
        data = search.TransformToWhere(data); 
        
        IQueryable<Tbl_HIERARCHYID> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret=ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    
    }

        public async Task<Tbl_IMAGE[]> Tbl_IMAGEFind_Array( SearchTbl_IMAGE? search){
 
        IQueryable<Tbl_IMAGE> data= this.Tbl_IMAGE ;
        if(search == null){
            return await data.ToArrayAsync();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_IMAGE> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return await ret.ToArrayAsync();
    }

    public  IAsyncEnumerable<Tbl_IMAGE> Tbl_IMAGEGetAll(){
        return this.Tbl_IMAGEFind_AsyncEnumerable(null);
    }
        public async  Task<Tbl_IMAGE> Tbl_IMAGESave(Tbl_IMAGE val){

        var data= await Tbl_IMAGESaveMultiple(val);
        if(data == null)
            return null;

        return data[0];
                
    }
    public async  Task<Tbl_IMAGE[]> Tbl_IMAGESaveMultiple(params Tbl_IMAGE[] values){

        if(values == null)
            return null;
        if(values.Length == 0)
            return values;
        foreach(var value in values){
            this.Tbl_IMAGE.Add(value);
        }
        await SaveChangesAsync();
        return values;

                
    }

    public  IAsyncEnumerable<Tbl_IMAGE> Tbl_IMAGESimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_IMAGEColumns colToSearch, string value){
        
 var search = SearchTbl_IMAGE.FromSearch(sc,colToSearch,value);
 /*
        var orderBy = new GeneratorFromDB.OrderBy<eTbl_IMAGEColumns>();
                    orderBy.FieldName = eTbl_IMAGEColumns.ID;
                orderBy.Asc = false;
        search.OrderBys = new[] { orderBy };
        search.PageNumber = 1;
        search.PageSize = int.MaxValue-1;
        var s = new GeneratorFromDB.SearchField<eTbl_IMAGEColumns>();
        s.Criteria = sc;
        s.FieldName = colToSearch;
        s.Value = value;
        search.SearchFields = new[] { s };
        */
        var data = this.Tbl_IMAGEFind_AsyncEnumerable(search);
        return data;
    }   
/*
    public IAsyncEnumerable<Tbl_IMAGE> Tbl_IMAGEFind_AsyncEnumerable(SearchTbl_IMAGE? search){
 
        IQueryable<Tbl_IMAGE> data= this.Tbl_IMAGE ;
        if(search == null){
            return data.AsAsyncEnumerable();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_IMAGE> =search.TransformToOrder(data);
        if(search.PageSize>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    }
*/
    public Task<long> Tbl_IMAGECount( SearchTbl_IMAGE? search){
     
        IQueryable<Tbl_IMAGE> data= this.Tbl_IMAGE ;
        if(search != null){
            data = search.TransformToWhere(data);        
        }        
        return data.LongCountAsync();
    }
    

    //oneKey
    
    public  async Task<bool> Tbl_IMAGEDelete(int id){

        var item = await Tbl_IMAGEGetSingle(id);
        if(item == null)
            return false;
       this.Tbl_IMAGE.Remove(item);
        await this.SaveChangesAsync();
        return true; 
    }
    public  async Task<bool> Tbl_IMAGEModify(Tbl_IMAGE val ){
        //do the attach
        /* var item = await Tbl_IMAGEGetSingle(val.??ID?????);
        if(item == null)
            return false;
        item.CopyFrom(val);        
        await this.SaveChangesAsync();
        */
        this.Tbl_IMAGE.Update(val);
        await this.SaveChangesAsync();
        return true; 
    }
    



    public Task<Tbl_IMAGE?> Tbl_IMAGEGetSingle(int id){
        return this.Tbl_IMAGE.FirstOrDefaultAsync(e => e.ID == id);
    }
    

    public IAsyncEnumerable<Tbl_IMAGE> Tbl_IMAGEFind_AsyncEnumerable(SearchTbl_IMAGE? search){
        IQueryable<Tbl_IMAGE> data= this.Tbl_IMAGE ;
        if(search == null){
                        return data.OrderByDescending(e => e.ID).AsAsyncEnumerable();
                    }
        data = search.TransformToWhere(data); 
        
        IQueryable<Tbl_IMAGE> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret=ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    
    }

        public async Task<Tbl_INT[]> Tbl_INTFind_Array( SearchTbl_INT? search){
 
        IQueryable<Tbl_INT> data= this.Tbl_INT ;
        if(search == null){
            return await data.ToArrayAsync();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_INT> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return await ret.ToArrayAsync();
    }

    public  IAsyncEnumerable<Tbl_INT> Tbl_INTGetAll(){
        return this.Tbl_INTFind_AsyncEnumerable(null);
    }
        public async  Task<Tbl_INT> Tbl_INTSave(Tbl_INT val){

        var data= await Tbl_INTSaveMultiple(val);
        if(data == null)
            return null;

        return data[0];
                
    }
    public async  Task<Tbl_INT[]> Tbl_INTSaveMultiple(params Tbl_INT[] values){

        if(values == null)
            return null;
        if(values.Length == 0)
            return values;
        foreach(var value in values){
            this.Tbl_INT.Add(value);
        }
        await SaveChangesAsync();
        return values;

                
    }

    public  IAsyncEnumerable<Tbl_INT> Tbl_INTSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_INTColumns colToSearch, string value){
        
 var search = SearchTbl_INT.FromSearch(sc,colToSearch,value);
 /*
        var orderBy = new GeneratorFromDB.OrderBy<eTbl_INTColumns>();
                    orderBy.FieldName = eTbl_INTColumns.ID;
                orderBy.Asc = false;
        search.OrderBys = new[] { orderBy };
        search.PageNumber = 1;
        search.PageSize = int.MaxValue-1;
        var s = new GeneratorFromDB.SearchField<eTbl_INTColumns>();
        s.Criteria = sc;
        s.FieldName = colToSearch;
        s.Value = value;
        search.SearchFields = new[] { s };
        */
        var data = this.Tbl_INTFind_AsyncEnumerable(search);
        return data;
    }   
/*
    public IAsyncEnumerable<Tbl_INT> Tbl_INTFind_AsyncEnumerable(SearchTbl_INT? search){
 
        IQueryable<Tbl_INT> data= this.Tbl_INT ;
        if(search == null){
            return data.AsAsyncEnumerable();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_INT> =search.TransformToOrder(data);
        if(search.PageSize>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    }
*/
    public Task<long> Tbl_INTCount( SearchTbl_INT? search){
     
        IQueryable<Tbl_INT> data= this.Tbl_INT ;
        if(search != null){
            data = search.TransformToWhere(data);        
        }        
        return data.LongCountAsync();
    }
    

    //oneKey
    
    public  async Task<bool> Tbl_INTDelete(int id){

        var item = await Tbl_INTGetSingle(id);
        if(item == null)
            return false;
       this.Tbl_INT.Remove(item);
        await this.SaveChangesAsync();
        return true; 
    }
    public  async Task<bool> Tbl_INTModify(Tbl_INT val ){
        //do the attach
        /* var item = await Tbl_INTGetSingle(val.??ID?????);
        if(item == null)
            return false;
        item.CopyFrom(val);        
        await this.SaveChangesAsync();
        */
        this.Tbl_INT.Update(val);
        await this.SaveChangesAsync();
        return true; 
    }
    



    public Task<Tbl_INT?> Tbl_INTGetSingle(int id){
        return this.Tbl_INT.FirstOrDefaultAsync(e => e.ID == id);
    }
    

    public IAsyncEnumerable<Tbl_INT> Tbl_INTFind_AsyncEnumerable(SearchTbl_INT? search){
        IQueryable<Tbl_INT> data= this.Tbl_INT ;
        if(search == null){
                        return data.OrderByDescending(e => e.ID).AsAsyncEnumerable();
                    }
        data = search.TransformToWhere(data); 
        
        IQueryable<Tbl_INT> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret=ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    
    }

        public async Task<Tbl_JSON[]> Tbl_JSONFind_Array( SearchTbl_JSON? search){
 
        IQueryable<Tbl_JSON> data= this.Tbl_JSON ;
        if(search == null){
            return await data.ToArrayAsync();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_JSON> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return await ret.ToArrayAsync();
    }

    public  IAsyncEnumerable<Tbl_JSON> Tbl_JSONGetAll(){
        return this.Tbl_JSONFind_AsyncEnumerable(null);
    }
        public async  Task<Tbl_JSON> Tbl_JSONSave(Tbl_JSON val){

        var data= await Tbl_JSONSaveMultiple(val);
        if(data == null)
            return null;

        return data[0];
                
    }
    public async  Task<Tbl_JSON[]> Tbl_JSONSaveMultiple(params Tbl_JSON[] values){

        if(values == null)
            return null;
        if(values.Length == 0)
            return values;
        foreach(var value in values){
            this.Tbl_JSON.Add(value);
        }
        await SaveChangesAsync();
        return values;

                
    }

    public  IAsyncEnumerable<Tbl_JSON> Tbl_JSONSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_JSONColumns colToSearch, string value){
        
 var search = SearchTbl_JSON.FromSearch(sc,colToSearch,value);
 /*
        var orderBy = new GeneratorFromDB.OrderBy<eTbl_JSONColumns>();
                    orderBy.FieldName = eTbl_JSONColumns.ID;
                orderBy.Asc = false;
        search.OrderBys = new[] { orderBy };
        search.PageNumber = 1;
        search.PageSize = int.MaxValue-1;
        var s = new GeneratorFromDB.SearchField<eTbl_JSONColumns>();
        s.Criteria = sc;
        s.FieldName = colToSearch;
        s.Value = value;
        search.SearchFields = new[] { s };
        */
        var data = this.Tbl_JSONFind_AsyncEnumerable(search);
        return data;
    }   
/*
    public IAsyncEnumerable<Tbl_JSON> Tbl_JSONFind_AsyncEnumerable(SearchTbl_JSON? search){
 
        IQueryable<Tbl_JSON> data= this.Tbl_JSON ;
        if(search == null){
            return data.AsAsyncEnumerable();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_JSON> =search.TransformToOrder(data);
        if(search.PageSize>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    }
*/
    public Task<long> Tbl_JSONCount( SearchTbl_JSON? search){
     
        IQueryable<Tbl_JSON> data= this.Tbl_JSON ;
        if(search != null){
            data = search.TransformToWhere(data);        
        }        
        return data.LongCountAsync();
    }
    

    //oneKey
    
    public  async Task<bool> Tbl_JSONDelete(int id){

        var item = await Tbl_JSONGetSingle(id);
        if(item == null)
            return false;
       this.Tbl_JSON.Remove(item);
        await this.SaveChangesAsync();
        return true; 
    }
    public  async Task<bool> Tbl_JSONModify(Tbl_JSON val ){
        //do the attach
        /* var item = await Tbl_JSONGetSingle(val.??ID?????);
        if(item == null)
            return false;
        item.CopyFrom(val);        
        await this.SaveChangesAsync();
        */
        this.Tbl_JSON.Update(val);
        await this.SaveChangesAsync();
        return true; 
    }
    



    public Task<Tbl_JSON?> Tbl_JSONGetSingle(int id){
        return this.Tbl_JSON.FirstOrDefaultAsync(e => e.ID == id);
    }
    

    public IAsyncEnumerable<Tbl_JSON> Tbl_JSONFind_AsyncEnumerable(SearchTbl_JSON? search){
        IQueryable<Tbl_JSON> data= this.Tbl_JSON ;
        if(search == null){
                        return data.OrderByDescending(e => e.ID).AsAsyncEnumerable();
                    }
        data = search.TransformToWhere(data); 
        
        IQueryable<Tbl_JSON> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret=ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    
    }

        public async Task<Tbl_MONEY[]> Tbl_MONEYFind_Array( SearchTbl_MONEY? search){
 
        IQueryable<Tbl_MONEY> data= this.Tbl_MONEY ;
        if(search == null){
            return await data.ToArrayAsync();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_MONEY> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return await ret.ToArrayAsync();
    }

    public  IAsyncEnumerable<Tbl_MONEY> Tbl_MONEYGetAll(){
        return this.Tbl_MONEYFind_AsyncEnumerable(null);
    }
        public async  Task<Tbl_MONEY> Tbl_MONEYSave(Tbl_MONEY val){

        var data= await Tbl_MONEYSaveMultiple(val);
        if(data == null)
            return null;

        return data[0];
                
    }
    public async  Task<Tbl_MONEY[]> Tbl_MONEYSaveMultiple(params Tbl_MONEY[] values){

        if(values == null)
            return null;
        if(values.Length == 0)
            return values;
        foreach(var value in values){
            this.Tbl_MONEY.Add(value);
        }
        await SaveChangesAsync();
        return values;

                
    }

    public  IAsyncEnumerable<Tbl_MONEY> Tbl_MONEYSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_MONEYColumns colToSearch, string value){
        
 var search = SearchTbl_MONEY.FromSearch(sc,colToSearch,value);
 /*
        var orderBy = new GeneratorFromDB.OrderBy<eTbl_MONEYColumns>();
                    orderBy.FieldName = eTbl_MONEYColumns.ID;
                orderBy.Asc = false;
        search.OrderBys = new[] { orderBy };
        search.PageNumber = 1;
        search.PageSize = int.MaxValue-1;
        var s = new GeneratorFromDB.SearchField<eTbl_MONEYColumns>();
        s.Criteria = sc;
        s.FieldName = colToSearch;
        s.Value = value;
        search.SearchFields = new[] { s };
        */
        var data = this.Tbl_MONEYFind_AsyncEnumerable(search);
        return data;
    }   
/*
    public IAsyncEnumerable<Tbl_MONEY> Tbl_MONEYFind_AsyncEnumerable(SearchTbl_MONEY? search){
 
        IQueryable<Tbl_MONEY> data= this.Tbl_MONEY ;
        if(search == null){
            return data.AsAsyncEnumerable();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_MONEY> =search.TransformToOrder(data);
        if(search.PageSize>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    }
*/
    public Task<long> Tbl_MONEYCount( SearchTbl_MONEY? search){
     
        IQueryable<Tbl_MONEY> data= this.Tbl_MONEY ;
        if(search != null){
            data = search.TransformToWhere(data);        
        }        
        return data.LongCountAsync();
    }
    

    //oneKey
    
    public  async Task<bool> Tbl_MONEYDelete(int id){

        var item = await Tbl_MONEYGetSingle(id);
        if(item == null)
            return false;
       this.Tbl_MONEY.Remove(item);
        await this.SaveChangesAsync();
        return true; 
    }
    public  async Task<bool> Tbl_MONEYModify(Tbl_MONEY val ){
        //do the attach
        /* var item = await Tbl_MONEYGetSingle(val.??ID?????);
        if(item == null)
            return false;
        item.CopyFrom(val);        
        await this.SaveChangesAsync();
        */
        this.Tbl_MONEY.Update(val);
        await this.SaveChangesAsync();
        return true; 
    }
    



    public Task<Tbl_MONEY?> Tbl_MONEYGetSingle(int id){
        return this.Tbl_MONEY.FirstOrDefaultAsync(e => e.ID == id);
    }
    

    public IAsyncEnumerable<Tbl_MONEY> Tbl_MONEYFind_AsyncEnumerable(SearchTbl_MONEY? search){
        IQueryable<Tbl_MONEY> data= this.Tbl_MONEY ;
        if(search == null){
                        return data.OrderByDescending(e => e.ID).AsAsyncEnumerable();
                    }
        data = search.TransformToWhere(data); 
        
        IQueryable<Tbl_MONEY> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret=ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    
    }

        public async Task<Tbl_NCHAR[]> Tbl_NCHARFind_Array( SearchTbl_NCHAR? search){
 
        IQueryable<Tbl_NCHAR> data= this.Tbl_NCHAR ;
        if(search == null){
            return await data.ToArrayAsync();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_NCHAR> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return await ret.ToArrayAsync();
    }

    public  IAsyncEnumerable<Tbl_NCHAR> Tbl_NCHARGetAll(){
        return this.Tbl_NCHARFind_AsyncEnumerable(null);
    }
        public async  Task<Tbl_NCHAR> Tbl_NCHARSave(Tbl_NCHAR val){

        var data= await Tbl_NCHARSaveMultiple(val);
        if(data == null)
            return null;

        return data[0];
                
    }
    public async  Task<Tbl_NCHAR[]> Tbl_NCHARSaveMultiple(params Tbl_NCHAR[] values){

        if(values == null)
            return null;
        if(values.Length == 0)
            return values;
        foreach(var value in values){
            this.Tbl_NCHAR.Add(value);
        }
        await SaveChangesAsync();
        return values;

                
    }

    public  IAsyncEnumerable<Tbl_NCHAR> Tbl_NCHARSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_NCHARColumns colToSearch, string value){
        
 var search = SearchTbl_NCHAR.FromSearch(sc,colToSearch,value);
 /*
        var orderBy = new GeneratorFromDB.OrderBy<eTbl_NCHARColumns>();
                    orderBy.FieldName = eTbl_NCHARColumns.ID;
                orderBy.Asc = false;
        search.OrderBys = new[] { orderBy };
        search.PageNumber = 1;
        search.PageSize = int.MaxValue-1;
        var s = new GeneratorFromDB.SearchField<eTbl_NCHARColumns>();
        s.Criteria = sc;
        s.FieldName = colToSearch;
        s.Value = value;
        search.SearchFields = new[] { s };
        */
        var data = this.Tbl_NCHARFind_AsyncEnumerable(search);
        return data;
    }   
/*
    public IAsyncEnumerable<Tbl_NCHAR> Tbl_NCHARFind_AsyncEnumerable(SearchTbl_NCHAR? search){
 
        IQueryable<Tbl_NCHAR> data= this.Tbl_NCHAR ;
        if(search == null){
            return data.AsAsyncEnumerable();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_NCHAR> =search.TransformToOrder(data);
        if(search.PageSize>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    }
*/
    public Task<long> Tbl_NCHARCount( SearchTbl_NCHAR? search){
     
        IQueryable<Tbl_NCHAR> data= this.Tbl_NCHAR ;
        if(search != null){
            data = search.TransformToWhere(data);        
        }        
        return data.LongCountAsync();
    }
    

    //oneKey
    
    public  async Task<bool> Tbl_NCHARDelete(int id){

        var item = await Tbl_NCHARGetSingle(id);
        if(item == null)
            return false;
       this.Tbl_NCHAR.Remove(item);
        await this.SaveChangesAsync();
        return true; 
    }
    public  async Task<bool> Tbl_NCHARModify(Tbl_NCHAR val ){
        //do the attach
        /* var item = await Tbl_NCHARGetSingle(val.??ID?????);
        if(item == null)
            return false;
        item.CopyFrom(val);        
        await this.SaveChangesAsync();
        */
        this.Tbl_NCHAR.Update(val);
        await this.SaveChangesAsync();
        return true; 
    }
    



    public Task<Tbl_NCHAR?> Tbl_NCHARGetSingle(int id){
        return this.Tbl_NCHAR.FirstOrDefaultAsync(e => e.ID == id);
    }
    

    public IAsyncEnumerable<Tbl_NCHAR> Tbl_NCHARFind_AsyncEnumerable(SearchTbl_NCHAR? search){
        IQueryable<Tbl_NCHAR> data= this.Tbl_NCHAR ;
        if(search == null){
                        return data.OrderByDescending(e => e.ID).AsAsyncEnumerable();
                    }
        data = search.TransformToWhere(data); 
        
        IQueryable<Tbl_NCHAR> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret=ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    
    }

        public async Task<Tbl_NTEXT[]> Tbl_NTEXTFind_Array( SearchTbl_NTEXT? search){
 
        IQueryable<Tbl_NTEXT> data= this.Tbl_NTEXT ;
        if(search == null){
            return await data.ToArrayAsync();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_NTEXT> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return await ret.ToArrayAsync();
    }

    public  IAsyncEnumerable<Tbl_NTEXT> Tbl_NTEXTGetAll(){
        return this.Tbl_NTEXTFind_AsyncEnumerable(null);
    }
        public async  Task<Tbl_NTEXT> Tbl_NTEXTSave(Tbl_NTEXT val){

        var data= await Tbl_NTEXTSaveMultiple(val);
        if(data == null)
            return null;

        return data[0];
                
    }
    public async  Task<Tbl_NTEXT[]> Tbl_NTEXTSaveMultiple(params Tbl_NTEXT[] values){

        if(values == null)
            return null;
        if(values.Length == 0)
            return values;
        foreach(var value in values){
            this.Tbl_NTEXT.Add(value);
        }
        await SaveChangesAsync();
        return values;

                
    }

    public  IAsyncEnumerable<Tbl_NTEXT> Tbl_NTEXTSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_NTEXTColumns colToSearch, string value){
        
 var search = SearchTbl_NTEXT.FromSearch(sc,colToSearch,value);
 /*
        var orderBy = new GeneratorFromDB.OrderBy<eTbl_NTEXTColumns>();
                    orderBy.FieldName = eTbl_NTEXTColumns.ID;
                orderBy.Asc = false;
        search.OrderBys = new[] { orderBy };
        search.PageNumber = 1;
        search.PageSize = int.MaxValue-1;
        var s = new GeneratorFromDB.SearchField<eTbl_NTEXTColumns>();
        s.Criteria = sc;
        s.FieldName = colToSearch;
        s.Value = value;
        search.SearchFields = new[] { s };
        */
        var data = this.Tbl_NTEXTFind_AsyncEnumerable(search);
        return data;
    }   
/*
    public IAsyncEnumerable<Tbl_NTEXT> Tbl_NTEXTFind_AsyncEnumerable(SearchTbl_NTEXT? search){
 
        IQueryable<Tbl_NTEXT> data= this.Tbl_NTEXT ;
        if(search == null){
            return data.AsAsyncEnumerable();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_NTEXT> =search.TransformToOrder(data);
        if(search.PageSize>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    }
*/
    public Task<long> Tbl_NTEXTCount( SearchTbl_NTEXT? search){
     
        IQueryable<Tbl_NTEXT> data= this.Tbl_NTEXT ;
        if(search != null){
            data = search.TransformToWhere(data);        
        }        
        return data.LongCountAsync();
    }
    

    //oneKey
    
    public  async Task<bool> Tbl_NTEXTDelete(int id){

        var item = await Tbl_NTEXTGetSingle(id);
        if(item == null)
            return false;
       this.Tbl_NTEXT.Remove(item);
        await this.SaveChangesAsync();
        return true; 
    }
    public  async Task<bool> Tbl_NTEXTModify(Tbl_NTEXT val ){
        //do the attach
        /* var item = await Tbl_NTEXTGetSingle(val.??ID?????);
        if(item == null)
            return false;
        item.CopyFrom(val);        
        await this.SaveChangesAsync();
        */
        this.Tbl_NTEXT.Update(val);
        await this.SaveChangesAsync();
        return true; 
    }
    



    public Task<Tbl_NTEXT?> Tbl_NTEXTGetSingle(int id){
        return this.Tbl_NTEXT.FirstOrDefaultAsync(e => e.ID == id);
    }
    

    public IAsyncEnumerable<Tbl_NTEXT> Tbl_NTEXTFind_AsyncEnumerable(SearchTbl_NTEXT? search){
        IQueryable<Tbl_NTEXT> data= this.Tbl_NTEXT ;
        if(search == null){
                        return data.OrderByDescending(e => e.ID).AsAsyncEnumerable();
                    }
        data = search.TransformToWhere(data); 
        
        IQueryable<Tbl_NTEXT> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret=ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    
    }

        public async Task<Tbl_NVARCHAR[]> Tbl_NVARCHARFind_Array( SearchTbl_NVARCHAR? search){
 
        IQueryable<Tbl_NVARCHAR> data= this.Tbl_NVARCHAR ;
        if(search == null){
            return await data.ToArrayAsync();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_NVARCHAR> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return await ret.ToArrayAsync();
    }

    public  IAsyncEnumerable<Tbl_NVARCHAR> Tbl_NVARCHARGetAll(){
        return this.Tbl_NVARCHARFind_AsyncEnumerable(null);
    }
        public async  Task<Tbl_NVARCHAR> Tbl_NVARCHARSave(Tbl_NVARCHAR val){

        var data= await Tbl_NVARCHARSaveMultiple(val);
        if(data == null)
            return null;

        return data[0];
                
    }
    public async  Task<Tbl_NVARCHAR[]> Tbl_NVARCHARSaveMultiple(params Tbl_NVARCHAR[] values){

        if(values == null)
            return null;
        if(values.Length == 0)
            return values;
        foreach(var value in values){
            this.Tbl_NVARCHAR.Add(value);
        }
        await SaveChangesAsync();
        return values;

                
    }

    public  IAsyncEnumerable<Tbl_NVARCHAR> Tbl_NVARCHARSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_NVARCHARColumns colToSearch, string value){
        
 var search = SearchTbl_NVARCHAR.FromSearch(sc,colToSearch,value);
 /*
        var orderBy = new GeneratorFromDB.OrderBy<eTbl_NVARCHARColumns>();
                    orderBy.FieldName = eTbl_NVARCHARColumns.ID;
                orderBy.Asc = false;
        search.OrderBys = new[] { orderBy };
        search.PageNumber = 1;
        search.PageSize = int.MaxValue-1;
        var s = new GeneratorFromDB.SearchField<eTbl_NVARCHARColumns>();
        s.Criteria = sc;
        s.FieldName = colToSearch;
        s.Value = value;
        search.SearchFields = new[] { s };
        */
        var data = this.Tbl_NVARCHARFind_AsyncEnumerable(search);
        return data;
    }   
/*
    public IAsyncEnumerable<Tbl_NVARCHAR> Tbl_NVARCHARFind_AsyncEnumerable(SearchTbl_NVARCHAR? search){
 
        IQueryable<Tbl_NVARCHAR> data= this.Tbl_NVARCHAR ;
        if(search == null){
            return data.AsAsyncEnumerable();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_NVARCHAR> =search.TransformToOrder(data);
        if(search.PageSize>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    }
*/
    public Task<long> Tbl_NVARCHARCount( SearchTbl_NVARCHAR? search){
     
        IQueryable<Tbl_NVARCHAR> data= this.Tbl_NVARCHAR ;
        if(search != null){
            data = search.TransformToWhere(data);        
        }        
        return data.LongCountAsync();
    }
    

    //oneKey
    
    public  async Task<bool> Tbl_NVARCHARDelete(int id){

        var item = await Tbl_NVARCHARGetSingle(id);
        if(item == null)
            return false;
       this.Tbl_NVARCHAR.Remove(item);
        await this.SaveChangesAsync();
        return true; 
    }
    public  async Task<bool> Tbl_NVARCHARModify(Tbl_NVARCHAR val ){
        //do the attach
        /* var item = await Tbl_NVARCHARGetSingle(val.??ID?????);
        if(item == null)
            return false;
        item.CopyFrom(val);        
        await this.SaveChangesAsync();
        */
        this.Tbl_NVARCHAR.Update(val);
        await this.SaveChangesAsync();
        return true; 
    }
    



    public Task<Tbl_NVARCHAR?> Tbl_NVARCHARGetSingle(int id){
        return this.Tbl_NVARCHAR.FirstOrDefaultAsync(e => e.ID == id);
    }
    

    public IAsyncEnumerable<Tbl_NVARCHAR> Tbl_NVARCHARFind_AsyncEnumerable(SearchTbl_NVARCHAR? search){
        IQueryable<Tbl_NVARCHAR> data= this.Tbl_NVARCHAR ;
        if(search == null){
                        return data.OrderByDescending(e => e.ID).AsAsyncEnumerable();
                    }
        data = search.TransformToWhere(data); 
        
        IQueryable<Tbl_NVARCHAR> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret=ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    
    }

        public async Task<Tbl_REAL[]> Tbl_REALFind_Array( SearchTbl_REAL? search){
 
        IQueryable<Tbl_REAL> data= this.Tbl_REAL ;
        if(search == null){
            return await data.ToArrayAsync();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_REAL> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return await ret.ToArrayAsync();
    }

    public  IAsyncEnumerable<Tbl_REAL> Tbl_REALGetAll(){
        return this.Tbl_REALFind_AsyncEnumerable(null);
    }
        public async  Task<Tbl_REAL> Tbl_REALSave(Tbl_REAL val){

        var data= await Tbl_REALSaveMultiple(val);
        if(data == null)
            return null;

        return data[0];
                
    }
    public async  Task<Tbl_REAL[]> Tbl_REALSaveMultiple(params Tbl_REAL[] values){

        if(values == null)
            return null;
        if(values.Length == 0)
            return values;
        foreach(var value in values){
            this.Tbl_REAL.Add(value);
        }
        await SaveChangesAsync();
        return values;

                
    }

    public  IAsyncEnumerable<Tbl_REAL> Tbl_REALSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_REALColumns colToSearch, string value){
        
 var search = SearchTbl_REAL.FromSearch(sc,colToSearch,value);
 /*
        var orderBy = new GeneratorFromDB.OrderBy<eTbl_REALColumns>();
                    orderBy.FieldName = eTbl_REALColumns.ID;
                orderBy.Asc = false;
        search.OrderBys = new[] { orderBy };
        search.PageNumber = 1;
        search.PageSize = int.MaxValue-1;
        var s = new GeneratorFromDB.SearchField<eTbl_REALColumns>();
        s.Criteria = sc;
        s.FieldName = colToSearch;
        s.Value = value;
        search.SearchFields = new[] { s };
        */
        var data = this.Tbl_REALFind_AsyncEnumerable(search);
        return data;
    }   
/*
    public IAsyncEnumerable<Tbl_REAL> Tbl_REALFind_AsyncEnumerable(SearchTbl_REAL? search){
 
        IQueryable<Tbl_REAL> data= this.Tbl_REAL ;
        if(search == null){
            return data.AsAsyncEnumerable();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_REAL> =search.TransformToOrder(data);
        if(search.PageSize>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    }
*/
    public Task<long> Tbl_REALCount( SearchTbl_REAL? search){
     
        IQueryable<Tbl_REAL> data= this.Tbl_REAL ;
        if(search != null){
            data = search.TransformToWhere(data);        
        }        
        return data.LongCountAsync();
    }
    

    //oneKey
    
    public  async Task<bool> Tbl_REALDelete(int id){

        var item = await Tbl_REALGetSingle(id);
        if(item == null)
            return false;
       this.Tbl_REAL.Remove(item);
        await this.SaveChangesAsync();
        return true; 
    }
    public  async Task<bool> Tbl_REALModify(Tbl_REAL val ){
        //do the attach
        /* var item = await Tbl_REALGetSingle(val.??ID?????);
        if(item == null)
            return false;
        item.CopyFrom(val);        
        await this.SaveChangesAsync();
        */
        this.Tbl_REAL.Update(val);
        await this.SaveChangesAsync();
        return true; 
    }
    



    public Task<Tbl_REAL?> Tbl_REALGetSingle(int id){
        return this.Tbl_REAL.FirstOrDefaultAsync(e => e.ID == id);
    }
    

    public IAsyncEnumerable<Tbl_REAL> Tbl_REALFind_AsyncEnumerable(SearchTbl_REAL? search){
        IQueryable<Tbl_REAL> data= this.Tbl_REAL ;
        if(search == null){
                        return data.OrderByDescending(e => e.ID).AsAsyncEnumerable();
                    }
        data = search.TransformToWhere(data); 
        
        IQueryable<Tbl_REAL> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret=ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    
    }

        public async Task<Tbl_SMALLDATETIME[]> Tbl_SMALLDATETIMEFind_Array( SearchTbl_SMALLDATETIME? search){
 
        IQueryable<Tbl_SMALLDATETIME> data= this.Tbl_SMALLDATETIME ;
        if(search == null){
            return await data.ToArrayAsync();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_SMALLDATETIME> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return await ret.ToArrayAsync();
    }

    public  IAsyncEnumerable<Tbl_SMALLDATETIME> Tbl_SMALLDATETIMEGetAll(){
        return this.Tbl_SMALLDATETIMEFind_AsyncEnumerable(null);
    }
        public async  Task<Tbl_SMALLDATETIME> Tbl_SMALLDATETIMESave(Tbl_SMALLDATETIME val){

        var data= await Tbl_SMALLDATETIMESaveMultiple(val);
        if(data == null)
            return null;

        return data[0];
                
    }
    public async  Task<Tbl_SMALLDATETIME[]> Tbl_SMALLDATETIMESaveMultiple(params Tbl_SMALLDATETIME[] values){

        if(values == null)
            return null;
        if(values.Length == 0)
            return values;
        foreach(var value in values){
            this.Tbl_SMALLDATETIME.Add(value);
        }
        await SaveChangesAsync();
        return values;

                
    }

    public  IAsyncEnumerable<Tbl_SMALLDATETIME> Tbl_SMALLDATETIMESimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_SMALLDATETIMEColumns colToSearch, string value){
        
 var search = SearchTbl_SMALLDATETIME.FromSearch(sc,colToSearch,value);
 /*
        var orderBy = new GeneratorFromDB.OrderBy<eTbl_SMALLDATETIMEColumns>();
                    orderBy.FieldName = eTbl_SMALLDATETIMEColumns.ID;
                orderBy.Asc = false;
        search.OrderBys = new[] { orderBy };
        search.PageNumber = 1;
        search.PageSize = int.MaxValue-1;
        var s = new GeneratorFromDB.SearchField<eTbl_SMALLDATETIMEColumns>();
        s.Criteria = sc;
        s.FieldName = colToSearch;
        s.Value = value;
        search.SearchFields = new[] { s };
        */
        var data = this.Tbl_SMALLDATETIMEFind_AsyncEnumerable(search);
        return data;
    }   
/*
    public IAsyncEnumerable<Tbl_SMALLDATETIME> Tbl_SMALLDATETIMEFind_AsyncEnumerable(SearchTbl_SMALLDATETIME? search){
 
        IQueryable<Tbl_SMALLDATETIME> data= this.Tbl_SMALLDATETIME ;
        if(search == null){
            return data.AsAsyncEnumerable();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_SMALLDATETIME> =search.TransformToOrder(data);
        if(search.PageSize>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    }
*/
    public Task<long> Tbl_SMALLDATETIMECount( SearchTbl_SMALLDATETIME? search){
     
        IQueryable<Tbl_SMALLDATETIME> data= this.Tbl_SMALLDATETIME ;
        if(search != null){
            data = search.TransformToWhere(data);        
        }        
        return data.LongCountAsync();
    }
    

    //oneKey
    
    public  async Task<bool> Tbl_SMALLDATETIMEDelete(int id){

        var item = await Tbl_SMALLDATETIMEGetSingle(id);
        if(item == null)
            return false;
       this.Tbl_SMALLDATETIME.Remove(item);
        await this.SaveChangesAsync();
        return true; 
    }
    public  async Task<bool> Tbl_SMALLDATETIMEModify(Tbl_SMALLDATETIME val ){
        //do the attach
        /* var item = await Tbl_SMALLDATETIMEGetSingle(val.??ID?????);
        if(item == null)
            return false;
        item.CopyFrom(val);        
        await this.SaveChangesAsync();
        */
        this.Tbl_SMALLDATETIME.Update(val);
        await this.SaveChangesAsync();
        return true; 
    }
    



    public Task<Tbl_SMALLDATETIME?> Tbl_SMALLDATETIMEGetSingle(int id){
        return this.Tbl_SMALLDATETIME.FirstOrDefaultAsync(e => e.ID == id);
    }
    

    public IAsyncEnumerable<Tbl_SMALLDATETIME> Tbl_SMALLDATETIMEFind_AsyncEnumerable(SearchTbl_SMALLDATETIME? search){
        IQueryable<Tbl_SMALLDATETIME> data= this.Tbl_SMALLDATETIME ;
        if(search == null){
                        return data.OrderByDescending(e => e.ID).AsAsyncEnumerable();
                    }
        data = search.TransformToWhere(data); 
        
        IQueryable<Tbl_SMALLDATETIME> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret=ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    
    }

        public async Task<Tbl_SMALLINT[]> Tbl_SMALLINTFind_Array( SearchTbl_SMALLINT? search){
 
        IQueryable<Tbl_SMALLINT> data= this.Tbl_SMALLINT ;
        if(search == null){
            return await data.ToArrayAsync();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_SMALLINT> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return await ret.ToArrayAsync();
    }

    public  IAsyncEnumerable<Tbl_SMALLINT> Tbl_SMALLINTGetAll(){
        return this.Tbl_SMALLINTFind_AsyncEnumerable(null);
    }
        public async  Task<Tbl_SMALLINT> Tbl_SMALLINTSave(Tbl_SMALLINT val){

        var data= await Tbl_SMALLINTSaveMultiple(val);
        if(data == null)
            return null;

        return data[0];
                
    }
    public async  Task<Tbl_SMALLINT[]> Tbl_SMALLINTSaveMultiple(params Tbl_SMALLINT[] values){

        if(values == null)
            return null;
        if(values.Length == 0)
            return values;
        foreach(var value in values){
            this.Tbl_SMALLINT.Add(value);
        }
        await SaveChangesAsync();
        return values;

                
    }

    public  IAsyncEnumerable<Tbl_SMALLINT> Tbl_SMALLINTSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_SMALLINTColumns colToSearch, string value){
        
 var search = SearchTbl_SMALLINT.FromSearch(sc,colToSearch,value);
 /*
        var orderBy = new GeneratorFromDB.OrderBy<eTbl_SMALLINTColumns>();
                    orderBy.FieldName = eTbl_SMALLINTColumns.ID;
                orderBy.Asc = false;
        search.OrderBys = new[] { orderBy };
        search.PageNumber = 1;
        search.PageSize = int.MaxValue-1;
        var s = new GeneratorFromDB.SearchField<eTbl_SMALLINTColumns>();
        s.Criteria = sc;
        s.FieldName = colToSearch;
        s.Value = value;
        search.SearchFields = new[] { s };
        */
        var data = this.Tbl_SMALLINTFind_AsyncEnumerable(search);
        return data;
    }   
/*
    public IAsyncEnumerable<Tbl_SMALLINT> Tbl_SMALLINTFind_AsyncEnumerable(SearchTbl_SMALLINT? search){
 
        IQueryable<Tbl_SMALLINT> data= this.Tbl_SMALLINT ;
        if(search == null){
            return data.AsAsyncEnumerable();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_SMALLINT> =search.TransformToOrder(data);
        if(search.PageSize>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    }
*/
    public Task<long> Tbl_SMALLINTCount( SearchTbl_SMALLINT? search){
     
        IQueryable<Tbl_SMALLINT> data= this.Tbl_SMALLINT ;
        if(search != null){
            data = search.TransformToWhere(data);        
        }        
        return data.LongCountAsync();
    }
    

    //oneKey
    
    public  async Task<bool> Tbl_SMALLINTDelete(int id){

        var item = await Tbl_SMALLINTGetSingle(id);
        if(item == null)
            return false;
       this.Tbl_SMALLINT.Remove(item);
        await this.SaveChangesAsync();
        return true; 
    }
    public  async Task<bool> Tbl_SMALLINTModify(Tbl_SMALLINT val ){
        //do the attach
        /* var item = await Tbl_SMALLINTGetSingle(val.??ID?????);
        if(item == null)
            return false;
        item.CopyFrom(val);        
        await this.SaveChangesAsync();
        */
        this.Tbl_SMALLINT.Update(val);
        await this.SaveChangesAsync();
        return true; 
    }
    



    public Task<Tbl_SMALLINT?> Tbl_SMALLINTGetSingle(int id){
        return this.Tbl_SMALLINT.FirstOrDefaultAsync(e => e.ID == id);
    }
    

    public IAsyncEnumerable<Tbl_SMALLINT> Tbl_SMALLINTFind_AsyncEnumerable(SearchTbl_SMALLINT? search){
        IQueryable<Tbl_SMALLINT> data= this.Tbl_SMALLINT ;
        if(search == null){
                        return data.OrderByDescending(e => e.ID).AsAsyncEnumerable();
                    }
        data = search.TransformToWhere(data); 
        
        IQueryable<Tbl_SMALLINT> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret=ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    
    }

        public async Task<Tbl_TEXT[]> Tbl_TEXTFind_Array( SearchTbl_TEXT? search){
 
        IQueryable<Tbl_TEXT> data= this.Tbl_TEXT ;
        if(search == null){
            return await data.ToArrayAsync();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_TEXT> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return await ret.ToArrayAsync();
    }

    public  IAsyncEnumerable<Tbl_TEXT> Tbl_TEXTGetAll(){
        return this.Tbl_TEXTFind_AsyncEnumerable(null);
    }
        public async  Task<Tbl_TEXT> Tbl_TEXTSave(Tbl_TEXT val){

        var data= await Tbl_TEXTSaveMultiple(val);
        if(data == null)
            return null;

        return data[0];
                
    }
    public async  Task<Tbl_TEXT[]> Tbl_TEXTSaveMultiple(params Tbl_TEXT[] values){

        if(values == null)
            return null;
        if(values.Length == 0)
            return values;
        foreach(var value in values){
            this.Tbl_TEXT.Add(value);
        }
        await SaveChangesAsync();
        return values;

                
    }

    public  IAsyncEnumerable<Tbl_TEXT> Tbl_TEXTSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_TEXTColumns colToSearch, string value){
        
 var search = SearchTbl_TEXT.FromSearch(sc,colToSearch,value);
 /*
        var orderBy = new GeneratorFromDB.OrderBy<eTbl_TEXTColumns>();
                    orderBy.FieldName = eTbl_TEXTColumns.ID;
                orderBy.Asc = false;
        search.OrderBys = new[] { orderBy };
        search.PageNumber = 1;
        search.PageSize = int.MaxValue-1;
        var s = new GeneratorFromDB.SearchField<eTbl_TEXTColumns>();
        s.Criteria = sc;
        s.FieldName = colToSearch;
        s.Value = value;
        search.SearchFields = new[] { s };
        */
        var data = this.Tbl_TEXTFind_AsyncEnumerable(search);
        return data;
    }   
/*
    public IAsyncEnumerable<Tbl_TEXT> Tbl_TEXTFind_AsyncEnumerable(SearchTbl_TEXT? search){
 
        IQueryable<Tbl_TEXT> data= this.Tbl_TEXT ;
        if(search == null){
            return data.AsAsyncEnumerable();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_TEXT> =search.TransformToOrder(data);
        if(search.PageSize>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    }
*/
    public Task<long> Tbl_TEXTCount( SearchTbl_TEXT? search){
     
        IQueryable<Tbl_TEXT> data= this.Tbl_TEXT ;
        if(search != null){
            data = search.TransformToWhere(data);        
        }        
        return data.LongCountAsync();
    }
    

    //oneKey
    
    public  async Task<bool> Tbl_TEXTDelete(int id){

        var item = await Tbl_TEXTGetSingle(id);
        if(item == null)
            return false;
       this.Tbl_TEXT.Remove(item);
        await this.SaveChangesAsync();
        return true; 
    }
    public  async Task<bool> Tbl_TEXTModify(Tbl_TEXT val ){
        //do the attach
        /* var item = await Tbl_TEXTGetSingle(val.??ID?????);
        if(item == null)
            return false;
        item.CopyFrom(val);        
        await this.SaveChangesAsync();
        */
        this.Tbl_TEXT.Update(val);
        await this.SaveChangesAsync();
        return true; 
    }
    



    public Task<Tbl_TEXT?> Tbl_TEXTGetSingle(int id){
        return this.Tbl_TEXT.FirstOrDefaultAsync(e => e.ID == id);
    }
    

    public IAsyncEnumerable<Tbl_TEXT> Tbl_TEXTFind_AsyncEnumerable(SearchTbl_TEXT? search){
        IQueryable<Tbl_TEXT> data= this.Tbl_TEXT ;
        if(search == null){
                        return data.OrderByDescending(e => e.ID).AsAsyncEnumerable();
                    }
        data = search.TransformToWhere(data); 
        
        IQueryable<Tbl_TEXT> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret=ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    
    }

        public async Task<Tbl_TIME[]> Tbl_TIMEFind_Array( SearchTbl_TIME? search){
 
        IQueryable<Tbl_TIME> data= this.Tbl_TIME ;
        if(search == null){
            return await data.ToArrayAsync();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_TIME> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return await ret.ToArrayAsync();
    }

    public  IAsyncEnumerable<Tbl_TIME> Tbl_TIMEGetAll(){
        return this.Tbl_TIMEFind_AsyncEnumerable(null);
    }
        public async  Task<Tbl_TIME> Tbl_TIMESave(Tbl_TIME val){

        var data= await Tbl_TIMESaveMultiple(val);
        if(data == null)
            return null;

        return data[0];
                
    }
    public async  Task<Tbl_TIME[]> Tbl_TIMESaveMultiple(params Tbl_TIME[] values){

        if(values == null)
            return null;
        if(values.Length == 0)
            return values;
        foreach(var value in values){
            this.Tbl_TIME.Add(value);
        }
        await SaveChangesAsync();
        return values;

                
    }

    public  IAsyncEnumerable<Tbl_TIME> Tbl_TIMESimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_TIMEColumns colToSearch, string value){
        
 var search = SearchTbl_TIME.FromSearch(sc,colToSearch,value);
 /*
        var orderBy = new GeneratorFromDB.OrderBy<eTbl_TIMEColumns>();
                    orderBy.FieldName = eTbl_TIMEColumns.ID;
                orderBy.Asc = false;
        search.OrderBys = new[] { orderBy };
        search.PageNumber = 1;
        search.PageSize = int.MaxValue-1;
        var s = new GeneratorFromDB.SearchField<eTbl_TIMEColumns>();
        s.Criteria = sc;
        s.FieldName = colToSearch;
        s.Value = value;
        search.SearchFields = new[] { s };
        */
        var data = this.Tbl_TIMEFind_AsyncEnumerable(search);
        return data;
    }   
/*
    public IAsyncEnumerable<Tbl_TIME> Tbl_TIMEFind_AsyncEnumerable(SearchTbl_TIME? search){
 
        IQueryable<Tbl_TIME> data= this.Tbl_TIME ;
        if(search == null){
            return data.AsAsyncEnumerable();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_TIME> =search.TransformToOrder(data);
        if(search.PageSize>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    }
*/
    public Task<long> Tbl_TIMECount( SearchTbl_TIME? search){
     
        IQueryable<Tbl_TIME> data= this.Tbl_TIME ;
        if(search != null){
            data = search.TransformToWhere(data);        
        }        
        return data.LongCountAsync();
    }
    

    //oneKey
    
    public  async Task<bool> Tbl_TIMEDelete(int id){

        var item = await Tbl_TIMEGetSingle(id);
        if(item == null)
            return false;
       this.Tbl_TIME.Remove(item);
        await this.SaveChangesAsync();
        return true; 
    }
    public  async Task<bool> Tbl_TIMEModify(Tbl_TIME val ){
        //do the attach
        /* var item = await Tbl_TIMEGetSingle(val.??ID?????);
        if(item == null)
            return false;
        item.CopyFrom(val);        
        await this.SaveChangesAsync();
        */
        this.Tbl_TIME.Update(val);
        await this.SaveChangesAsync();
        return true; 
    }
    



    public Task<Tbl_TIME?> Tbl_TIMEGetSingle(int id){
        return this.Tbl_TIME.FirstOrDefaultAsync(e => e.ID == id);
    }
    

    public IAsyncEnumerable<Tbl_TIME> Tbl_TIMEFind_AsyncEnumerable(SearchTbl_TIME? search){
        IQueryable<Tbl_TIME> data= this.Tbl_TIME ;
        if(search == null){
                        return data.OrderByDescending(e => e.ID).AsAsyncEnumerable();
                    }
        data = search.TransformToWhere(data); 
        
        IQueryable<Tbl_TIME> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret=ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    
    }

        public async Task<Tbl_TINYINT[]> Tbl_TINYINTFind_Array( SearchTbl_TINYINT? search){
 
        IQueryable<Tbl_TINYINT> data= this.Tbl_TINYINT ;
        if(search == null){
            return await data.ToArrayAsync();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_TINYINT> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return await ret.ToArrayAsync();
    }

    public  IAsyncEnumerable<Tbl_TINYINT> Tbl_TINYINTGetAll(){
        return this.Tbl_TINYINTFind_AsyncEnumerable(null);
    }
        public async  Task<Tbl_TINYINT> Tbl_TINYINTSave(Tbl_TINYINT val){

        var data= await Tbl_TINYINTSaveMultiple(val);
        if(data == null)
            return null;

        return data[0];
                
    }
    public async  Task<Tbl_TINYINT[]> Tbl_TINYINTSaveMultiple(params Tbl_TINYINT[] values){

        if(values == null)
            return null;
        if(values.Length == 0)
            return values;
        foreach(var value in values){
            this.Tbl_TINYINT.Add(value);
        }
        await SaveChangesAsync();
        return values;

                
    }

    public  IAsyncEnumerable<Tbl_TINYINT> Tbl_TINYINTSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_TINYINTColumns colToSearch, string value){
        
 var search = SearchTbl_TINYINT.FromSearch(sc,colToSearch,value);
 /*
        var orderBy = new GeneratorFromDB.OrderBy<eTbl_TINYINTColumns>();
                    orderBy.FieldName = eTbl_TINYINTColumns.ID;
                orderBy.Asc = false;
        search.OrderBys = new[] { orderBy };
        search.PageNumber = 1;
        search.PageSize = int.MaxValue-1;
        var s = new GeneratorFromDB.SearchField<eTbl_TINYINTColumns>();
        s.Criteria = sc;
        s.FieldName = colToSearch;
        s.Value = value;
        search.SearchFields = new[] { s };
        */
        var data = this.Tbl_TINYINTFind_AsyncEnumerable(search);
        return data;
    }   
/*
    public IAsyncEnumerable<Tbl_TINYINT> Tbl_TINYINTFind_AsyncEnumerable(SearchTbl_TINYINT? search){
 
        IQueryable<Tbl_TINYINT> data= this.Tbl_TINYINT ;
        if(search == null){
            return data.AsAsyncEnumerable();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_TINYINT> =search.TransformToOrder(data);
        if(search.PageSize>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    }
*/
    public Task<long> Tbl_TINYINTCount( SearchTbl_TINYINT? search){
     
        IQueryable<Tbl_TINYINT> data= this.Tbl_TINYINT ;
        if(search != null){
            data = search.TransformToWhere(data);        
        }        
        return data.LongCountAsync();
    }
    

    //oneKey
    
    public  async Task<bool> Tbl_TINYINTDelete(int id){

        var item = await Tbl_TINYINTGetSingle(id);
        if(item == null)
            return false;
       this.Tbl_TINYINT.Remove(item);
        await this.SaveChangesAsync();
        return true; 
    }
    public  async Task<bool> Tbl_TINYINTModify(Tbl_TINYINT val ){
        //do the attach
        /* var item = await Tbl_TINYINTGetSingle(val.??ID?????);
        if(item == null)
            return false;
        item.CopyFrom(val);        
        await this.SaveChangesAsync();
        */
        this.Tbl_TINYINT.Update(val);
        await this.SaveChangesAsync();
        return true; 
    }
    



    public Task<Tbl_TINYINT?> Tbl_TINYINTGetSingle(int id){
        return this.Tbl_TINYINT.FirstOrDefaultAsync(e => e.ID == id);
    }
    

    public IAsyncEnumerable<Tbl_TINYINT> Tbl_TINYINTFind_AsyncEnumerable(SearchTbl_TINYINT? search){
        IQueryable<Tbl_TINYINT> data= this.Tbl_TINYINT ;
        if(search == null){
                        return data.OrderByDescending(e => e.ID).AsAsyncEnumerable();
                    }
        data = search.TransformToWhere(data); 
        
        IQueryable<Tbl_TINYINT> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret=ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    
    }

        public async Task<Tbl_UNIQUEIDENTIFIER[]> Tbl_UNIQUEIDENTIFIERFind_Array( SearchTbl_UNIQUEIDENTIFIER? search){
 
        IQueryable<Tbl_UNIQUEIDENTIFIER> data= this.Tbl_UNIQUEIDENTIFIER ;
        if(search == null){
            return await data.ToArrayAsync();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_UNIQUEIDENTIFIER> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return await ret.ToArrayAsync();
    }

    public  IAsyncEnumerable<Tbl_UNIQUEIDENTIFIER> Tbl_UNIQUEIDENTIFIERGetAll(){
        return this.Tbl_UNIQUEIDENTIFIERFind_AsyncEnumerable(null);
    }
        public async  Task<Tbl_UNIQUEIDENTIFIER> Tbl_UNIQUEIDENTIFIERSave(Tbl_UNIQUEIDENTIFIER val){

        var data= await Tbl_UNIQUEIDENTIFIERSaveMultiple(val);
        if(data == null)
            return null;

        return data[0];
                
    }
    public async  Task<Tbl_UNIQUEIDENTIFIER[]> Tbl_UNIQUEIDENTIFIERSaveMultiple(params Tbl_UNIQUEIDENTIFIER[] values){

        if(values == null)
            return null;
        if(values.Length == 0)
            return values;
        foreach(var value in values){
            this.Tbl_UNIQUEIDENTIFIER.Add(value);
        }
        await SaveChangesAsync();
        return values;

                
    }

    public  IAsyncEnumerable<Tbl_UNIQUEIDENTIFIER> Tbl_UNIQUEIDENTIFIERSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_UNIQUEIDENTIFIERColumns colToSearch, string value){
        
 var search = SearchTbl_UNIQUEIDENTIFIER.FromSearch(sc,colToSearch,value);
 /*
        var orderBy = new GeneratorFromDB.OrderBy<eTbl_UNIQUEIDENTIFIERColumns>();
                    orderBy.FieldName = eTbl_UNIQUEIDENTIFIERColumns.ID;
                orderBy.Asc = false;
        search.OrderBys = new[] { orderBy };
        search.PageNumber = 1;
        search.PageSize = int.MaxValue-1;
        var s = new GeneratorFromDB.SearchField<eTbl_UNIQUEIDENTIFIERColumns>();
        s.Criteria = sc;
        s.FieldName = colToSearch;
        s.Value = value;
        search.SearchFields = new[] { s };
        */
        var data = this.Tbl_UNIQUEIDENTIFIERFind_AsyncEnumerable(search);
        return data;
    }   
/*
    public IAsyncEnumerable<Tbl_UNIQUEIDENTIFIER> Tbl_UNIQUEIDENTIFIERFind_AsyncEnumerable(SearchTbl_UNIQUEIDENTIFIER? search){
 
        IQueryable<Tbl_UNIQUEIDENTIFIER> data= this.Tbl_UNIQUEIDENTIFIER ;
        if(search == null){
            return data.AsAsyncEnumerable();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_UNIQUEIDENTIFIER> =search.TransformToOrder(data);
        if(search.PageSize>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    }
*/
    public Task<long> Tbl_UNIQUEIDENTIFIERCount( SearchTbl_UNIQUEIDENTIFIER? search){
     
        IQueryable<Tbl_UNIQUEIDENTIFIER> data= this.Tbl_UNIQUEIDENTIFIER ;
        if(search != null){
            data = search.TransformToWhere(data);        
        }        
        return data.LongCountAsync();
    }
    

    //oneKey
    
    public  async Task<bool> Tbl_UNIQUEIDENTIFIERDelete(int id){

        var item = await Tbl_UNIQUEIDENTIFIERGetSingle(id);
        if(item == null)
            return false;
       this.Tbl_UNIQUEIDENTIFIER.Remove(item);
        await this.SaveChangesAsync();
        return true; 
    }
    public  async Task<bool> Tbl_UNIQUEIDENTIFIERModify(Tbl_UNIQUEIDENTIFIER val ){
        //do the attach
        /* var item = await Tbl_UNIQUEIDENTIFIERGetSingle(val.??ID?????);
        if(item == null)
            return false;
        item.CopyFrom(val);        
        await this.SaveChangesAsync();
        */
        this.Tbl_UNIQUEIDENTIFIER.Update(val);
        await this.SaveChangesAsync();
        return true; 
    }
    



    public Task<Tbl_UNIQUEIDENTIFIER?> Tbl_UNIQUEIDENTIFIERGetSingle(int id){
        return this.Tbl_UNIQUEIDENTIFIER.FirstOrDefaultAsync(e => e.ID == id);
    }
    

    public IAsyncEnumerable<Tbl_UNIQUEIDENTIFIER> Tbl_UNIQUEIDENTIFIERFind_AsyncEnumerable(SearchTbl_UNIQUEIDENTIFIER? search){
        IQueryable<Tbl_UNIQUEIDENTIFIER> data= this.Tbl_UNIQUEIDENTIFIER ;
        if(search == null){
                        return data.OrderByDescending(e => e.ID).AsAsyncEnumerable();
                    }
        data = search.TransformToWhere(data); 
        
        IQueryable<Tbl_UNIQUEIDENTIFIER> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret=ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    
    }

        public async Task<Tbl_VARBINARY[]> Tbl_VARBINARYFind_Array( SearchTbl_VARBINARY? search){
 
        IQueryable<Tbl_VARBINARY> data= this.Tbl_VARBINARY ;
        if(search == null){
            return await data.ToArrayAsync();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_VARBINARY> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return await ret.ToArrayAsync();
    }

    public  IAsyncEnumerable<Tbl_VARBINARY> Tbl_VARBINARYGetAll(){
        return this.Tbl_VARBINARYFind_AsyncEnumerable(null);
    }
        public async  Task<Tbl_VARBINARY> Tbl_VARBINARYSave(Tbl_VARBINARY val){

        var data= await Tbl_VARBINARYSaveMultiple(val);
        if(data == null)
            return null;

        return data[0];
                
    }
    public async  Task<Tbl_VARBINARY[]> Tbl_VARBINARYSaveMultiple(params Tbl_VARBINARY[] values){

        if(values == null)
            return null;
        if(values.Length == 0)
            return values;
        foreach(var value in values){
            this.Tbl_VARBINARY.Add(value);
        }
        await SaveChangesAsync();
        return values;

                
    }

    public  IAsyncEnumerable<Tbl_VARBINARY> Tbl_VARBINARYSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_VARBINARYColumns colToSearch, string value){
        
 var search = SearchTbl_VARBINARY.FromSearch(sc,colToSearch,value);
 /*
        var orderBy = new GeneratorFromDB.OrderBy<eTbl_VARBINARYColumns>();
                    orderBy.FieldName = eTbl_VARBINARYColumns.ID;
                orderBy.Asc = false;
        search.OrderBys = new[] { orderBy };
        search.PageNumber = 1;
        search.PageSize = int.MaxValue-1;
        var s = new GeneratorFromDB.SearchField<eTbl_VARBINARYColumns>();
        s.Criteria = sc;
        s.FieldName = colToSearch;
        s.Value = value;
        search.SearchFields = new[] { s };
        */
        var data = this.Tbl_VARBINARYFind_AsyncEnumerable(search);
        return data;
    }   
/*
    public IAsyncEnumerable<Tbl_VARBINARY> Tbl_VARBINARYFind_AsyncEnumerable(SearchTbl_VARBINARY? search){
 
        IQueryable<Tbl_VARBINARY> data= this.Tbl_VARBINARY ;
        if(search == null){
            return data.AsAsyncEnumerable();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_VARBINARY> =search.TransformToOrder(data);
        if(search.PageSize>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    }
*/
    public Task<long> Tbl_VARBINARYCount( SearchTbl_VARBINARY? search){
     
        IQueryable<Tbl_VARBINARY> data= this.Tbl_VARBINARY ;
        if(search != null){
            data = search.TransformToWhere(data);        
        }        
        return data.LongCountAsync();
    }
    

    //oneKey
    
    public  async Task<bool> Tbl_VARBINARYDelete(int id){

        var item = await Tbl_VARBINARYGetSingle(id);
        if(item == null)
            return false;
       this.Tbl_VARBINARY.Remove(item);
        await this.SaveChangesAsync();
        return true; 
    }
    public  async Task<bool> Tbl_VARBINARYModify(Tbl_VARBINARY val ){
        //do the attach
        /* var item = await Tbl_VARBINARYGetSingle(val.??ID?????);
        if(item == null)
            return false;
        item.CopyFrom(val);        
        await this.SaveChangesAsync();
        */
        this.Tbl_VARBINARY.Update(val);
        await this.SaveChangesAsync();
        return true; 
    }
    



    public Task<Tbl_VARBINARY?> Tbl_VARBINARYGetSingle(int id){
        return this.Tbl_VARBINARY.FirstOrDefaultAsync(e => e.ID == id);
    }
    

    public IAsyncEnumerable<Tbl_VARBINARY> Tbl_VARBINARYFind_AsyncEnumerable(SearchTbl_VARBINARY? search){
        IQueryable<Tbl_VARBINARY> data= this.Tbl_VARBINARY ;
        if(search == null){
                        return data.OrderByDescending(e => e.ID).AsAsyncEnumerable();
                    }
        data = search.TransformToWhere(data); 
        
        IQueryable<Tbl_VARBINARY> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret=ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    
    }

        public async Task<Tbl_VARCHAR[]> Tbl_VARCHARFind_Array( SearchTbl_VARCHAR? search){
 
        IQueryable<Tbl_VARCHAR> data= this.Tbl_VARCHAR ;
        if(search == null){
            return await data.ToArrayAsync();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_VARCHAR> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return await ret.ToArrayAsync();
    }

    public  IAsyncEnumerable<Tbl_VARCHAR> Tbl_VARCHARGetAll(){
        return this.Tbl_VARCHARFind_AsyncEnumerable(null);
    }
        public async  Task<Tbl_VARCHAR> Tbl_VARCHARSave(Tbl_VARCHAR val){

        var data= await Tbl_VARCHARSaveMultiple(val);
        if(data == null)
            return null;

        return data[0];
                
    }
    public async  Task<Tbl_VARCHAR[]> Tbl_VARCHARSaveMultiple(params Tbl_VARCHAR[] values){

        if(values == null)
            return null;
        if(values.Length == 0)
            return values;
        foreach(var value in values){
            this.Tbl_VARCHAR.Add(value);
        }
        await SaveChangesAsync();
        return values;

                
    }

    public  IAsyncEnumerable<Tbl_VARCHAR> Tbl_VARCHARSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_VARCHARColumns colToSearch, string value){
        
 var search = SearchTbl_VARCHAR.FromSearch(sc,colToSearch,value);
 /*
        var orderBy = new GeneratorFromDB.OrderBy<eTbl_VARCHARColumns>();
                    orderBy.FieldName = eTbl_VARCHARColumns.ID;
                orderBy.Asc = false;
        search.OrderBys = new[] { orderBy };
        search.PageNumber = 1;
        search.PageSize = int.MaxValue-1;
        var s = new GeneratorFromDB.SearchField<eTbl_VARCHARColumns>();
        s.Criteria = sc;
        s.FieldName = colToSearch;
        s.Value = value;
        search.SearchFields = new[] { s };
        */
        var data = this.Tbl_VARCHARFind_AsyncEnumerable(search);
        return data;
    }   
/*
    public IAsyncEnumerable<Tbl_VARCHAR> Tbl_VARCHARFind_AsyncEnumerable(SearchTbl_VARCHAR? search){
 
        IQueryable<Tbl_VARCHAR> data= this.Tbl_VARCHAR ;
        if(search == null){
            return data.AsAsyncEnumerable();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_VARCHAR> =search.TransformToOrder(data);
        if(search.PageSize>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    }
*/
    public Task<long> Tbl_VARCHARCount( SearchTbl_VARCHAR? search){
     
        IQueryable<Tbl_VARCHAR> data= this.Tbl_VARCHAR ;
        if(search != null){
            data = search.TransformToWhere(data);        
        }        
        return data.LongCountAsync();
    }
    

    //oneKey
    
    public  async Task<bool> Tbl_VARCHARDelete(int id){

        var item = await Tbl_VARCHARGetSingle(id);
        if(item == null)
            return false;
       this.Tbl_VARCHAR.Remove(item);
        await this.SaveChangesAsync();
        return true; 
    }
    public  async Task<bool> Tbl_VARCHARModify(Tbl_VARCHAR val ){
        //do the attach
        /* var item = await Tbl_VARCHARGetSingle(val.??ID?????);
        if(item == null)
            return false;
        item.CopyFrom(val);        
        await this.SaveChangesAsync();
        */
        this.Tbl_VARCHAR.Update(val);
        await this.SaveChangesAsync();
        return true; 
    }
    



    public Task<Tbl_VARCHAR?> Tbl_VARCHARGetSingle(int id){
        return this.Tbl_VARCHAR.FirstOrDefaultAsync(e => e.ID == id);
    }
    

    public IAsyncEnumerable<Tbl_VARCHAR> Tbl_VARCHARFind_AsyncEnumerable(SearchTbl_VARCHAR? search){
        IQueryable<Tbl_VARCHAR> data= this.Tbl_VARCHAR ;
        if(search == null){
                        return data.OrderByDescending(e => e.ID).AsAsyncEnumerable();
                    }
        data = search.TransformToWhere(data); 
        
        IQueryable<Tbl_VARCHAR> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret=ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    
    }

        public async Task<Tbl_XML[]> Tbl_XMLFind_Array( SearchTbl_XML? search){
 
        IQueryable<Tbl_XML> data= this.Tbl_XML ;
        if(search == null){
            return await data.ToArrayAsync();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_XML> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return await ret.ToArrayAsync();
    }

    public  IAsyncEnumerable<Tbl_XML> Tbl_XMLGetAll(){
        return this.Tbl_XMLFind_AsyncEnumerable(null);
    }
        public async  Task<Tbl_XML> Tbl_XMLSave(Tbl_XML val){

        var data= await Tbl_XMLSaveMultiple(val);
        if(data == null)
            return null;

        return data[0];
                
    }
    public async  Task<Tbl_XML[]> Tbl_XMLSaveMultiple(params Tbl_XML[] values){

        if(values == null)
            return null;
        if(values.Length == 0)
            return values;
        foreach(var value in values){
            this.Tbl_XML.Add(value);
        }
        await SaveChangesAsync();
        return values;

                
    }

    public  IAsyncEnumerable<Tbl_XML> Tbl_XMLSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_XMLColumns colToSearch, string value){
        
 var search = SearchTbl_XML.FromSearch(sc,colToSearch,value);
 /*
        var orderBy = new GeneratorFromDB.OrderBy<eTbl_XMLColumns>();
                    orderBy.FieldName = eTbl_XMLColumns.ID;
                orderBy.Asc = false;
        search.OrderBys = new[] { orderBy };
        search.PageNumber = 1;
        search.PageSize = int.MaxValue-1;
        var s = new GeneratorFromDB.SearchField<eTbl_XMLColumns>();
        s.Criteria = sc;
        s.FieldName = colToSearch;
        s.Value = value;
        search.SearchFields = new[] { s };
        */
        var data = this.Tbl_XMLFind_AsyncEnumerable(search);
        return data;
    }   
/*
    public IAsyncEnumerable<Tbl_XML> Tbl_XMLFind_AsyncEnumerable(SearchTbl_XML? search){
 
        IQueryable<Tbl_XML> data= this.Tbl_XML ;
        if(search == null){
            return data.AsAsyncEnumerable();
        }
        data = search.TransformToWhere(data);        
        IQueryable<Tbl_XML> =search.TransformToOrder(data);
        if(search.PageSize>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    }
*/
    public Task<long> Tbl_XMLCount( SearchTbl_XML? search){
     
        IQueryable<Tbl_XML> data= this.Tbl_XML ;
        if(search != null){
            data = search.TransformToWhere(data);        
        }        
        return data.LongCountAsync();
    }
    

    //oneKey
    
    public  async Task<bool> Tbl_XMLDelete(int id){

        var item = await Tbl_XMLGetSingle(id);
        if(item == null)
            return false;
       this.Tbl_XML.Remove(item);
        await this.SaveChangesAsync();
        return true; 
    }
    public  async Task<bool> Tbl_XMLModify(Tbl_XML val ){
        //do the attach
        /* var item = await Tbl_XMLGetSingle(val.??ID?????);
        if(item == null)
            return false;
        item.CopyFrom(val);        
        await this.SaveChangesAsync();
        */
        this.Tbl_XML.Update(val);
        await this.SaveChangesAsync();
        return true; 
    }
    



    public Task<Tbl_XML?> Tbl_XMLGetSingle(int id){
        return this.Tbl_XML.FirstOrDefaultAsync(e => e.ID == id);
    }
    

    public IAsyncEnumerable<Tbl_XML> Tbl_XMLFind_AsyncEnumerable(SearchTbl_XML? search){
        IQueryable<Tbl_XML> data= this.Tbl_XML ;
        if(search == null){
                        return data.OrderByDescending(e => e.ID).AsAsyncEnumerable();
                    }
        data = search.TransformToWhere(data); 
        
        IQueryable<Tbl_XML> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret=ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    
    }

}
public interface I_InsertDataSimpleTablesMultipleData{
        Task<Tbl_BIGINT_Table?> InsertTbl_BIGINT(Tbl_BIGINT_Table value);
        Task<Tbl_BIGINT_Table[]> InsertTbl_BIGINTs(params Tbl_BIGINT_Table[] values);

        Task<Tbl_BINARY_Table?> InsertTbl_BINARY(Tbl_BINARY_Table value);
        Task<Tbl_BINARY_Table[]> InsertTbl_BINARYs(params Tbl_BINARY_Table[] values);

        Task<Tbl_BIT_Table?> InsertTbl_BIT(Tbl_BIT_Table value);
        Task<Tbl_BIT_Table[]> InsertTbl_BITs(params Tbl_BIT_Table[] values);

        Task<Tbl_CHAR_Table?> InsertTbl_CHAR(Tbl_CHAR_Table value);
        Task<Tbl_CHAR_Table[]> InsertTbl_CHARs(params Tbl_CHAR_Table[] values);

        Task<Tbl_DATE_Table?> InsertTbl_DATE(Tbl_DATE_Table value);
        Task<Tbl_DATE_Table[]> InsertTbl_DATEs(params Tbl_DATE_Table[] values);

        Task<Tbl_DATETIME_Table?> InsertTbl_DATETIME(Tbl_DATETIME_Table value);
        Task<Tbl_DATETIME_Table[]> InsertTbl_DATETIMEs(params Tbl_DATETIME_Table[] values);

        Task<Tbl_DATETIME2_Table?> InsertTbl_DATETIME2(Tbl_DATETIME2_Table value);
        Task<Tbl_DATETIME2_Table[]> InsertTbl_DATETIME2s(params Tbl_DATETIME2_Table[] values);

        Task<Tbl_DATETIMEOFFSET_Table?> InsertTbl_DATETIMEOFFSET(Tbl_DATETIMEOFFSET_Table value);
        Task<Tbl_DATETIMEOFFSET_Table[]> InsertTbl_DATETIMEOFFSETs(params Tbl_DATETIMEOFFSET_Table[] values);

        Task<Tbl_DECIMAL_Table?> InsertTbl_DECIMAL(Tbl_DECIMAL_Table value);
        Task<Tbl_DECIMAL_Table[]> InsertTbl_DECIMALs(params Tbl_DECIMAL_Table[] values);

        Task<Tbl_FLOAT_Table?> InsertTbl_FLOAT(Tbl_FLOAT_Table value);
        Task<Tbl_FLOAT_Table[]> InsertTbl_FLOATs(params Tbl_FLOAT_Table[] values);

        Task<Tbl_GEOGRAPHY_Table?> InsertTbl_GEOGRAPHY(Tbl_GEOGRAPHY_Table value);
        Task<Tbl_GEOGRAPHY_Table[]> InsertTbl_GEOGRAPHYs(params Tbl_GEOGRAPHY_Table[] values);

        Task<Tbl_GEOMETRY_Table?> InsertTbl_GEOMETRY(Tbl_GEOMETRY_Table value);
        Task<Tbl_GEOMETRY_Table[]> InsertTbl_GEOMETRYs(params Tbl_GEOMETRY_Table[] values);

        Task<Tbl_HIERARCHYID_Table?> InsertTbl_HIERARCHYID(Tbl_HIERARCHYID_Table value);
        Task<Tbl_HIERARCHYID_Table[]> InsertTbl_HIERARCHYIDs(params Tbl_HIERARCHYID_Table[] values);

        Task<Tbl_IMAGE_Table?> InsertTbl_IMAGE(Tbl_IMAGE_Table value);
        Task<Tbl_IMAGE_Table[]> InsertTbl_IMAGEs(params Tbl_IMAGE_Table[] values);

        Task<Tbl_INT_Table?> InsertTbl_INT(Tbl_INT_Table value);
        Task<Tbl_INT_Table[]> InsertTbl_INTs(params Tbl_INT_Table[] values);

        Task<Tbl_JSON_Table?> InsertTbl_JSON(Tbl_JSON_Table value);
        Task<Tbl_JSON_Table[]> InsertTbl_JSONs(params Tbl_JSON_Table[] values);

        Task<Tbl_MONEY_Table?> InsertTbl_MONEY(Tbl_MONEY_Table value);
        Task<Tbl_MONEY_Table[]> InsertTbl_MONEYs(params Tbl_MONEY_Table[] values);

        Task<Tbl_NCHAR_Table?> InsertTbl_NCHAR(Tbl_NCHAR_Table value);
        Task<Tbl_NCHAR_Table[]> InsertTbl_NCHARs(params Tbl_NCHAR_Table[] values);

        Task<Tbl_NTEXT_Table?> InsertTbl_NTEXT(Tbl_NTEXT_Table value);
        Task<Tbl_NTEXT_Table[]> InsertTbl_NTEXTs(params Tbl_NTEXT_Table[] values);

        Task<Tbl_NVARCHAR_Table?> InsertTbl_NVARCHAR(Tbl_NVARCHAR_Table value);
        Task<Tbl_NVARCHAR_Table[]> InsertTbl_NVARCHARs(params Tbl_NVARCHAR_Table[] values);

        Task<Tbl_REAL_Table?> InsertTbl_REAL(Tbl_REAL_Table value);
        Task<Tbl_REAL_Table[]> InsertTbl_REALs(params Tbl_REAL_Table[] values);

        Task<Tbl_SMALLDATETIME_Table?> InsertTbl_SMALLDATETIME(Tbl_SMALLDATETIME_Table value);
        Task<Tbl_SMALLDATETIME_Table[]> InsertTbl_SMALLDATETIMEs(params Tbl_SMALLDATETIME_Table[] values);

        Task<Tbl_SMALLINT_Table?> InsertTbl_SMALLINT(Tbl_SMALLINT_Table value);
        Task<Tbl_SMALLINT_Table[]> InsertTbl_SMALLINTs(params Tbl_SMALLINT_Table[] values);

        Task<Tbl_TEXT_Table?> InsertTbl_TEXT(Tbl_TEXT_Table value);
        Task<Tbl_TEXT_Table[]> InsertTbl_TEXTs(params Tbl_TEXT_Table[] values);

        Task<Tbl_TIME_Table?> InsertTbl_TIME(Tbl_TIME_Table value);
        Task<Tbl_TIME_Table[]> InsertTbl_TIMEs(params Tbl_TIME_Table[] values);

        Task<Tbl_TINYINT_Table?> InsertTbl_TINYINT(Tbl_TINYINT_Table value);
        Task<Tbl_TINYINT_Table[]> InsertTbl_TINYINTs(params Tbl_TINYINT_Table[] values);

        Task<Tbl_UNIQUEIDENTIFIER_Table?> InsertTbl_UNIQUEIDENTIFIER(Tbl_UNIQUEIDENTIFIER_Table value);
        Task<Tbl_UNIQUEIDENTIFIER_Table[]> InsertTbl_UNIQUEIDENTIFIERs(params Tbl_UNIQUEIDENTIFIER_Table[] values);

        Task<Tbl_VARBINARY_Table?> InsertTbl_VARBINARY(Tbl_VARBINARY_Table value);
        Task<Tbl_VARBINARY_Table[]> InsertTbl_VARBINARYs(params Tbl_VARBINARY_Table[] values);

        Task<Tbl_VARCHAR_Table?> InsertTbl_VARCHAR(Tbl_VARCHAR_Table value);
        Task<Tbl_VARCHAR_Table[]> InsertTbl_VARCHARs(params Tbl_VARCHAR_Table[] values);

        Task<Tbl_XML_Table?> InsertTbl_XML(Tbl_XML_Table value);
        Task<Tbl_XML_Table[]> InsertTbl_XMLs(params Tbl_XML_Table[] values);

    }

public class InsertDataSimpleTablesMultipleData: I_InsertDataSimpleTablesMultipleData{

        private SimpleTablesMultipleData _context;
        public InsertDataSimpleTablesMultipleData(SimpleTablesMultipleData context){
            _context=context;
        }
        public async Task<Tbl_BIGINT_Table?> InsertTbl_BIGINT(Tbl_BIGINT_Table value){
            if (value == null)
                return null;

            Tbl_BIGINT val = (Tbl_BIGINT)value!;
            _context.Tbl_BIGINT.Add(val);
            await _context.SaveChangesAsync();
            return (Tbl_BIGINT_Table)val! ;

        }
        public async Task<Tbl_BIGINT_Table[]> InsertTbl_BIGINTs(params Tbl_BIGINT_Table[] values){
        
        if (values == null || values.Length == 0)
            return new Tbl_BIGINT_Table[0];

        Tbl_BIGINT[] vals = values.Select(it=>(Tbl_BIGINT)it!).ToArray();
        _context.Tbl_BIGINT.AddRange(vals);
        await _context.SaveChangesAsync();
        return vals.Select(it => (Tbl_BIGINT_Table)it!  ).ToArray();
    }
    
        public async Task<Tbl_BINARY_Table?> InsertTbl_BINARY(Tbl_BINARY_Table value){
            if (value == null)
                return null;

            Tbl_BINARY val = (Tbl_BINARY)value!;
            _context.Tbl_BINARY.Add(val);
            await _context.SaveChangesAsync();
            return (Tbl_BINARY_Table)val! ;

        }
        public async Task<Tbl_BINARY_Table[]> InsertTbl_BINARYs(params Tbl_BINARY_Table[] values){
        
        if (values == null || values.Length == 0)
            return new Tbl_BINARY_Table[0];

        Tbl_BINARY[] vals = values.Select(it=>(Tbl_BINARY)it!).ToArray();
        _context.Tbl_BINARY.AddRange(vals);
        await _context.SaveChangesAsync();
        return vals.Select(it => (Tbl_BINARY_Table)it!  ).ToArray();
    }
    
        public async Task<Tbl_BIT_Table?> InsertTbl_BIT(Tbl_BIT_Table value){
            if (value == null)
                return null;

            Tbl_BIT val = (Tbl_BIT)value!;
            _context.Tbl_BIT.Add(val);
            await _context.SaveChangesAsync();
            return (Tbl_BIT_Table)val! ;

        }
        public async Task<Tbl_BIT_Table[]> InsertTbl_BITs(params Tbl_BIT_Table[] values){
        
        if (values == null || values.Length == 0)
            return new Tbl_BIT_Table[0];

        Tbl_BIT[] vals = values.Select(it=>(Tbl_BIT)it!).ToArray();
        _context.Tbl_BIT.AddRange(vals);
        await _context.SaveChangesAsync();
        return vals.Select(it => (Tbl_BIT_Table)it!  ).ToArray();
    }
    
        public async Task<Tbl_CHAR_Table?> InsertTbl_CHAR(Tbl_CHAR_Table value){
            if (value == null)
                return null;

            Tbl_CHAR val = (Tbl_CHAR)value!;
            _context.Tbl_CHAR.Add(val);
            await _context.SaveChangesAsync();
            return (Tbl_CHAR_Table)val! ;

        }
        public async Task<Tbl_CHAR_Table[]> InsertTbl_CHARs(params Tbl_CHAR_Table[] values){
        
        if (values == null || values.Length == 0)
            return new Tbl_CHAR_Table[0];

        Tbl_CHAR[] vals = values.Select(it=>(Tbl_CHAR)it!).ToArray();
        _context.Tbl_CHAR.AddRange(vals);
        await _context.SaveChangesAsync();
        return vals.Select(it => (Tbl_CHAR_Table)it!  ).ToArray();
    }
    
        public async Task<Tbl_DATE_Table?> InsertTbl_DATE(Tbl_DATE_Table value){
            if (value == null)
                return null;

            Tbl_DATE val = (Tbl_DATE)value!;
            _context.Tbl_DATE.Add(val);
            await _context.SaveChangesAsync();
            return (Tbl_DATE_Table)val! ;

        }
        public async Task<Tbl_DATE_Table[]> InsertTbl_DATEs(params Tbl_DATE_Table[] values){
        
        if (values == null || values.Length == 0)
            return new Tbl_DATE_Table[0];

        Tbl_DATE[] vals = values.Select(it=>(Tbl_DATE)it!).ToArray();
        _context.Tbl_DATE.AddRange(vals);
        await _context.SaveChangesAsync();
        return vals.Select(it => (Tbl_DATE_Table)it!  ).ToArray();
    }
    
        public async Task<Tbl_DATETIME_Table?> InsertTbl_DATETIME(Tbl_DATETIME_Table value){
            if (value == null)
                return null;

            Tbl_DATETIME val = (Tbl_DATETIME)value!;
            _context.Tbl_DATETIME.Add(val);
            await _context.SaveChangesAsync();
            return (Tbl_DATETIME_Table)val! ;

        }
        public async Task<Tbl_DATETIME_Table[]> InsertTbl_DATETIMEs(params Tbl_DATETIME_Table[] values){
        
        if (values == null || values.Length == 0)
            return new Tbl_DATETIME_Table[0];

        Tbl_DATETIME[] vals = values.Select(it=>(Tbl_DATETIME)it!).ToArray();
        _context.Tbl_DATETIME.AddRange(vals);
        await _context.SaveChangesAsync();
        return vals.Select(it => (Tbl_DATETIME_Table)it!  ).ToArray();
    }
    
        public async Task<Tbl_DATETIME2_Table?> InsertTbl_DATETIME2(Tbl_DATETIME2_Table value){
            if (value == null)
                return null;

            Tbl_DATETIME2 val = (Tbl_DATETIME2)value!;
            _context.Tbl_DATETIME2.Add(val);
            await _context.SaveChangesAsync();
            return (Tbl_DATETIME2_Table)val! ;

        }
        public async Task<Tbl_DATETIME2_Table[]> InsertTbl_DATETIME2s(params Tbl_DATETIME2_Table[] values){
        
        if (values == null || values.Length == 0)
            return new Tbl_DATETIME2_Table[0];

        Tbl_DATETIME2[] vals = values.Select(it=>(Tbl_DATETIME2)it!).ToArray();
        _context.Tbl_DATETIME2.AddRange(vals);
        await _context.SaveChangesAsync();
        return vals.Select(it => (Tbl_DATETIME2_Table)it!  ).ToArray();
    }
    
        public async Task<Tbl_DATETIMEOFFSET_Table?> InsertTbl_DATETIMEOFFSET(Tbl_DATETIMEOFFSET_Table value){
            if (value == null)
                return null;

            Tbl_DATETIMEOFFSET val = (Tbl_DATETIMEOFFSET)value!;
            _context.Tbl_DATETIMEOFFSET.Add(val);
            await _context.SaveChangesAsync();
            return (Tbl_DATETIMEOFFSET_Table)val! ;

        }
        public async Task<Tbl_DATETIMEOFFSET_Table[]> InsertTbl_DATETIMEOFFSETs(params Tbl_DATETIMEOFFSET_Table[] values){
        
        if (values == null || values.Length == 0)
            return new Tbl_DATETIMEOFFSET_Table[0];

        Tbl_DATETIMEOFFSET[] vals = values.Select(it=>(Tbl_DATETIMEOFFSET)it!).ToArray();
        _context.Tbl_DATETIMEOFFSET.AddRange(vals);
        await _context.SaveChangesAsync();
        return vals.Select(it => (Tbl_DATETIMEOFFSET_Table)it!  ).ToArray();
    }
    
        public async Task<Tbl_DECIMAL_Table?> InsertTbl_DECIMAL(Tbl_DECIMAL_Table value){
            if (value == null)
                return null;

            Tbl_DECIMAL val = (Tbl_DECIMAL)value!;
            _context.Tbl_DECIMAL.Add(val);
            await _context.SaveChangesAsync();
            return (Tbl_DECIMAL_Table)val! ;

        }
        public async Task<Tbl_DECIMAL_Table[]> InsertTbl_DECIMALs(params Tbl_DECIMAL_Table[] values){
        
        if (values == null || values.Length == 0)
            return new Tbl_DECIMAL_Table[0];

        Tbl_DECIMAL[] vals = values.Select(it=>(Tbl_DECIMAL)it!).ToArray();
        _context.Tbl_DECIMAL.AddRange(vals);
        await _context.SaveChangesAsync();
        return vals.Select(it => (Tbl_DECIMAL_Table)it!  ).ToArray();
    }
    
        public async Task<Tbl_FLOAT_Table?> InsertTbl_FLOAT(Tbl_FLOAT_Table value){
            if (value == null)
                return null;

            Tbl_FLOAT val = (Tbl_FLOAT)value!;
            _context.Tbl_FLOAT.Add(val);
            await _context.SaveChangesAsync();
            return (Tbl_FLOAT_Table)val! ;

        }
        public async Task<Tbl_FLOAT_Table[]> InsertTbl_FLOATs(params Tbl_FLOAT_Table[] values){
        
        if (values == null || values.Length == 0)
            return new Tbl_FLOAT_Table[0];

        Tbl_FLOAT[] vals = values.Select(it=>(Tbl_FLOAT)it!).ToArray();
        _context.Tbl_FLOAT.AddRange(vals);
        await _context.SaveChangesAsync();
        return vals.Select(it => (Tbl_FLOAT_Table)it!  ).ToArray();
    }
    
        public async Task<Tbl_GEOGRAPHY_Table?> InsertTbl_GEOGRAPHY(Tbl_GEOGRAPHY_Table value){
            if (value == null)
                return null;

            Tbl_GEOGRAPHY val = (Tbl_GEOGRAPHY)value!;
            _context.Tbl_GEOGRAPHY.Add(val);
            await _context.SaveChangesAsync();
            return (Tbl_GEOGRAPHY_Table)val! ;

        }
        public async Task<Tbl_GEOGRAPHY_Table[]> InsertTbl_GEOGRAPHYs(params Tbl_GEOGRAPHY_Table[] values){
        
        if (values == null || values.Length == 0)
            return new Tbl_GEOGRAPHY_Table[0];

        Tbl_GEOGRAPHY[] vals = values.Select(it=>(Tbl_GEOGRAPHY)it!).ToArray();
        _context.Tbl_GEOGRAPHY.AddRange(vals);
        await _context.SaveChangesAsync();
        return vals.Select(it => (Tbl_GEOGRAPHY_Table)it!  ).ToArray();
    }
    
        public async Task<Tbl_GEOMETRY_Table?> InsertTbl_GEOMETRY(Tbl_GEOMETRY_Table value){
            if (value == null)
                return null;

            Tbl_GEOMETRY val = (Tbl_GEOMETRY)value!;
            _context.Tbl_GEOMETRY.Add(val);
            await _context.SaveChangesAsync();
            return (Tbl_GEOMETRY_Table)val! ;

        }
        public async Task<Tbl_GEOMETRY_Table[]> InsertTbl_GEOMETRYs(params Tbl_GEOMETRY_Table[] values){
        
        if (values == null || values.Length == 0)
            return new Tbl_GEOMETRY_Table[0];

        Tbl_GEOMETRY[] vals = values.Select(it=>(Tbl_GEOMETRY)it!).ToArray();
        _context.Tbl_GEOMETRY.AddRange(vals);
        await _context.SaveChangesAsync();
        return vals.Select(it => (Tbl_GEOMETRY_Table)it!  ).ToArray();
    }
    
        public async Task<Tbl_HIERARCHYID_Table?> InsertTbl_HIERARCHYID(Tbl_HIERARCHYID_Table value){
            if (value == null)
                return null;

            Tbl_HIERARCHYID val = (Tbl_HIERARCHYID)value!;
            _context.Tbl_HIERARCHYID.Add(val);
            await _context.SaveChangesAsync();
            return (Tbl_HIERARCHYID_Table)val! ;

        }
        public async Task<Tbl_HIERARCHYID_Table[]> InsertTbl_HIERARCHYIDs(params Tbl_HIERARCHYID_Table[] values){
        
        if (values == null || values.Length == 0)
            return new Tbl_HIERARCHYID_Table[0];

        Tbl_HIERARCHYID[] vals = values.Select(it=>(Tbl_HIERARCHYID)it!).ToArray();
        _context.Tbl_HIERARCHYID.AddRange(vals);
        await _context.SaveChangesAsync();
        return vals.Select(it => (Tbl_HIERARCHYID_Table)it!  ).ToArray();
    }
    
        public async Task<Tbl_IMAGE_Table?> InsertTbl_IMAGE(Tbl_IMAGE_Table value){
            if (value == null)
                return null;

            Tbl_IMAGE val = (Tbl_IMAGE)value!;
            _context.Tbl_IMAGE.Add(val);
            await _context.SaveChangesAsync();
            return (Tbl_IMAGE_Table)val! ;

        }
        public async Task<Tbl_IMAGE_Table[]> InsertTbl_IMAGEs(params Tbl_IMAGE_Table[] values){
        
        if (values == null || values.Length == 0)
            return new Tbl_IMAGE_Table[0];

        Tbl_IMAGE[] vals = values.Select(it=>(Tbl_IMAGE)it!).ToArray();
        _context.Tbl_IMAGE.AddRange(vals);
        await _context.SaveChangesAsync();
        return vals.Select(it => (Tbl_IMAGE_Table)it!  ).ToArray();
    }
    
        public async Task<Tbl_INT_Table?> InsertTbl_INT(Tbl_INT_Table value){
            if (value == null)
                return null;

            Tbl_INT val = (Tbl_INT)value!;
            _context.Tbl_INT.Add(val);
            await _context.SaveChangesAsync();
            return (Tbl_INT_Table)val! ;

        }
        public async Task<Tbl_INT_Table[]> InsertTbl_INTs(params Tbl_INT_Table[] values){
        
        if (values == null || values.Length == 0)
            return new Tbl_INT_Table[0];

        Tbl_INT[] vals = values.Select(it=>(Tbl_INT)it!).ToArray();
        _context.Tbl_INT.AddRange(vals);
        await _context.SaveChangesAsync();
        return vals.Select(it => (Tbl_INT_Table)it!  ).ToArray();
    }
    
        public async Task<Tbl_JSON_Table?> InsertTbl_JSON(Tbl_JSON_Table value){
            if (value == null)
                return null;

            Tbl_JSON val = (Tbl_JSON)value!;
            _context.Tbl_JSON.Add(val);
            await _context.SaveChangesAsync();
            return (Tbl_JSON_Table)val! ;

        }
        public async Task<Tbl_JSON_Table[]> InsertTbl_JSONs(params Tbl_JSON_Table[] values){
        
        if (values == null || values.Length == 0)
            return new Tbl_JSON_Table[0];

        Tbl_JSON[] vals = values.Select(it=>(Tbl_JSON)it!).ToArray();
        _context.Tbl_JSON.AddRange(vals);
        await _context.SaveChangesAsync();
        return vals.Select(it => (Tbl_JSON_Table)it!  ).ToArray();
    }
    
        public async Task<Tbl_MONEY_Table?> InsertTbl_MONEY(Tbl_MONEY_Table value){
            if (value == null)
                return null;

            Tbl_MONEY val = (Tbl_MONEY)value!;
            _context.Tbl_MONEY.Add(val);
            await _context.SaveChangesAsync();
            return (Tbl_MONEY_Table)val! ;

        }
        public async Task<Tbl_MONEY_Table[]> InsertTbl_MONEYs(params Tbl_MONEY_Table[] values){
        
        if (values == null || values.Length == 0)
            return new Tbl_MONEY_Table[0];

        Tbl_MONEY[] vals = values.Select(it=>(Tbl_MONEY)it!).ToArray();
        _context.Tbl_MONEY.AddRange(vals);
        await _context.SaveChangesAsync();
        return vals.Select(it => (Tbl_MONEY_Table)it!  ).ToArray();
    }
    
        public async Task<Tbl_NCHAR_Table?> InsertTbl_NCHAR(Tbl_NCHAR_Table value){
            if (value == null)
                return null;

            Tbl_NCHAR val = (Tbl_NCHAR)value!;
            _context.Tbl_NCHAR.Add(val);
            await _context.SaveChangesAsync();
            return (Tbl_NCHAR_Table)val! ;

        }
        public async Task<Tbl_NCHAR_Table[]> InsertTbl_NCHARs(params Tbl_NCHAR_Table[] values){
        
        if (values == null || values.Length == 0)
            return new Tbl_NCHAR_Table[0];

        Tbl_NCHAR[] vals = values.Select(it=>(Tbl_NCHAR)it!).ToArray();
        _context.Tbl_NCHAR.AddRange(vals);
        await _context.SaveChangesAsync();
        return vals.Select(it => (Tbl_NCHAR_Table)it!  ).ToArray();
    }
    
        public async Task<Tbl_NTEXT_Table?> InsertTbl_NTEXT(Tbl_NTEXT_Table value){
            if (value == null)
                return null;

            Tbl_NTEXT val = (Tbl_NTEXT)value!;
            _context.Tbl_NTEXT.Add(val);
            await _context.SaveChangesAsync();
            return (Tbl_NTEXT_Table)val! ;

        }
        public async Task<Tbl_NTEXT_Table[]> InsertTbl_NTEXTs(params Tbl_NTEXT_Table[] values){
        
        if (values == null || values.Length == 0)
            return new Tbl_NTEXT_Table[0];

        Tbl_NTEXT[] vals = values.Select(it=>(Tbl_NTEXT)it!).ToArray();
        _context.Tbl_NTEXT.AddRange(vals);
        await _context.SaveChangesAsync();
        return vals.Select(it => (Tbl_NTEXT_Table)it!  ).ToArray();
    }
    
        public async Task<Tbl_NVARCHAR_Table?> InsertTbl_NVARCHAR(Tbl_NVARCHAR_Table value){
            if (value == null)
                return null;

            Tbl_NVARCHAR val = (Tbl_NVARCHAR)value!;
            _context.Tbl_NVARCHAR.Add(val);
            await _context.SaveChangesAsync();
            return (Tbl_NVARCHAR_Table)val! ;

        }
        public async Task<Tbl_NVARCHAR_Table[]> InsertTbl_NVARCHARs(params Tbl_NVARCHAR_Table[] values){
        
        if (values == null || values.Length == 0)
            return new Tbl_NVARCHAR_Table[0];

        Tbl_NVARCHAR[] vals = values.Select(it=>(Tbl_NVARCHAR)it!).ToArray();
        _context.Tbl_NVARCHAR.AddRange(vals);
        await _context.SaveChangesAsync();
        return vals.Select(it => (Tbl_NVARCHAR_Table)it!  ).ToArray();
    }
    
        public async Task<Tbl_REAL_Table?> InsertTbl_REAL(Tbl_REAL_Table value){
            if (value == null)
                return null;

            Tbl_REAL val = (Tbl_REAL)value!;
            _context.Tbl_REAL.Add(val);
            await _context.SaveChangesAsync();
            return (Tbl_REAL_Table)val! ;

        }
        public async Task<Tbl_REAL_Table[]> InsertTbl_REALs(params Tbl_REAL_Table[] values){
        
        if (values == null || values.Length == 0)
            return new Tbl_REAL_Table[0];

        Tbl_REAL[] vals = values.Select(it=>(Tbl_REAL)it!).ToArray();
        _context.Tbl_REAL.AddRange(vals);
        await _context.SaveChangesAsync();
        return vals.Select(it => (Tbl_REAL_Table)it!  ).ToArray();
    }
    
        public async Task<Tbl_SMALLDATETIME_Table?> InsertTbl_SMALLDATETIME(Tbl_SMALLDATETIME_Table value){
            if (value == null)
                return null;

            Tbl_SMALLDATETIME val = (Tbl_SMALLDATETIME)value!;
            _context.Tbl_SMALLDATETIME.Add(val);
            await _context.SaveChangesAsync();
            return (Tbl_SMALLDATETIME_Table)val! ;

        }
        public async Task<Tbl_SMALLDATETIME_Table[]> InsertTbl_SMALLDATETIMEs(params Tbl_SMALLDATETIME_Table[] values){
        
        if (values == null || values.Length == 0)
            return new Tbl_SMALLDATETIME_Table[0];

        Tbl_SMALLDATETIME[] vals = values.Select(it=>(Tbl_SMALLDATETIME)it!).ToArray();
        _context.Tbl_SMALLDATETIME.AddRange(vals);
        await _context.SaveChangesAsync();
        return vals.Select(it => (Tbl_SMALLDATETIME_Table)it!  ).ToArray();
    }
    
        public async Task<Tbl_SMALLINT_Table?> InsertTbl_SMALLINT(Tbl_SMALLINT_Table value){
            if (value == null)
                return null;

            Tbl_SMALLINT val = (Tbl_SMALLINT)value!;
            _context.Tbl_SMALLINT.Add(val);
            await _context.SaveChangesAsync();
            return (Tbl_SMALLINT_Table)val! ;

        }
        public async Task<Tbl_SMALLINT_Table[]> InsertTbl_SMALLINTs(params Tbl_SMALLINT_Table[] values){
        
        if (values == null || values.Length == 0)
            return new Tbl_SMALLINT_Table[0];

        Tbl_SMALLINT[] vals = values.Select(it=>(Tbl_SMALLINT)it!).ToArray();
        _context.Tbl_SMALLINT.AddRange(vals);
        await _context.SaveChangesAsync();
        return vals.Select(it => (Tbl_SMALLINT_Table)it!  ).ToArray();
    }
    
        public async Task<Tbl_TEXT_Table?> InsertTbl_TEXT(Tbl_TEXT_Table value){
            if (value == null)
                return null;

            Tbl_TEXT val = (Tbl_TEXT)value!;
            _context.Tbl_TEXT.Add(val);
            await _context.SaveChangesAsync();
            return (Tbl_TEXT_Table)val! ;

        }
        public async Task<Tbl_TEXT_Table[]> InsertTbl_TEXTs(params Tbl_TEXT_Table[] values){
        
        if (values == null || values.Length == 0)
            return new Tbl_TEXT_Table[0];

        Tbl_TEXT[] vals = values.Select(it=>(Tbl_TEXT)it!).ToArray();
        _context.Tbl_TEXT.AddRange(vals);
        await _context.SaveChangesAsync();
        return vals.Select(it => (Tbl_TEXT_Table)it!  ).ToArray();
    }
    
        public async Task<Tbl_TIME_Table?> InsertTbl_TIME(Tbl_TIME_Table value){
            if (value == null)
                return null;

            Tbl_TIME val = (Tbl_TIME)value!;
            _context.Tbl_TIME.Add(val);
            await _context.SaveChangesAsync();
            return (Tbl_TIME_Table)val! ;

        }
        public async Task<Tbl_TIME_Table[]> InsertTbl_TIMEs(params Tbl_TIME_Table[] values){
        
        if (values == null || values.Length == 0)
            return new Tbl_TIME_Table[0];

        Tbl_TIME[] vals = values.Select(it=>(Tbl_TIME)it!).ToArray();
        _context.Tbl_TIME.AddRange(vals);
        await _context.SaveChangesAsync();
        return vals.Select(it => (Tbl_TIME_Table)it!  ).ToArray();
    }
    
        public async Task<Tbl_TINYINT_Table?> InsertTbl_TINYINT(Tbl_TINYINT_Table value){
            if (value == null)
                return null;

            Tbl_TINYINT val = (Tbl_TINYINT)value!;
            _context.Tbl_TINYINT.Add(val);
            await _context.SaveChangesAsync();
            return (Tbl_TINYINT_Table)val! ;

        }
        public async Task<Tbl_TINYINT_Table[]> InsertTbl_TINYINTs(params Tbl_TINYINT_Table[] values){
        
        if (values == null || values.Length == 0)
            return new Tbl_TINYINT_Table[0];

        Tbl_TINYINT[] vals = values.Select(it=>(Tbl_TINYINT)it!).ToArray();
        _context.Tbl_TINYINT.AddRange(vals);
        await _context.SaveChangesAsync();
        return vals.Select(it => (Tbl_TINYINT_Table)it!  ).ToArray();
    }
    
        public async Task<Tbl_UNIQUEIDENTIFIER_Table?> InsertTbl_UNIQUEIDENTIFIER(Tbl_UNIQUEIDENTIFIER_Table value){
            if (value == null)
                return null;

            Tbl_UNIQUEIDENTIFIER val = (Tbl_UNIQUEIDENTIFIER)value!;
            _context.Tbl_UNIQUEIDENTIFIER.Add(val);
            await _context.SaveChangesAsync();
            return (Tbl_UNIQUEIDENTIFIER_Table)val! ;

        }
        public async Task<Tbl_UNIQUEIDENTIFIER_Table[]> InsertTbl_UNIQUEIDENTIFIERs(params Tbl_UNIQUEIDENTIFIER_Table[] values){
        
        if (values == null || values.Length == 0)
            return new Tbl_UNIQUEIDENTIFIER_Table[0];

        Tbl_UNIQUEIDENTIFIER[] vals = values.Select(it=>(Tbl_UNIQUEIDENTIFIER)it!).ToArray();
        _context.Tbl_UNIQUEIDENTIFIER.AddRange(vals);
        await _context.SaveChangesAsync();
        return vals.Select(it => (Tbl_UNIQUEIDENTIFIER_Table)it!  ).ToArray();
    }
    
        public async Task<Tbl_VARBINARY_Table?> InsertTbl_VARBINARY(Tbl_VARBINARY_Table value){
            if (value == null)
                return null;

            Tbl_VARBINARY val = (Tbl_VARBINARY)value!;
            _context.Tbl_VARBINARY.Add(val);
            await _context.SaveChangesAsync();
            return (Tbl_VARBINARY_Table)val! ;

        }
        public async Task<Tbl_VARBINARY_Table[]> InsertTbl_VARBINARYs(params Tbl_VARBINARY_Table[] values){
        
        if (values == null || values.Length == 0)
            return new Tbl_VARBINARY_Table[0];

        Tbl_VARBINARY[] vals = values.Select(it=>(Tbl_VARBINARY)it!).ToArray();
        _context.Tbl_VARBINARY.AddRange(vals);
        await _context.SaveChangesAsync();
        return vals.Select(it => (Tbl_VARBINARY_Table)it!  ).ToArray();
    }
    
        public async Task<Tbl_VARCHAR_Table?> InsertTbl_VARCHAR(Tbl_VARCHAR_Table value){
            if (value == null)
                return null;

            Tbl_VARCHAR val = (Tbl_VARCHAR)value!;
            _context.Tbl_VARCHAR.Add(val);
            await _context.SaveChangesAsync();
            return (Tbl_VARCHAR_Table)val! ;

        }
        public async Task<Tbl_VARCHAR_Table[]> InsertTbl_VARCHARs(params Tbl_VARCHAR_Table[] values){
        
        if (values == null || values.Length == 0)
            return new Tbl_VARCHAR_Table[0];

        Tbl_VARCHAR[] vals = values.Select(it=>(Tbl_VARCHAR)it!).ToArray();
        _context.Tbl_VARCHAR.AddRange(vals);
        await _context.SaveChangesAsync();
        return vals.Select(it => (Tbl_VARCHAR_Table)it!  ).ToArray();
    }
    
        public async Task<Tbl_XML_Table?> InsertTbl_XML(Tbl_XML_Table value){
            if (value == null)
                return null;

            Tbl_XML val = (Tbl_XML)value!;
            _context.Tbl_XML.Add(val);
            await _context.SaveChangesAsync();
            return (Tbl_XML_Table)val! ;

        }
        public async Task<Tbl_XML_Table[]> InsertTbl_XMLs(params Tbl_XML_Table[] values){
        
        if (values == null || values.Length == 0)
            return new Tbl_XML_Table[0];

        Tbl_XML[] vals = values.Select(it=>(Tbl_XML)it!).ToArray();
        _context.Tbl_XML.AddRange(vals);
        await _context.SaveChangesAsync();
        return vals.Select(it => (Tbl_XML_Table)it!  ).ToArray();
    }
    
    
}//end class InsertDataSimpleTablesMultipleData

   public interface ISearchDataTbl_BIGINT {
        IAsyncEnumerable<Tbl_BIGINT> Tbl_BIGINTFind_AsyncEnumerable(SearchTbl_BIGINT? search);
    
    public Task<long> GetAllCount();
    public Task<long> GetAllCount(SearchTbl_BIGINT? search);

        //oneKey    
    public Task<Tbl_BIGINT?> Tbl_BIGINTGetSingle(int id);
    
    
    public  IAsyncEnumerable<Tbl_BIGINT> Tbl_BIGINTSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value);
    public  IAsyncEnumerable<Tbl_BIGINT> Tbl_BIGINTSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<Tbl_BIGINT> Tbl_BIGINTSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  long? value);
    public  IAsyncEnumerable<Tbl_BIGINT> Tbl_BIGINTSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc);
        } //interface searchdata   

   public class SearchDataTbl_BIGINT: ISearchDataTbl_BIGINT{
        private SimpleTablesMultipleData context;
        public SearchDataTbl_BIGINT (SimpleTablesMultipleData context) {
            this.context=context;
        }
           
        public async Task<long> GetAllCount(){
            return await context.Tbl_BIGINTCount(null);
        }
        public async Task<long> GetAllCount(SearchTbl_BIGINT? search){
            return await context.Tbl_BIGINTCount(search);
        }
        public IAsyncEnumerable<Tbl_BIGINT> Tbl_BIGINTFind_AsyncEnumerable(SearchTbl_BIGINT? search){
            return context.Tbl_BIGINTFind_AsyncEnumerable(search);
        }
        //oneKey    
    public Task<Tbl_BIGINT?> Tbl_BIGINTGetSingle(int id){
            return context.Tbl_BIGINTGetSingle(id);
    }
    public  IAsyncEnumerable<Tbl_BIGINT> Tbl_BIGINTSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_BIGINTColumns colToSearch, string? value){
        var search =SearchTbl_BIGINT.FromSearch(sc,colToSearch,value);
    /*
            var search = new SearchTbl_BIGINT();
            var orderBy = new GeneratorFromDB.OrderBy<eTbl_BIGINTColumns>();
                              orderBy.FieldName = eTbl_BIGINTColumns.ID;
          
            orderBy.Asc = false;
            search.OrderBys = new[] { orderBy };
            search.PageNumber = 1;
            search.PageSize = int.MaxValue;
            var s = new GeneratorFromDB.SearchField<eTbl_BIGINTColumns>();
            s.Criteria = sc;
            s.FieldName = colToSearch;
            s.Value = value;
            search.SearchFields = new[] { s };
       */
            var data = this.Tbl_BIGINTFind_AsyncEnumerable(search);
            return data;
        }

    
        //False
    public  IAsyncEnumerable<Tbl_BIGINT> Tbl_BIGINTSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value){
         return Tbl_BIGINTSimpleSearch(sc,eTbl_BIGINTColumns.ID,value.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_BIGINT> Tbl_BIGINTSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc){
        return Tbl_BIGINTSimpleSearch(sc,eTbl_BIGINTColumns.ID,null);

    }


        //True
    public  IAsyncEnumerable<Tbl_BIGINT> Tbl_BIGINTSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  long? value){
         return Tbl_BIGINTSimpleSearch(sc,eTbl_BIGINTColumns.DataColumn,value?.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_BIGINT> Tbl_BIGINTSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc){
        return Tbl_BIGINTSimpleSearch(sc,eTbl_BIGINTColumns.DataColumn,null);

    }


        } //class searchdata




    
   public interface ISearchDataTbl_BINARY {
        IAsyncEnumerable<Tbl_BINARY> Tbl_BINARYFind_AsyncEnumerable(SearchTbl_BINARY? search);
    
    public Task<long> GetAllCount();
    public Task<long> GetAllCount(SearchTbl_BINARY? search);

        //oneKey    
    public Task<Tbl_BINARY?> Tbl_BINARYGetSingle(int id);
    
    
    public  IAsyncEnumerable<Tbl_BINARY> Tbl_BINARYSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value);
    public  IAsyncEnumerable<Tbl_BINARY> Tbl_BINARYSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<Tbl_BINARY> Tbl_BINARYSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  byte[] value);
    public  IAsyncEnumerable<Tbl_BINARY> Tbl_BINARYSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc);
        } //interface searchdata   

   public class SearchDataTbl_BINARY: ISearchDataTbl_BINARY{
        private SimpleTablesMultipleData context;
        public SearchDataTbl_BINARY (SimpleTablesMultipleData context) {
            this.context=context;
        }
           
        public async Task<long> GetAllCount(){
            return await context.Tbl_BINARYCount(null);
        }
        public async Task<long> GetAllCount(SearchTbl_BINARY? search){
            return await context.Tbl_BINARYCount(search);
        }
        public IAsyncEnumerable<Tbl_BINARY> Tbl_BINARYFind_AsyncEnumerable(SearchTbl_BINARY? search){
            return context.Tbl_BINARYFind_AsyncEnumerable(search);
        }
        //oneKey    
    public Task<Tbl_BINARY?> Tbl_BINARYGetSingle(int id){
            return context.Tbl_BINARYGetSingle(id);
    }
    public  IAsyncEnumerable<Tbl_BINARY> Tbl_BINARYSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_BINARYColumns colToSearch, string? value){
        var search =SearchTbl_BINARY.FromSearch(sc,colToSearch,value);
    /*
            var search = new SearchTbl_BINARY();
            var orderBy = new GeneratorFromDB.OrderBy<eTbl_BINARYColumns>();
                              orderBy.FieldName = eTbl_BINARYColumns.ID;
          
            orderBy.Asc = false;
            search.OrderBys = new[] { orderBy };
            search.PageNumber = 1;
            search.PageSize = int.MaxValue;
            var s = new GeneratorFromDB.SearchField<eTbl_BINARYColumns>();
            s.Criteria = sc;
            s.FieldName = colToSearch;
            s.Value = value;
            search.SearchFields = new[] { s };
       */
            var data = this.Tbl_BINARYFind_AsyncEnumerable(search);
            return data;
        }

    
        //False
    public  IAsyncEnumerable<Tbl_BINARY> Tbl_BINARYSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value){
         return Tbl_BINARYSimpleSearch(sc,eTbl_BINARYColumns.ID,value.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_BINARY> Tbl_BINARYSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc){
        return Tbl_BINARYSimpleSearch(sc,eTbl_BINARYColumns.ID,null);

    }


        //True
    public  IAsyncEnumerable<Tbl_BINARY> Tbl_BINARYSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  byte[] value){
         return Tbl_BINARYSimpleSearch(sc,eTbl_BINARYColumns.DataColumn,value?.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_BINARY> Tbl_BINARYSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc){
        return Tbl_BINARYSimpleSearch(sc,eTbl_BINARYColumns.DataColumn,null);

    }


        } //class searchdata




    
   public interface ISearchDataTbl_BIT {
        IAsyncEnumerable<Tbl_BIT> Tbl_BITFind_AsyncEnumerable(SearchTbl_BIT? search);
    
    public Task<long> GetAllCount();
    public Task<long> GetAllCount(SearchTbl_BIT? search);

        //oneKey    
    public Task<Tbl_BIT?> Tbl_BITGetSingle(int id);
    
    
    public  IAsyncEnumerable<Tbl_BIT> Tbl_BITSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value);
    public  IAsyncEnumerable<Tbl_BIT> Tbl_BITSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<Tbl_BIT> Tbl_BITSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  bool? value);
    public  IAsyncEnumerable<Tbl_BIT> Tbl_BITSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc);
        } //interface searchdata   

   public class SearchDataTbl_BIT: ISearchDataTbl_BIT{
        private SimpleTablesMultipleData context;
        public SearchDataTbl_BIT (SimpleTablesMultipleData context) {
            this.context=context;
        }
           
        public async Task<long> GetAllCount(){
            return await context.Tbl_BITCount(null);
        }
        public async Task<long> GetAllCount(SearchTbl_BIT? search){
            return await context.Tbl_BITCount(search);
        }
        public IAsyncEnumerable<Tbl_BIT> Tbl_BITFind_AsyncEnumerable(SearchTbl_BIT? search){
            return context.Tbl_BITFind_AsyncEnumerable(search);
        }
        //oneKey    
    public Task<Tbl_BIT?> Tbl_BITGetSingle(int id){
            return context.Tbl_BITGetSingle(id);
    }
    public  IAsyncEnumerable<Tbl_BIT> Tbl_BITSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_BITColumns colToSearch, string? value){
        var search =SearchTbl_BIT.FromSearch(sc,colToSearch,value);
    /*
            var search = new SearchTbl_BIT();
            var orderBy = new GeneratorFromDB.OrderBy<eTbl_BITColumns>();
                              orderBy.FieldName = eTbl_BITColumns.ID;
          
            orderBy.Asc = false;
            search.OrderBys = new[] { orderBy };
            search.PageNumber = 1;
            search.PageSize = int.MaxValue;
            var s = new GeneratorFromDB.SearchField<eTbl_BITColumns>();
            s.Criteria = sc;
            s.FieldName = colToSearch;
            s.Value = value;
            search.SearchFields = new[] { s };
       */
            var data = this.Tbl_BITFind_AsyncEnumerable(search);
            return data;
        }

    
        //False
    public  IAsyncEnumerable<Tbl_BIT> Tbl_BITSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value){
         return Tbl_BITSimpleSearch(sc,eTbl_BITColumns.ID,value.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_BIT> Tbl_BITSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc){
        return Tbl_BITSimpleSearch(sc,eTbl_BITColumns.ID,null);

    }


        //True
    public  IAsyncEnumerable<Tbl_BIT> Tbl_BITSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  bool? value){
         return Tbl_BITSimpleSearch(sc,eTbl_BITColumns.DataColumn,value?.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_BIT> Tbl_BITSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc){
        return Tbl_BITSimpleSearch(sc,eTbl_BITColumns.DataColumn,null);

    }


        } //class searchdata




    
   public interface ISearchDataTbl_CHAR {
        IAsyncEnumerable<Tbl_CHAR> Tbl_CHARFind_AsyncEnumerable(SearchTbl_CHAR? search);
    
    public Task<long> GetAllCount();
    public Task<long> GetAllCount(SearchTbl_CHAR? search);

        //oneKey    
    public Task<Tbl_CHAR?> Tbl_CHARGetSingle(int id);
    
    
    public  IAsyncEnumerable<Tbl_CHAR> Tbl_CHARSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value);
    public  IAsyncEnumerable<Tbl_CHAR> Tbl_CHARSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<Tbl_CHAR> Tbl_CHARSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  string value);
    public  IAsyncEnumerable<Tbl_CHAR> Tbl_CHARSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc);
        } //interface searchdata   

   public class SearchDataTbl_CHAR: ISearchDataTbl_CHAR{
        private SimpleTablesMultipleData context;
        public SearchDataTbl_CHAR (SimpleTablesMultipleData context) {
            this.context=context;
        }
           
        public async Task<long> GetAllCount(){
            return await context.Tbl_CHARCount(null);
        }
        public async Task<long> GetAllCount(SearchTbl_CHAR? search){
            return await context.Tbl_CHARCount(search);
        }
        public IAsyncEnumerable<Tbl_CHAR> Tbl_CHARFind_AsyncEnumerable(SearchTbl_CHAR? search){
            return context.Tbl_CHARFind_AsyncEnumerable(search);
        }
        //oneKey    
    public Task<Tbl_CHAR?> Tbl_CHARGetSingle(int id){
            return context.Tbl_CHARGetSingle(id);
    }
    public  IAsyncEnumerable<Tbl_CHAR> Tbl_CHARSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_CHARColumns colToSearch, string? value){
        var search =SearchTbl_CHAR.FromSearch(sc,colToSearch,value);
    /*
            var search = new SearchTbl_CHAR();
            var orderBy = new GeneratorFromDB.OrderBy<eTbl_CHARColumns>();
                              orderBy.FieldName = eTbl_CHARColumns.ID;
          
            orderBy.Asc = false;
            search.OrderBys = new[] { orderBy };
            search.PageNumber = 1;
            search.PageSize = int.MaxValue;
            var s = new GeneratorFromDB.SearchField<eTbl_CHARColumns>();
            s.Criteria = sc;
            s.FieldName = colToSearch;
            s.Value = value;
            search.SearchFields = new[] { s };
       */
            var data = this.Tbl_CHARFind_AsyncEnumerable(search);
            return data;
        }

    
        //False
    public  IAsyncEnumerable<Tbl_CHAR> Tbl_CHARSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value){
         return Tbl_CHARSimpleSearch(sc,eTbl_CHARColumns.ID,value.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_CHAR> Tbl_CHARSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc){
        return Tbl_CHARSimpleSearch(sc,eTbl_CHARColumns.ID,null);

    }


        //True
    public  IAsyncEnumerable<Tbl_CHAR> Tbl_CHARSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  string value){
         return Tbl_CHARSimpleSearch(sc,eTbl_CHARColumns.DataColumn,value?.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_CHAR> Tbl_CHARSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc){
        return Tbl_CHARSimpleSearch(sc,eTbl_CHARColumns.DataColumn,null);

    }


        } //class searchdata




    
   public interface ISearchDataTbl_DATE {
        IAsyncEnumerable<Tbl_DATE> Tbl_DATEFind_AsyncEnumerable(SearchTbl_DATE? search);
    
    public Task<long> GetAllCount();
    public Task<long> GetAllCount(SearchTbl_DATE? search);

        //oneKey    
    public Task<Tbl_DATE?> Tbl_DATEGetSingle(int id);
    
    
    public  IAsyncEnumerable<Tbl_DATE> Tbl_DATESimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value);
    public  IAsyncEnumerable<Tbl_DATE> Tbl_DATESimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<Tbl_DATE> Tbl_DATESimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  DateTime? value);
    public  IAsyncEnumerable<Tbl_DATE> Tbl_DATESimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc);
        } //interface searchdata   

   public class SearchDataTbl_DATE: ISearchDataTbl_DATE{
        private SimpleTablesMultipleData context;
        public SearchDataTbl_DATE (SimpleTablesMultipleData context) {
            this.context=context;
        }
           
        public async Task<long> GetAllCount(){
            return await context.Tbl_DATECount(null);
        }
        public async Task<long> GetAllCount(SearchTbl_DATE? search){
            return await context.Tbl_DATECount(search);
        }
        public IAsyncEnumerable<Tbl_DATE> Tbl_DATEFind_AsyncEnumerable(SearchTbl_DATE? search){
            return context.Tbl_DATEFind_AsyncEnumerable(search);
        }
        //oneKey    
    public Task<Tbl_DATE?> Tbl_DATEGetSingle(int id){
            return context.Tbl_DATEGetSingle(id);
    }
    public  IAsyncEnumerable<Tbl_DATE> Tbl_DATESimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_DATEColumns colToSearch, string? value){
        var search =SearchTbl_DATE.FromSearch(sc,colToSearch,value);
    /*
            var search = new SearchTbl_DATE();
            var orderBy = new GeneratorFromDB.OrderBy<eTbl_DATEColumns>();
                              orderBy.FieldName = eTbl_DATEColumns.ID;
          
            orderBy.Asc = false;
            search.OrderBys = new[] { orderBy };
            search.PageNumber = 1;
            search.PageSize = int.MaxValue;
            var s = new GeneratorFromDB.SearchField<eTbl_DATEColumns>();
            s.Criteria = sc;
            s.FieldName = colToSearch;
            s.Value = value;
            search.SearchFields = new[] { s };
       */
            var data = this.Tbl_DATEFind_AsyncEnumerable(search);
            return data;
        }

    
        //False
    public  IAsyncEnumerable<Tbl_DATE> Tbl_DATESimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value){
         return Tbl_DATESimpleSearch(sc,eTbl_DATEColumns.ID,value.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_DATE> Tbl_DATESimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc){
        return Tbl_DATESimpleSearch(sc,eTbl_DATEColumns.ID,null);

    }


        //True
    public  IAsyncEnumerable<Tbl_DATE> Tbl_DATESimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  DateTime? value){
         return Tbl_DATESimpleSearch(sc,eTbl_DATEColumns.DataColumn,value?.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_DATE> Tbl_DATESimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc){
        return Tbl_DATESimpleSearch(sc,eTbl_DATEColumns.DataColumn,null);

    }


        } //class searchdata




    
   public interface ISearchDataTbl_DATETIME {
        IAsyncEnumerable<Tbl_DATETIME> Tbl_DATETIMEFind_AsyncEnumerable(SearchTbl_DATETIME? search);
    
    public Task<long> GetAllCount();
    public Task<long> GetAllCount(SearchTbl_DATETIME? search);

        //oneKey    
    public Task<Tbl_DATETIME?> Tbl_DATETIMEGetSingle(int id);
    
    
    public  IAsyncEnumerable<Tbl_DATETIME> Tbl_DATETIMESimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value);
    public  IAsyncEnumerable<Tbl_DATETIME> Tbl_DATETIMESimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<Tbl_DATETIME> Tbl_DATETIMESimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  DateTime? value);
    public  IAsyncEnumerable<Tbl_DATETIME> Tbl_DATETIMESimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc);
        } //interface searchdata   

   public class SearchDataTbl_DATETIME: ISearchDataTbl_DATETIME{
        private SimpleTablesMultipleData context;
        public SearchDataTbl_DATETIME (SimpleTablesMultipleData context) {
            this.context=context;
        }
           
        public async Task<long> GetAllCount(){
            return await context.Tbl_DATETIMECount(null);
        }
        public async Task<long> GetAllCount(SearchTbl_DATETIME? search){
            return await context.Tbl_DATETIMECount(search);
        }
        public IAsyncEnumerable<Tbl_DATETIME> Tbl_DATETIMEFind_AsyncEnumerable(SearchTbl_DATETIME? search){
            return context.Tbl_DATETIMEFind_AsyncEnumerable(search);
        }
        //oneKey    
    public Task<Tbl_DATETIME?> Tbl_DATETIMEGetSingle(int id){
            return context.Tbl_DATETIMEGetSingle(id);
    }
    public  IAsyncEnumerable<Tbl_DATETIME> Tbl_DATETIMESimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_DATETIMEColumns colToSearch, string? value){
        var search =SearchTbl_DATETIME.FromSearch(sc,colToSearch,value);
    /*
            var search = new SearchTbl_DATETIME();
            var orderBy = new GeneratorFromDB.OrderBy<eTbl_DATETIMEColumns>();
                              orderBy.FieldName = eTbl_DATETIMEColumns.ID;
          
            orderBy.Asc = false;
            search.OrderBys = new[] { orderBy };
            search.PageNumber = 1;
            search.PageSize = int.MaxValue;
            var s = new GeneratorFromDB.SearchField<eTbl_DATETIMEColumns>();
            s.Criteria = sc;
            s.FieldName = colToSearch;
            s.Value = value;
            search.SearchFields = new[] { s };
       */
            var data = this.Tbl_DATETIMEFind_AsyncEnumerable(search);
            return data;
        }

    
        //False
    public  IAsyncEnumerable<Tbl_DATETIME> Tbl_DATETIMESimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value){
         return Tbl_DATETIMESimpleSearch(sc,eTbl_DATETIMEColumns.ID,value.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_DATETIME> Tbl_DATETIMESimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc){
        return Tbl_DATETIMESimpleSearch(sc,eTbl_DATETIMEColumns.ID,null);

    }


        //True
    public  IAsyncEnumerable<Tbl_DATETIME> Tbl_DATETIMESimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  DateTime? value){
         return Tbl_DATETIMESimpleSearch(sc,eTbl_DATETIMEColumns.DataColumn,value?.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_DATETIME> Tbl_DATETIMESimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc){
        return Tbl_DATETIMESimpleSearch(sc,eTbl_DATETIMEColumns.DataColumn,null);

    }


        } //class searchdata




    
   public interface ISearchDataTbl_DATETIME2 {
        IAsyncEnumerable<Tbl_DATETIME2> Tbl_DATETIME2Find_AsyncEnumerable(SearchTbl_DATETIME2? search);
    
    public Task<long> GetAllCount();
    public Task<long> GetAllCount(SearchTbl_DATETIME2? search);

        //oneKey    
    public Task<Tbl_DATETIME2?> Tbl_DATETIME2GetSingle(int id);
    
    
    public  IAsyncEnumerable<Tbl_DATETIME2> Tbl_DATETIME2SimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value);
    public  IAsyncEnumerable<Tbl_DATETIME2> Tbl_DATETIME2SimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<Tbl_DATETIME2> Tbl_DATETIME2SimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  DateTime? value);
    public  IAsyncEnumerable<Tbl_DATETIME2> Tbl_DATETIME2SimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc);
        } //interface searchdata   

   public class SearchDataTbl_DATETIME2: ISearchDataTbl_DATETIME2{
        private SimpleTablesMultipleData context;
        public SearchDataTbl_DATETIME2 (SimpleTablesMultipleData context) {
            this.context=context;
        }
           
        public async Task<long> GetAllCount(){
            return await context.Tbl_DATETIME2Count(null);
        }
        public async Task<long> GetAllCount(SearchTbl_DATETIME2? search){
            return await context.Tbl_DATETIME2Count(search);
        }
        public IAsyncEnumerable<Tbl_DATETIME2> Tbl_DATETIME2Find_AsyncEnumerable(SearchTbl_DATETIME2? search){
            return context.Tbl_DATETIME2Find_AsyncEnumerable(search);
        }
        //oneKey    
    public Task<Tbl_DATETIME2?> Tbl_DATETIME2GetSingle(int id){
            return context.Tbl_DATETIME2GetSingle(id);
    }
    public  IAsyncEnumerable<Tbl_DATETIME2> Tbl_DATETIME2SimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_DATETIME2Columns colToSearch, string? value){
        var search =SearchTbl_DATETIME2.FromSearch(sc,colToSearch,value);
    /*
            var search = new SearchTbl_DATETIME2();
            var orderBy = new GeneratorFromDB.OrderBy<eTbl_DATETIME2Columns>();
                              orderBy.FieldName = eTbl_DATETIME2Columns.ID;
          
            orderBy.Asc = false;
            search.OrderBys = new[] { orderBy };
            search.PageNumber = 1;
            search.PageSize = int.MaxValue;
            var s = new GeneratorFromDB.SearchField<eTbl_DATETIME2Columns>();
            s.Criteria = sc;
            s.FieldName = colToSearch;
            s.Value = value;
            search.SearchFields = new[] { s };
       */
            var data = this.Tbl_DATETIME2Find_AsyncEnumerable(search);
            return data;
        }

    
        //False
    public  IAsyncEnumerable<Tbl_DATETIME2> Tbl_DATETIME2SimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value){
         return Tbl_DATETIME2SimpleSearch(sc,eTbl_DATETIME2Columns.ID,value.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_DATETIME2> Tbl_DATETIME2SimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc){
        return Tbl_DATETIME2SimpleSearch(sc,eTbl_DATETIME2Columns.ID,null);

    }


        //True
    public  IAsyncEnumerable<Tbl_DATETIME2> Tbl_DATETIME2SimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  DateTime? value){
         return Tbl_DATETIME2SimpleSearch(sc,eTbl_DATETIME2Columns.DataColumn,value?.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_DATETIME2> Tbl_DATETIME2SimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc){
        return Tbl_DATETIME2SimpleSearch(sc,eTbl_DATETIME2Columns.DataColumn,null);

    }


        } //class searchdata




    
   public interface ISearchDataTbl_DATETIMEOFFSET {
        IAsyncEnumerable<Tbl_DATETIMEOFFSET> Tbl_DATETIMEOFFSETFind_AsyncEnumerable(SearchTbl_DATETIMEOFFSET? search);
    
    public Task<long> GetAllCount();
    public Task<long> GetAllCount(SearchTbl_DATETIMEOFFSET? search);

        //oneKey    
    public Task<Tbl_DATETIMEOFFSET?> Tbl_DATETIMEOFFSETGetSingle(int id);
    
    
    public  IAsyncEnumerable<Tbl_DATETIMEOFFSET> Tbl_DATETIMEOFFSETSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value);
    public  IAsyncEnumerable<Tbl_DATETIMEOFFSET> Tbl_DATETIMEOFFSETSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<Tbl_DATETIMEOFFSET> Tbl_DATETIMEOFFSETSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  DateTimeOffset? value);
    public  IAsyncEnumerable<Tbl_DATETIMEOFFSET> Tbl_DATETIMEOFFSETSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc);
        } //interface searchdata   

   public class SearchDataTbl_DATETIMEOFFSET: ISearchDataTbl_DATETIMEOFFSET{
        private SimpleTablesMultipleData context;
        public SearchDataTbl_DATETIMEOFFSET (SimpleTablesMultipleData context) {
            this.context=context;
        }
           
        public async Task<long> GetAllCount(){
            return await context.Tbl_DATETIMEOFFSETCount(null);
        }
        public async Task<long> GetAllCount(SearchTbl_DATETIMEOFFSET? search){
            return await context.Tbl_DATETIMEOFFSETCount(search);
        }
        public IAsyncEnumerable<Tbl_DATETIMEOFFSET> Tbl_DATETIMEOFFSETFind_AsyncEnumerable(SearchTbl_DATETIMEOFFSET? search){
            return context.Tbl_DATETIMEOFFSETFind_AsyncEnumerable(search);
        }
        //oneKey    
    public Task<Tbl_DATETIMEOFFSET?> Tbl_DATETIMEOFFSETGetSingle(int id){
            return context.Tbl_DATETIMEOFFSETGetSingle(id);
    }
    public  IAsyncEnumerable<Tbl_DATETIMEOFFSET> Tbl_DATETIMEOFFSETSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_DATETIMEOFFSETColumns colToSearch, string? value){
        var search =SearchTbl_DATETIMEOFFSET.FromSearch(sc,colToSearch,value);
    /*
            var search = new SearchTbl_DATETIMEOFFSET();
            var orderBy = new GeneratorFromDB.OrderBy<eTbl_DATETIMEOFFSETColumns>();
                              orderBy.FieldName = eTbl_DATETIMEOFFSETColumns.ID;
          
            orderBy.Asc = false;
            search.OrderBys = new[] { orderBy };
            search.PageNumber = 1;
            search.PageSize = int.MaxValue;
            var s = new GeneratorFromDB.SearchField<eTbl_DATETIMEOFFSETColumns>();
            s.Criteria = sc;
            s.FieldName = colToSearch;
            s.Value = value;
            search.SearchFields = new[] { s };
       */
            var data = this.Tbl_DATETIMEOFFSETFind_AsyncEnumerable(search);
            return data;
        }

    
        //False
    public  IAsyncEnumerable<Tbl_DATETIMEOFFSET> Tbl_DATETIMEOFFSETSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value){
         return Tbl_DATETIMEOFFSETSimpleSearch(sc,eTbl_DATETIMEOFFSETColumns.ID,value.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_DATETIMEOFFSET> Tbl_DATETIMEOFFSETSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc){
        return Tbl_DATETIMEOFFSETSimpleSearch(sc,eTbl_DATETIMEOFFSETColumns.ID,null);

    }


        //True
    public  IAsyncEnumerable<Tbl_DATETIMEOFFSET> Tbl_DATETIMEOFFSETSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  DateTimeOffset? value){
         return Tbl_DATETIMEOFFSETSimpleSearch(sc,eTbl_DATETIMEOFFSETColumns.DataColumn,value?.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_DATETIMEOFFSET> Tbl_DATETIMEOFFSETSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc){
        return Tbl_DATETIMEOFFSETSimpleSearch(sc,eTbl_DATETIMEOFFSETColumns.DataColumn,null);

    }


        } //class searchdata




    
   public interface ISearchDataTbl_DECIMAL {
        IAsyncEnumerable<Tbl_DECIMAL> Tbl_DECIMALFind_AsyncEnumerable(SearchTbl_DECIMAL? search);
    
    public Task<long> GetAllCount();
    public Task<long> GetAllCount(SearchTbl_DECIMAL? search);

        //oneKey    
    public Task<Tbl_DECIMAL?> Tbl_DECIMALGetSingle(int id);
    
    
    public  IAsyncEnumerable<Tbl_DECIMAL> Tbl_DECIMALSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value);
    public  IAsyncEnumerable<Tbl_DECIMAL> Tbl_DECIMALSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<Tbl_DECIMAL> Tbl_DECIMALSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  decimal? value);
    public  IAsyncEnumerable<Tbl_DECIMAL> Tbl_DECIMALSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc);
        } //interface searchdata   

   public class SearchDataTbl_DECIMAL: ISearchDataTbl_DECIMAL{
        private SimpleTablesMultipleData context;
        public SearchDataTbl_DECIMAL (SimpleTablesMultipleData context) {
            this.context=context;
        }
           
        public async Task<long> GetAllCount(){
            return await context.Tbl_DECIMALCount(null);
        }
        public async Task<long> GetAllCount(SearchTbl_DECIMAL? search){
            return await context.Tbl_DECIMALCount(search);
        }
        public IAsyncEnumerable<Tbl_DECIMAL> Tbl_DECIMALFind_AsyncEnumerable(SearchTbl_DECIMAL? search){
            return context.Tbl_DECIMALFind_AsyncEnumerable(search);
        }
        //oneKey    
    public Task<Tbl_DECIMAL?> Tbl_DECIMALGetSingle(int id){
            return context.Tbl_DECIMALGetSingle(id);
    }
    public  IAsyncEnumerable<Tbl_DECIMAL> Tbl_DECIMALSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_DECIMALColumns colToSearch, string? value){
        var search =SearchTbl_DECIMAL.FromSearch(sc,colToSearch,value);
    /*
            var search = new SearchTbl_DECIMAL();
            var orderBy = new GeneratorFromDB.OrderBy<eTbl_DECIMALColumns>();
                              orderBy.FieldName = eTbl_DECIMALColumns.ID;
          
            orderBy.Asc = false;
            search.OrderBys = new[] { orderBy };
            search.PageNumber = 1;
            search.PageSize = int.MaxValue;
            var s = new GeneratorFromDB.SearchField<eTbl_DECIMALColumns>();
            s.Criteria = sc;
            s.FieldName = colToSearch;
            s.Value = value;
            search.SearchFields = new[] { s };
       */
            var data = this.Tbl_DECIMALFind_AsyncEnumerable(search);
            return data;
        }

    
        //False
    public  IAsyncEnumerable<Tbl_DECIMAL> Tbl_DECIMALSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value){
         return Tbl_DECIMALSimpleSearch(sc,eTbl_DECIMALColumns.ID,value.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_DECIMAL> Tbl_DECIMALSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc){
        return Tbl_DECIMALSimpleSearch(sc,eTbl_DECIMALColumns.ID,null);

    }


        //True
    public  IAsyncEnumerable<Tbl_DECIMAL> Tbl_DECIMALSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  decimal? value){
         return Tbl_DECIMALSimpleSearch(sc,eTbl_DECIMALColumns.DataColumn,value?.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_DECIMAL> Tbl_DECIMALSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc){
        return Tbl_DECIMALSimpleSearch(sc,eTbl_DECIMALColumns.DataColumn,null);

    }


        } //class searchdata




    
   public interface ISearchDataTbl_FLOAT {
        IAsyncEnumerable<Tbl_FLOAT> Tbl_FLOATFind_AsyncEnumerable(SearchTbl_FLOAT? search);
    
    public Task<long> GetAllCount();
    public Task<long> GetAllCount(SearchTbl_FLOAT? search);

        //oneKey    
    public Task<Tbl_FLOAT?> Tbl_FLOATGetSingle(int id);
    
    
    public  IAsyncEnumerable<Tbl_FLOAT> Tbl_FLOATSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value);
    public  IAsyncEnumerable<Tbl_FLOAT> Tbl_FLOATSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<Tbl_FLOAT> Tbl_FLOATSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  double? value);
    public  IAsyncEnumerable<Tbl_FLOAT> Tbl_FLOATSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc);
        } //interface searchdata   

   public class SearchDataTbl_FLOAT: ISearchDataTbl_FLOAT{
        private SimpleTablesMultipleData context;
        public SearchDataTbl_FLOAT (SimpleTablesMultipleData context) {
            this.context=context;
        }
           
        public async Task<long> GetAllCount(){
            return await context.Tbl_FLOATCount(null);
        }
        public async Task<long> GetAllCount(SearchTbl_FLOAT? search){
            return await context.Tbl_FLOATCount(search);
        }
        public IAsyncEnumerable<Tbl_FLOAT> Tbl_FLOATFind_AsyncEnumerable(SearchTbl_FLOAT? search){
            return context.Tbl_FLOATFind_AsyncEnumerable(search);
        }
        //oneKey    
    public Task<Tbl_FLOAT?> Tbl_FLOATGetSingle(int id){
            return context.Tbl_FLOATGetSingle(id);
    }
    public  IAsyncEnumerable<Tbl_FLOAT> Tbl_FLOATSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_FLOATColumns colToSearch, string? value){
        var search =SearchTbl_FLOAT.FromSearch(sc,colToSearch,value);
    /*
            var search = new SearchTbl_FLOAT();
            var orderBy = new GeneratorFromDB.OrderBy<eTbl_FLOATColumns>();
                              orderBy.FieldName = eTbl_FLOATColumns.ID;
          
            orderBy.Asc = false;
            search.OrderBys = new[] { orderBy };
            search.PageNumber = 1;
            search.PageSize = int.MaxValue;
            var s = new GeneratorFromDB.SearchField<eTbl_FLOATColumns>();
            s.Criteria = sc;
            s.FieldName = colToSearch;
            s.Value = value;
            search.SearchFields = new[] { s };
       */
            var data = this.Tbl_FLOATFind_AsyncEnumerable(search);
            return data;
        }

    
        //False
    public  IAsyncEnumerable<Tbl_FLOAT> Tbl_FLOATSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value){
         return Tbl_FLOATSimpleSearch(sc,eTbl_FLOATColumns.ID,value.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_FLOAT> Tbl_FLOATSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc){
        return Tbl_FLOATSimpleSearch(sc,eTbl_FLOATColumns.ID,null);

    }


        //True
    public  IAsyncEnumerable<Tbl_FLOAT> Tbl_FLOATSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  double? value){
         return Tbl_FLOATSimpleSearch(sc,eTbl_FLOATColumns.DataColumn,value?.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_FLOAT> Tbl_FLOATSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc){
        return Tbl_FLOATSimpleSearch(sc,eTbl_FLOATColumns.DataColumn,null);

    }


        } //class searchdata




    
   public interface ISearchDataTbl_GEOGRAPHY {
        IAsyncEnumerable<Tbl_GEOGRAPHY> Tbl_GEOGRAPHYFind_AsyncEnumerable(SearchTbl_GEOGRAPHY? search);
    
    public Task<long> GetAllCount();
    public Task<long> GetAllCount(SearchTbl_GEOGRAPHY? search);

        //oneKey    
    public Task<Tbl_GEOGRAPHY?> Tbl_GEOGRAPHYGetSingle(int id);
    
    
    public  IAsyncEnumerable<Tbl_GEOGRAPHY> Tbl_GEOGRAPHYSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value);
    public  IAsyncEnumerable<Tbl_GEOGRAPHY> Tbl_GEOGRAPHYSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc);
        } //interface searchdata   

   public class SearchDataTbl_GEOGRAPHY: ISearchDataTbl_GEOGRAPHY{
        private SimpleTablesMultipleData context;
        public SearchDataTbl_GEOGRAPHY (SimpleTablesMultipleData context) {
            this.context=context;
        }
           
        public async Task<long> GetAllCount(){
            return await context.Tbl_GEOGRAPHYCount(null);
        }
        public async Task<long> GetAllCount(SearchTbl_GEOGRAPHY? search){
            return await context.Tbl_GEOGRAPHYCount(search);
        }
        public IAsyncEnumerable<Tbl_GEOGRAPHY> Tbl_GEOGRAPHYFind_AsyncEnumerable(SearchTbl_GEOGRAPHY? search){
            return context.Tbl_GEOGRAPHYFind_AsyncEnumerable(search);
        }
        //oneKey    
    public Task<Tbl_GEOGRAPHY?> Tbl_GEOGRAPHYGetSingle(int id){
            return context.Tbl_GEOGRAPHYGetSingle(id);
    }
    public  IAsyncEnumerable<Tbl_GEOGRAPHY> Tbl_GEOGRAPHYSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_GEOGRAPHYColumns colToSearch, string? value){
        var search =SearchTbl_GEOGRAPHY.FromSearch(sc,colToSearch,value);
    /*
            var search = new SearchTbl_GEOGRAPHY();
            var orderBy = new GeneratorFromDB.OrderBy<eTbl_GEOGRAPHYColumns>();
                              orderBy.FieldName = eTbl_GEOGRAPHYColumns.ID;
          
            orderBy.Asc = false;
            search.OrderBys = new[] { orderBy };
            search.PageNumber = 1;
            search.PageSize = int.MaxValue;
            var s = new GeneratorFromDB.SearchField<eTbl_GEOGRAPHYColumns>();
            s.Criteria = sc;
            s.FieldName = colToSearch;
            s.Value = value;
            search.SearchFields = new[] { s };
       */
            var data = this.Tbl_GEOGRAPHYFind_AsyncEnumerable(search);
            return data;
        }

    
        //False
    public  IAsyncEnumerable<Tbl_GEOGRAPHY> Tbl_GEOGRAPHYSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value){
         return Tbl_GEOGRAPHYSimpleSearch(sc,eTbl_GEOGRAPHYColumns.ID,value.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_GEOGRAPHY> Tbl_GEOGRAPHYSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc){
        return Tbl_GEOGRAPHYSimpleSearch(sc,eTbl_GEOGRAPHYColumns.ID,null);

    }


        } //class searchdata




    
   public interface ISearchDataTbl_GEOMETRY {
        IAsyncEnumerable<Tbl_GEOMETRY> Tbl_GEOMETRYFind_AsyncEnumerable(SearchTbl_GEOMETRY? search);
    
    public Task<long> GetAllCount();
    public Task<long> GetAllCount(SearchTbl_GEOMETRY? search);

        //oneKey    
    public Task<Tbl_GEOMETRY?> Tbl_GEOMETRYGetSingle(int id);
    
    
    public  IAsyncEnumerable<Tbl_GEOMETRY> Tbl_GEOMETRYSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value);
    public  IAsyncEnumerable<Tbl_GEOMETRY> Tbl_GEOMETRYSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc);
        } //interface searchdata   

   public class SearchDataTbl_GEOMETRY: ISearchDataTbl_GEOMETRY{
        private SimpleTablesMultipleData context;
        public SearchDataTbl_GEOMETRY (SimpleTablesMultipleData context) {
            this.context=context;
        }
           
        public async Task<long> GetAllCount(){
            return await context.Tbl_GEOMETRYCount(null);
        }
        public async Task<long> GetAllCount(SearchTbl_GEOMETRY? search){
            return await context.Tbl_GEOMETRYCount(search);
        }
        public IAsyncEnumerable<Tbl_GEOMETRY> Tbl_GEOMETRYFind_AsyncEnumerable(SearchTbl_GEOMETRY? search){
            return context.Tbl_GEOMETRYFind_AsyncEnumerable(search);
        }
        //oneKey    
    public Task<Tbl_GEOMETRY?> Tbl_GEOMETRYGetSingle(int id){
            return context.Tbl_GEOMETRYGetSingle(id);
    }
    public  IAsyncEnumerable<Tbl_GEOMETRY> Tbl_GEOMETRYSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_GEOMETRYColumns colToSearch, string? value){
        var search =SearchTbl_GEOMETRY.FromSearch(sc,colToSearch,value);
    /*
            var search = new SearchTbl_GEOMETRY();
            var orderBy = new GeneratorFromDB.OrderBy<eTbl_GEOMETRYColumns>();
                              orderBy.FieldName = eTbl_GEOMETRYColumns.ID;
          
            orderBy.Asc = false;
            search.OrderBys = new[] { orderBy };
            search.PageNumber = 1;
            search.PageSize = int.MaxValue;
            var s = new GeneratorFromDB.SearchField<eTbl_GEOMETRYColumns>();
            s.Criteria = sc;
            s.FieldName = colToSearch;
            s.Value = value;
            search.SearchFields = new[] { s };
       */
            var data = this.Tbl_GEOMETRYFind_AsyncEnumerable(search);
            return data;
        }

    
        //False
    public  IAsyncEnumerable<Tbl_GEOMETRY> Tbl_GEOMETRYSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value){
         return Tbl_GEOMETRYSimpleSearch(sc,eTbl_GEOMETRYColumns.ID,value.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_GEOMETRY> Tbl_GEOMETRYSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc){
        return Tbl_GEOMETRYSimpleSearch(sc,eTbl_GEOMETRYColumns.ID,null);

    }


        } //class searchdata




    
   public interface ISearchDataTbl_HIERARCHYID {
        IAsyncEnumerable<Tbl_HIERARCHYID> Tbl_HIERARCHYIDFind_AsyncEnumerable(SearchTbl_HIERARCHYID? search);
    
    public Task<long> GetAllCount();
    public Task<long> GetAllCount(SearchTbl_HIERARCHYID? search);

        //oneKey    
    public Task<Tbl_HIERARCHYID?> Tbl_HIERARCHYIDGetSingle(int id);
    
    
    public  IAsyncEnumerable<Tbl_HIERARCHYID> Tbl_HIERARCHYIDSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value);
    public  IAsyncEnumerable<Tbl_HIERARCHYID> Tbl_HIERARCHYIDSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc);
        } //interface searchdata   

   public class SearchDataTbl_HIERARCHYID: ISearchDataTbl_HIERARCHYID{
        private SimpleTablesMultipleData context;
        public SearchDataTbl_HIERARCHYID (SimpleTablesMultipleData context) {
            this.context=context;
        }
           
        public async Task<long> GetAllCount(){
            return await context.Tbl_HIERARCHYIDCount(null);
        }
        public async Task<long> GetAllCount(SearchTbl_HIERARCHYID? search){
            return await context.Tbl_HIERARCHYIDCount(search);
        }
        public IAsyncEnumerable<Tbl_HIERARCHYID> Tbl_HIERARCHYIDFind_AsyncEnumerable(SearchTbl_HIERARCHYID? search){
            return context.Tbl_HIERARCHYIDFind_AsyncEnumerable(search);
        }
        //oneKey    
    public Task<Tbl_HIERARCHYID?> Tbl_HIERARCHYIDGetSingle(int id){
            return context.Tbl_HIERARCHYIDGetSingle(id);
    }
    public  IAsyncEnumerable<Tbl_HIERARCHYID> Tbl_HIERARCHYIDSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_HIERARCHYIDColumns colToSearch, string? value){
        var search =SearchTbl_HIERARCHYID.FromSearch(sc,colToSearch,value);
    /*
            var search = new SearchTbl_HIERARCHYID();
            var orderBy = new GeneratorFromDB.OrderBy<eTbl_HIERARCHYIDColumns>();
                              orderBy.FieldName = eTbl_HIERARCHYIDColumns.ID;
          
            orderBy.Asc = false;
            search.OrderBys = new[] { orderBy };
            search.PageNumber = 1;
            search.PageSize = int.MaxValue;
            var s = new GeneratorFromDB.SearchField<eTbl_HIERARCHYIDColumns>();
            s.Criteria = sc;
            s.FieldName = colToSearch;
            s.Value = value;
            search.SearchFields = new[] { s };
       */
            var data = this.Tbl_HIERARCHYIDFind_AsyncEnumerable(search);
            return data;
        }

    
        //False
    public  IAsyncEnumerable<Tbl_HIERARCHYID> Tbl_HIERARCHYIDSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value){
         return Tbl_HIERARCHYIDSimpleSearch(sc,eTbl_HIERARCHYIDColumns.ID,value.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_HIERARCHYID> Tbl_HIERARCHYIDSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc){
        return Tbl_HIERARCHYIDSimpleSearch(sc,eTbl_HIERARCHYIDColumns.ID,null);

    }


        } //class searchdata




    
   public interface ISearchDataTbl_IMAGE {
        IAsyncEnumerable<Tbl_IMAGE> Tbl_IMAGEFind_AsyncEnumerable(SearchTbl_IMAGE? search);
    
    public Task<long> GetAllCount();
    public Task<long> GetAllCount(SearchTbl_IMAGE? search);

        //oneKey    
    public Task<Tbl_IMAGE?> Tbl_IMAGEGetSingle(int id);
    
    
    public  IAsyncEnumerable<Tbl_IMAGE> Tbl_IMAGESimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value);
    public  IAsyncEnumerable<Tbl_IMAGE> Tbl_IMAGESimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<Tbl_IMAGE> Tbl_IMAGESimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  byte[] value);
    public  IAsyncEnumerable<Tbl_IMAGE> Tbl_IMAGESimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc);
        } //interface searchdata   

   public class SearchDataTbl_IMAGE: ISearchDataTbl_IMAGE{
        private SimpleTablesMultipleData context;
        public SearchDataTbl_IMAGE (SimpleTablesMultipleData context) {
            this.context=context;
        }
           
        public async Task<long> GetAllCount(){
            return await context.Tbl_IMAGECount(null);
        }
        public async Task<long> GetAllCount(SearchTbl_IMAGE? search){
            return await context.Tbl_IMAGECount(search);
        }
        public IAsyncEnumerable<Tbl_IMAGE> Tbl_IMAGEFind_AsyncEnumerable(SearchTbl_IMAGE? search){
            return context.Tbl_IMAGEFind_AsyncEnumerable(search);
        }
        //oneKey    
    public Task<Tbl_IMAGE?> Tbl_IMAGEGetSingle(int id){
            return context.Tbl_IMAGEGetSingle(id);
    }
    public  IAsyncEnumerable<Tbl_IMAGE> Tbl_IMAGESimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_IMAGEColumns colToSearch, string? value){
        var search =SearchTbl_IMAGE.FromSearch(sc,colToSearch,value);
    /*
            var search = new SearchTbl_IMAGE();
            var orderBy = new GeneratorFromDB.OrderBy<eTbl_IMAGEColumns>();
                              orderBy.FieldName = eTbl_IMAGEColumns.ID;
          
            orderBy.Asc = false;
            search.OrderBys = new[] { orderBy };
            search.PageNumber = 1;
            search.PageSize = int.MaxValue;
            var s = new GeneratorFromDB.SearchField<eTbl_IMAGEColumns>();
            s.Criteria = sc;
            s.FieldName = colToSearch;
            s.Value = value;
            search.SearchFields = new[] { s };
       */
            var data = this.Tbl_IMAGEFind_AsyncEnumerable(search);
            return data;
        }

    
        //False
    public  IAsyncEnumerable<Tbl_IMAGE> Tbl_IMAGESimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value){
         return Tbl_IMAGESimpleSearch(sc,eTbl_IMAGEColumns.ID,value.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_IMAGE> Tbl_IMAGESimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc){
        return Tbl_IMAGESimpleSearch(sc,eTbl_IMAGEColumns.ID,null);

    }


        //True
    public  IAsyncEnumerable<Tbl_IMAGE> Tbl_IMAGESimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  byte[] value){
         return Tbl_IMAGESimpleSearch(sc,eTbl_IMAGEColumns.DataColumn,value?.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_IMAGE> Tbl_IMAGESimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc){
        return Tbl_IMAGESimpleSearch(sc,eTbl_IMAGEColumns.DataColumn,null);

    }


        } //class searchdata




    
   public interface ISearchDataTbl_INT {
        IAsyncEnumerable<Tbl_INT> Tbl_INTFind_AsyncEnumerable(SearchTbl_INT? search);
    
    public Task<long> GetAllCount();
    public Task<long> GetAllCount(SearchTbl_INT? search);

        //oneKey    
    public Task<Tbl_INT?> Tbl_INTGetSingle(int id);
    
    
    public  IAsyncEnumerable<Tbl_INT> Tbl_INTSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value);
    public  IAsyncEnumerable<Tbl_INT> Tbl_INTSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<Tbl_INT> Tbl_INTSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  int? value);
    public  IAsyncEnumerable<Tbl_INT> Tbl_INTSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc);
        } //interface searchdata   

   public class SearchDataTbl_INT: ISearchDataTbl_INT{
        private SimpleTablesMultipleData context;
        public SearchDataTbl_INT (SimpleTablesMultipleData context) {
            this.context=context;
        }
           
        public async Task<long> GetAllCount(){
            return await context.Tbl_INTCount(null);
        }
        public async Task<long> GetAllCount(SearchTbl_INT? search){
            return await context.Tbl_INTCount(search);
        }
        public IAsyncEnumerable<Tbl_INT> Tbl_INTFind_AsyncEnumerable(SearchTbl_INT? search){
            return context.Tbl_INTFind_AsyncEnumerable(search);
        }
        //oneKey    
    public Task<Tbl_INT?> Tbl_INTGetSingle(int id){
            return context.Tbl_INTGetSingle(id);
    }
    public  IAsyncEnumerable<Tbl_INT> Tbl_INTSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_INTColumns colToSearch, string? value){
        var search =SearchTbl_INT.FromSearch(sc,colToSearch,value);
    /*
            var search = new SearchTbl_INT();
            var orderBy = new GeneratorFromDB.OrderBy<eTbl_INTColumns>();
                              orderBy.FieldName = eTbl_INTColumns.ID;
          
            orderBy.Asc = false;
            search.OrderBys = new[] { orderBy };
            search.PageNumber = 1;
            search.PageSize = int.MaxValue;
            var s = new GeneratorFromDB.SearchField<eTbl_INTColumns>();
            s.Criteria = sc;
            s.FieldName = colToSearch;
            s.Value = value;
            search.SearchFields = new[] { s };
       */
            var data = this.Tbl_INTFind_AsyncEnumerable(search);
            return data;
        }

    
        //False
    public  IAsyncEnumerable<Tbl_INT> Tbl_INTSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value){
         return Tbl_INTSimpleSearch(sc,eTbl_INTColumns.ID,value.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_INT> Tbl_INTSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc){
        return Tbl_INTSimpleSearch(sc,eTbl_INTColumns.ID,null);

    }


        //True
    public  IAsyncEnumerable<Tbl_INT> Tbl_INTSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  int? value){
         return Tbl_INTSimpleSearch(sc,eTbl_INTColumns.DataColumn,value?.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_INT> Tbl_INTSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc){
        return Tbl_INTSimpleSearch(sc,eTbl_INTColumns.DataColumn,null);

    }


        } //class searchdata




    
   public interface ISearchDataTbl_JSON {
        IAsyncEnumerable<Tbl_JSON> Tbl_JSONFind_AsyncEnumerable(SearchTbl_JSON? search);
    
    public Task<long> GetAllCount();
    public Task<long> GetAllCount(SearchTbl_JSON? search);

        //oneKey    
    public Task<Tbl_JSON?> Tbl_JSONGetSingle(int id);
    
    
    public  IAsyncEnumerable<Tbl_JSON> Tbl_JSONSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value);
    public  IAsyncEnumerable<Tbl_JSON> Tbl_JSONSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<Tbl_JSON> Tbl_JSONSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  string value);
    public  IAsyncEnumerable<Tbl_JSON> Tbl_JSONSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc);
        } //interface searchdata   

   public class SearchDataTbl_JSON: ISearchDataTbl_JSON{
        private SimpleTablesMultipleData context;
        public SearchDataTbl_JSON (SimpleTablesMultipleData context) {
            this.context=context;
        }
           
        public async Task<long> GetAllCount(){
            return await context.Tbl_JSONCount(null);
        }
        public async Task<long> GetAllCount(SearchTbl_JSON? search){
            return await context.Tbl_JSONCount(search);
        }
        public IAsyncEnumerable<Tbl_JSON> Tbl_JSONFind_AsyncEnumerable(SearchTbl_JSON? search){
            return context.Tbl_JSONFind_AsyncEnumerable(search);
        }
        //oneKey    
    public Task<Tbl_JSON?> Tbl_JSONGetSingle(int id){
            return context.Tbl_JSONGetSingle(id);
    }
    public  IAsyncEnumerable<Tbl_JSON> Tbl_JSONSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_JSONColumns colToSearch, string? value){
        var search =SearchTbl_JSON.FromSearch(sc,colToSearch,value);
    /*
            var search = new SearchTbl_JSON();
            var orderBy = new GeneratorFromDB.OrderBy<eTbl_JSONColumns>();
                              orderBy.FieldName = eTbl_JSONColumns.ID;
          
            orderBy.Asc = false;
            search.OrderBys = new[] { orderBy };
            search.PageNumber = 1;
            search.PageSize = int.MaxValue;
            var s = new GeneratorFromDB.SearchField<eTbl_JSONColumns>();
            s.Criteria = sc;
            s.FieldName = colToSearch;
            s.Value = value;
            search.SearchFields = new[] { s };
       */
            var data = this.Tbl_JSONFind_AsyncEnumerable(search);
            return data;
        }

    
        //False
    public  IAsyncEnumerable<Tbl_JSON> Tbl_JSONSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value){
         return Tbl_JSONSimpleSearch(sc,eTbl_JSONColumns.ID,value.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_JSON> Tbl_JSONSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc){
        return Tbl_JSONSimpleSearch(sc,eTbl_JSONColumns.ID,null);

    }


        //True
    public  IAsyncEnumerable<Tbl_JSON> Tbl_JSONSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  string value){
         return Tbl_JSONSimpleSearch(sc,eTbl_JSONColumns.DataColumn,value?.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_JSON> Tbl_JSONSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc){
        return Tbl_JSONSimpleSearch(sc,eTbl_JSONColumns.DataColumn,null);

    }


        } //class searchdata




    
   public interface ISearchDataTbl_MONEY {
        IAsyncEnumerable<Tbl_MONEY> Tbl_MONEYFind_AsyncEnumerable(SearchTbl_MONEY? search);
    
    public Task<long> GetAllCount();
    public Task<long> GetAllCount(SearchTbl_MONEY? search);

        //oneKey    
    public Task<Tbl_MONEY?> Tbl_MONEYGetSingle(int id);
    
    
    public  IAsyncEnumerable<Tbl_MONEY> Tbl_MONEYSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value);
    public  IAsyncEnumerable<Tbl_MONEY> Tbl_MONEYSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<Tbl_MONEY> Tbl_MONEYSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  decimal? value);
    public  IAsyncEnumerable<Tbl_MONEY> Tbl_MONEYSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc);
        } //interface searchdata   

   public class SearchDataTbl_MONEY: ISearchDataTbl_MONEY{
        private SimpleTablesMultipleData context;
        public SearchDataTbl_MONEY (SimpleTablesMultipleData context) {
            this.context=context;
        }
           
        public async Task<long> GetAllCount(){
            return await context.Tbl_MONEYCount(null);
        }
        public async Task<long> GetAllCount(SearchTbl_MONEY? search){
            return await context.Tbl_MONEYCount(search);
        }
        public IAsyncEnumerable<Tbl_MONEY> Tbl_MONEYFind_AsyncEnumerable(SearchTbl_MONEY? search){
            return context.Tbl_MONEYFind_AsyncEnumerable(search);
        }
        //oneKey    
    public Task<Tbl_MONEY?> Tbl_MONEYGetSingle(int id){
            return context.Tbl_MONEYGetSingle(id);
    }
    public  IAsyncEnumerable<Tbl_MONEY> Tbl_MONEYSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_MONEYColumns colToSearch, string? value){
        var search =SearchTbl_MONEY.FromSearch(sc,colToSearch,value);
    /*
            var search = new SearchTbl_MONEY();
            var orderBy = new GeneratorFromDB.OrderBy<eTbl_MONEYColumns>();
                              orderBy.FieldName = eTbl_MONEYColumns.ID;
          
            orderBy.Asc = false;
            search.OrderBys = new[] { orderBy };
            search.PageNumber = 1;
            search.PageSize = int.MaxValue;
            var s = new GeneratorFromDB.SearchField<eTbl_MONEYColumns>();
            s.Criteria = sc;
            s.FieldName = colToSearch;
            s.Value = value;
            search.SearchFields = new[] { s };
       */
            var data = this.Tbl_MONEYFind_AsyncEnumerable(search);
            return data;
        }

    
        //False
    public  IAsyncEnumerable<Tbl_MONEY> Tbl_MONEYSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value){
         return Tbl_MONEYSimpleSearch(sc,eTbl_MONEYColumns.ID,value.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_MONEY> Tbl_MONEYSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc){
        return Tbl_MONEYSimpleSearch(sc,eTbl_MONEYColumns.ID,null);

    }


        //True
    public  IAsyncEnumerable<Tbl_MONEY> Tbl_MONEYSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  decimal? value){
         return Tbl_MONEYSimpleSearch(sc,eTbl_MONEYColumns.DataColumn,value?.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_MONEY> Tbl_MONEYSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc){
        return Tbl_MONEYSimpleSearch(sc,eTbl_MONEYColumns.DataColumn,null);

    }


        } //class searchdata




    
   public interface ISearchDataTbl_NCHAR {
        IAsyncEnumerable<Tbl_NCHAR> Tbl_NCHARFind_AsyncEnumerable(SearchTbl_NCHAR? search);
    
    public Task<long> GetAllCount();
    public Task<long> GetAllCount(SearchTbl_NCHAR? search);

        //oneKey    
    public Task<Tbl_NCHAR?> Tbl_NCHARGetSingle(int id);
    
    
    public  IAsyncEnumerable<Tbl_NCHAR> Tbl_NCHARSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value);
    public  IAsyncEnumerable<Tbl_NCHAR> Tbl_NCHARSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<Tbl_NCHAR> Tbl_NCHARSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  string value);
    public  IAsyncEnumerable<Tbl_NCHAR> Tbl_NCHARSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc);
        } //interface searchdata   

   public class SearchDataTbl_NCHAR: ISearchDataTbl_NCHAR{
        private SimpleTablesMultipleData context;
        public SearchDataTbl_NCHAR (SimpleTablesMultipleData context) {
            this.context=context;
        }
           
        public async Task<long> GetAllCount(){
            return await context.Tbl_NCHARCount(null);
        }
        public async Task<long> GetAllCount(SearchTbl_NCHAR? search){
            return await context.Tbl_NCHARCount(search);
        }
        public IAsyncEnumerable<Tbl_NCHAR> Tbl_NCHARFind_AsyncEnumerable(SearchTbl_NCHAR? search){
            return context.Tbl_NCHARFind_AsyncEnumerable(search);
        }
        //oneKey    
    public Task<Tbl_NCHAR?> Tbl_NCHARGetSingle(int id){
            return context.Tbl_NCHARGetSingle(id);
    }
    public  IAsyncEnumerable<Tbl_NCHAR> Tbl_NCHARSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_NCHARColumns colToSearch, string? value){
        var search =SearchTbl_NCHAR.FromSearch(sc,colToSearch,value);
    /*
            var search = new SearchTbl_NCHAR();
            var orderBy = new GeneratorFromDB.OrderBy<eTbl_NCHARColumns>();
                              orderBy.FieldName = eTbl_NCHARColumns.ID;
          
            orderBy.Asc = false;
            search.OrderBys = new[] { orderBy };
            search.PageNumber = 1;
            search.PageSize = int.MaxValue;
            var s = new GeneratorFromDB.SearchField<eTbl_NCHARColumns>();
            s.Criteria = sc;
            s.FieldName = colToSearch;
            s.Value = value;
            search.SearchFields = new[] { s };
       */
            var data = this.Tbl_NCHARFind_AsyncEnumerable(search);
            return data;
        }

    
        //False
    public  IAsyncEnumerable<Tbl_NCHAR> Tbl_NCHARSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value){
         return Tbl_NCHARSimpleSearch(sc,eTbl_NCHARColumns.ID,value.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_NCHAR> Tbl_NCHARSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc){
        return Tbl_NCHARSimpleSearch(sc,eTbl_NCHARColumns.ID,null);

    }


        //True
    public  IAsyncEnumerable<Tbl_NCHAR> Tbl_NCHARSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  string value){
         return Tbl_NCHARSimpleSearch(sc,eTbl_NCHARColumns.DataColumn,value?.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_NCHAR> Tbl_NCHARSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc){
        return Tbl_NCHARSimpleSearch(sc,eTbl_NCHARColumns.DataColumn,null);

    }


        } //class searchdata




    
   public interface ISearchDataTbl_NTEXT {
        IAsyncEnumerable<Tbl_NTEXT> Tbl_NTEXTFind_AsyncEnumerable(SearchTbl_NTEXT? search);
    
    public Task<long> GetAllCount();
    public Task<long> GetAllCount(SearchTbl_NTEXT? search);

        //oneKey    
    public Task<Tbl_NTEXT?> Tbl_NTEXTGetSingle(int id);
    
    
    public  IAsyncEnumerable<Tbl_NTEXT> Tbl_NTEXTSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value);
    public  IAsyncEnumerable<Tbl_NTEXT> Tbl_NTEXTSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<Tbl_NTEXT> Tbl_NTEXTSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  string value);
    public  IAsyncEnumerable<Tbl_NTEXT> Tbl_NTEXTSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc);
        } //interface searchdata   

   public class SearchDataTbl_NTEXT: ISearchDataTbl_NTEXT{
        private SimpleTablesMultipleData context;
        public SearchDataTbl_NTEXT (SimpleTablesMultipleData context) {
            this.context=context;
        }
           
        public async Task<long> GetAllCount(){
            return await context.Tbl_NTEXTCount(null);
        }
        public async Task<long> GetAllCount(SearchTbl_NTEXT? search){
            return await context.Tbl_NTEXTCount(search);
        }
        public IAsyncEnumerable<Tbl_NTEXT> Tbl_NTEXTFind_AsyncEnumerable(SearchTbl_NTEXT? search){
            return context.Tbl_NTEXTFind_AsyncEnumerable(search);
        }
        //oneKey    
    public Task<Tbl_NTEXT?> Tbl_NTEXTGetSingle(int id){
            return context.Tbl_NTEXTGetSingle(id);
    }
    public  IAsyncEnumerable<Tbl_NTEXT> Tbl_NTEXTSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_NTEXTColumns colToSearch, string? value){
        var search =SearchTbl_NTEXT.FromSearch(sc,colToSearch,value);
    /*
            var search = new SearchTbl_NTEXT();
            var orderBy = new GeneratorFromDB.OrderBy<eTbl_NTEXTColumns>();
                              orderBy.FieldName = eTbl_NTEXTColumns.ID;
          
            orderBy.Asc = false;
            search.OrderBys = new[] { orderBy };
            search.PageNumber = 1;
            search.PageSize = int.MaxValue;
            var s = new GeneratorFromDB.SearchField<eTbl_NTEXTColumns>();
            s.Criteria = sc;
            s.FieldName = colToSearch;
            s.Value = value;
            search.SearchFields = new[] { s };
       */
            var data = this.Tbl_NTEXTFind_AsyncEnumerable(search);
            return data;
        }

    
        //False
    public  IAsyncEnumerable<Tbl_NTEXT> Tbl_NTEXTSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value){
         return Tbl_NTEXTSimpleSearch(sc,eTbl_NTEXTColumns.ID,value.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_NTEXT> Tbl_NTEXTSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc){
        return Tbl_NTEXTSimpleSearch(sc,eTbl_NTEXTColumns.ID,null);

    }


        //True
    public  IAsyncEnumerable<Tbl_NTEXT> Tbl_NTEXTSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  string value){
         return Tbl_NTEXTSimpleSearch(sc,eTbl_NTEXTColumns.DataColumn,value?.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_NTEXT> Tbl_NTEXTSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc){
        return Tbl_NTEXTSimpleSearch(sc,eTbl_NTEXTColumns.DataColumn,null);

    }


        } //class searchdata




    
   public interface ISearchDataTbl_NVARCHAR {
        IAsyncEnumerable<Tbl_NVARCHAR> Tbl_NVARCHARFind_AsyncEnumerable(SearchTbl_NVARCHAR? search);
    
    public Task<long> GetAllCount();
    public Task<long> GetAllCount(SearchTbl_NVARCHAR? search);

        //oneKey    
    public Task<Tbl_NVARCHAR?> Tbl_NVARCHARGetSingle(int id);
    
    
    public  IAsyncEnumerable<Tbl_NVARCHAR> Tbl_NVARCHARSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value);
    public  IAsyncEnumerable<Tbl_NVARCHAR> Tbl_NVARCHARSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<Tbl_NVARCHAR> Tbl_NVARCHARSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  string value);
    public  IAsyncEnumerable<Tbl_NVARCHAR> Tbl_NVARCHARSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc);
        } //interface searchdata   

   public class SearchDataTbl_NVARCHAR: ISearchDataTbl_NVARCHAR{
        private SimpleTablesMultipleData context;
        public SearchDataTbl_NVARCHAR (SimpleTablesMultipleData context) {
            this.context=context;
        }
           
        public async Task<long> GetAllCount(){
            return await context.Tbl_NVARCHARCount(null);
        }
        public async Task<long> GetAllCount(SearchTbl_NVARCHAR? search){
            return await context.Tbl_NVARCHARCount(search);
        }
        public IAsyncEnumerable<Tbl_NVARCHAR> Tbl_NVARCHARFind_AsyncEnumerable(SearchTbl_NVARCHAR? search){
            return context.Tbl_NVARCHARFind_AsyncEnumerable(search);
        }
        //oneKey    
    public Task<Tbl_NVARCHAR?> Tbl_NVARCHARGetSingle(int id){
            return context.Tbl_NVARCHARGetSingle(id);
    }
    public  IAsyncEnumerable<Tbl_NVARCHAR> Tbl_NVARCHARSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_NVARCHARColumns colToSearch, string? value){
        var search =SearchTbl_NVARCHAR.FromSearch(sc,colToSearch,value);
    /*
            var search = new SearchTbl_NVARCHAR();
            var orderBy = new GeneratorFromDB.OrderBy<eTbl_NVARCHARColumns>();
                              orderBy.FieldName = eTbl_NVARCHARColumns.ID;
          
            orderBy.Asc = false;
            search.OrderBys = new[] { orderBy };
            search.PageNumber = 1;
            search.PageSize = int.MaxValue;
            var s = new GeneratorFromDB.SearchField<eTbl_NVARCHARColumns>();
            s.Criteria = sc;
            s.FieldName = colToSearch;
            s.Value = value;
            search.SearchFields = new[] { s };
       */
            var data = this.Tbl_NVARCHARFind_AsyncEnumerable(search);
            return data;
        }

    
        //False
    public  IAsyncEnumerable<Tbl_NVARCHAR> Tbl_NVARCHARSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value){
         return Tbl_NVARCHARSimpleSearch(sc,eTbl_NVARCHARColumns.ID,value.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_NVARCHAR> Tbl_NVARCHARSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc){
        return Tbl_NVARCHARSimpleSearch(sc,eTbl_NVARCHARColumns.ID,null);

    }


        //True
    public  IAsyncEnumerable<Tbl_NVARCHAR> Tbl_NVARCHARSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  string value){
         return Tbl_NVARCHARSimpleSearch(sc,eTbl_NVARCHARColumns.DataColumn,value?.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_NVARCHAR> Tbl_NVARCHARSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc){
        return Tbl_NVARCHARSimpleSearch(sc,eTbl_NVARCHARColumns.DataColumn,null);

    }


        } //class searchdata




    
   public interface ISearchDataTbl_REAL {
        IAsyncEnumerable<Tbl_REAL> Tbl_REALFind_AsyncEnumerable(SearchTbl_REAL? search);
    
    public Task<long> GetAllCount();
    public Task<long> GetAllCount(SearchTbl_REAL? search);

        //oneKey    
    public Task<Tbl_REAL?> Tbl_REALGetSingle(int id);
    
    
    public  IAsyncEnumerable<Tbl_REAL> Tbl_REALSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value);
    public  IAsyncEnumerable<Tbl_REAL> Tbl_REALSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<Tbl_REAL> Tbl_REALSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  float? value);
    public  IAsyncEnumerable<Tbl_REAL> Tbl_REALSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc);
        } //interface searchdata   

   public class SearchDataTbl_REAL: ISearchDataTbl_REAL{
        private SimpleTablesMultipleData context;
        public SearchDataTbl_REAL (SimpleTablesMultipleData context) {
            this.context=context;
        }
           
        public async Task<long> GetAllCount(){
            return await context.Tbl_REALCount(null);
        }
        public async Task<long> GetAllCount(SearchTbl_REAL? search){
            return await context.Tbl_REALCount(search);
        }
        public IAsyncEnumerable<Tbl_REAL> Tbl_REALFind_AsyncEnumerable(SearchTbl_REAL? search){
            return context.Tbl_REALFind_AsyncEnumerable(search);
        }
        //oneKey    
    public Task<Tbl_REAL?> Tbl_REALGetSingle(int id){
            return context.Tbl_REALGetSingle(id);
    }
    public  IAsyncEnumerable<Tbl_REAL> Tbl_REALSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_REALColumns colToSearch, string? value){
        var search =SearchTbl_REAL.FromSearch(sc,colToSearch,value);
    /*
            var search = new SearchTbl_REAL();
            var orderBy = new GeneratorFromDB.OrderBy<eTbl_REALColumns>();
                              orderBy.FieldName = eTbl_REALColumns.ID;
          
            orderBy.Asc = false;
            search.OrderBys = new[] { orderBy };
            search.PageNumber = 1;
            search.PageSize = int.MaxValue;
            var s = new GeneratorFromDB.SearchField<eTbl_REALColumns>();
            s.Criteria = sc;
            s.FieldName = colToSearch;
            s.Value = value;
            search.SearchFields = new[] { s };
       */
            var data = this.Tbl_REALFind_AsyncEnumerable(search);
            return data;
        }

    
        //False
    public  IAsyncEnumerable<Tbl_REAL> Tbl_REALSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value){
         return Tbl_REALSimpleSearch(sc,eTbl_REALColumns.ID,value.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_REAL> Tbl_REALSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc){
        return Tbl_REALSimpleSearch(sc,eTbl_REALColumns.ID,null);

    }


        //True
    public  IAsyncEnumerable<Tbl_REAL> Tbl_REALSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  float? value){
         return Tbl_REALSimpleSearch(sc,eTbl_REALColumns.DataColumn,value?.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_REAL> Tbl_REALSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc){
        return Tbl_REALSimpleSearch(sc,eTbl_REALColumns.DataColumn,null);

    }


        } //class searchdata




    
   public interface ISearchDataTbl_SMALLDATETIME {
        IAsyncEnumerable<Tbl_SMALLDATETIME> Tbl_SMALLDATETIMEFind_AsyncEnumerable(SearchTbl_SMALLDATETIME? search);
    
    public Task<long> GetAllCount();
    public Task<long> GetAllCount(SearchTbl_SMALLDATETIME? search);

        //oneKey    
    public Task<Tbl_SMALLDATETIME?> Tbl_SMALLDATETIMEGetSingle(int id);
    
    
    public  IAsyncEnumerable<Tbl_SMALLDATETIME> Tbl_SMALLDATETIMESimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value);
    public  IAsyncEnumerable<Tbl_SMALLDATETIME> Tbl_SMALLDATETIMESimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<Tbl_SMALLDATETIME> Tbl_SMALLDATETIMESimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  DateTime? value);
    public  IAsyncEnumerable<Tbl_SMALLDATETIME> Tbl_SMALLDATETIMESimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc);
        } //interface searchdata   

   public class SearchDataTbl_SMALLDATETIME: ISearchDataTbl_SMALLDATETIME{
        private SimpleTablesMultipleData context;
        public SearchDataTbl_SMALLDATETIME (SimpleTablesMultipleData context) {
            this.context=context;
        }
           
        public async Task<long> GetAllCount(){
            return await context.Tbl_SMALLDATETIMECount(null);
        }
        public async Task<long> GetAllCount(SearchTbl_SMALLDATETIME? search){
            return await context.Tbl_SMALLDATETIMECount(search);
        }
        public IAsyncEnumerable<Tbl_SMALLDATETIME> Tbl_SMALLDATETIMEFind_AsyncEnumerable(SearchTbl_SMALLDATETIME? search){
            return context.Tbl_SMALLDATETIMEFind_AsyncEnumerable(search);
        }
        //oneKey    
    public Task<Tbl_SMALLDATETIME?> Tbl_SMALLDATETIMEGetSingle(int id){
            return context.Tbl_SMALLDATETIMEGetSingle(id);
    }
    public  IAsyncEnumerable<Tbl_SMALLDATETIME> Tbl_SMALLDATETIMESimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_SMALLDATETIMEColumns colToSearch, string? value){
        var search =SearchTbl_SMALLDATETIME.FromSearch(sc,colToSearch,value);
    /*
            var search = new SearchTbl_SMALLDATETIME();
            var orderBy = new GeneratorFromDB.OrderBy<eTbl_SMALLDATETIMEColumns>();
                              orderBy.FieldName = eTbl_SMALLDATETIMEColumns.ID;
          
            orderBy.Asc = false;
            search.OrderBys = new[] { orderBy };
            search.PageNumber = 1;
            search.PageSize = int.MaxValue;
            var s = new GeneratorFromDB.SearchField<eTbl_SMALLDATETIMEColumns>();
            s.Criteria = sc;
            s.FieldName = colToSearch;
            s.Value = value;
            search.SearchFields = new[] { s };
       */
            var data = this.Tbl_SMALLDATETIMEFind_AsyncEnumerable(search);
            return data;
        }

    
        //False
    public  IAsyncEnumerable<Tbl_SMALLDATETIME> Tbl_SMALLDATETIMESimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value){
         return Tbl_SMALLDATETIMESimpleSearch(sc,eTbl_SMALLDATETIMEColumns.ID,value.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_SMALLDATETIME> Tbl_SMALLDATETIMESimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc){
        return Tbl_SMALLDATETIMESimpleSearch(sc,eTbl_SMALLDATETIMEColumns.ID,null);

    }


        //True
    public  IAsyncEnumerable<Tbl_SMALLDATETIME> Tbl_SMALLDATETIMESimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  DateTime? value){
         return Tbl_SMALLDATETIMESimpleSearch(sc,eTbl_SMALLDATETIMEColumns.DataColumn,value?.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_SMALLDATETIME> Tbl_SMALLDATETIMESimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc){
        return Tbl_SMALLDATETIMESimpleSearch(sc,eTbl_SMALLDATETIMEColumns.DataColumn,null);

    }


        } //class searchdata




    
   public interface ISearchDataTbl_SMALLINT {
        IAsyncEnumerable<Tbl_SMALLINT> Tbl_SMALLINTFind_AsyncEnumerable(SearchTbl_SMALLINT? search);
    
    public Task<long> GetAllCount();
    public Task<long> GetAllCount(SearchTbl_SMALLINT? search);

        //oneKey    
    public Task<Tbl_SMALLINT?> Tbl_SMALLINTGetSingle(int id);
    
    
    public  IAsyncEnumerable<Tbl_SMALLINT> Tbl_SMALLINTSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value);
    public  IAsyncEnumerable<Tbl_SMALLINT> Tbl_SMALLINTSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<Tbl_SMALLINT> Tbl_SMALLINTSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  short? value);
    public  IAsyncEnumerable<Tbl_SMALLINT> Tbl_SMALLINTSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc);
        } //interface searchdata   

   public class SearchDataTbl_SMALLINT: ISearchDataTbl_SMALLINT{
        private SimpleTablesMultipleData context;
        public SearchDataTbl_SMALLINT (SimpleTablesMultipleData context) {
            this.context=context;
        }
           
        public async Task<long> GetAllCount(){
            return await context.Tbl_SMALLINTCount(null);
        }
        public async Task<long> GetAllCount(SearchTbl_SMALLINT? search){
            return await context.Tbl_SMALLINTCount(search);
        }
        public IAsyncEnumerable<Tbl_SMALLINT> Tbl_SMALLINTFind_AsyncEnumerable(SearchTbl_SMALLINT? search){
            return context.Tbl_SMALLINTFind_AsyncEnumerable(search);
        }
        //oneKey    
    public Task<Tbl_SMALLINT?> Tbl_SMALLINTGetSingle(int id){
            return context.Tbl_SMALLINTGetSingle(id);
    }
    public  IAsyncEnumerable<Tbl_SMALLINT> Tbl_SMALLINTSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_SMALLINTColumns colToSearch, string? value){
        var search =SearchTbl_SMALLINT.FromSearch(sc,colToSearch,value);
    /*
            var search = new SearchTbl_SMALLINT();
            var orderBy = new GeneratorFromDB.OrderBy<eTbl_SMALLINTColumns>();
                              orderBy.FieldName = eTbl_SMALLINTColumns.ID;
          
            orderBy.Asc = false;
            search.OrderBys = new[] { orderBy };
            search.PageNumber = 1;
            search.PageSize = int.MaxValue;
            var s = new GeneratorFromDB.SearchField<eTbl_SMALLINTColumns>();
            s.Criteria = sc;
            s.FieldName = colToSearch;
            s.Value = value;
            search.SearchFields = new[] { s };
       */
            var data = this.Tbl_SMALLINTFind_AsyncEnumerable(search);
            return data;
        }

    
        //False
    public  IAsyncEnumerable<Tbl_SMALLINT> Tbl_SMALLINTSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value){
         return Tbl_SMALLINTSimpleSearch(sc,eTbl_SMALLINTColumns.ID,value.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_SMALLINT> Tbl_SMALLINTSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc){
        return Tbl_SMALLINTSimpleSearch(sc,eTbl_SMALLINTColumns.ID,null);

    }


        //True
    public  IAsyncEnumerable<Tbl_SMALLINT> Tbl_SMALLINTSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  short? value){
         return Tbl_SMALLINTSimpleSearch(sc,eTbl_SMALLINTColumns.DataColumn,value?.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_SMALLINT> Tbl_SMALLINTSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc){
        return Tbl_SMALLINTSimpleSearch(sc,eTbl_SMALLINTColumns.DataColumn,null);

    }


        } //class searchdata




    
   public interface ISearchDataTbl_TEXT {
        IAsyncEnumerable<Tbl_TEXT> Tbl_TEXTFind_AsyncEnumerable(SearchTbl_TEXT? search);
    
    public Task<long> GetAllCount();
    public Task<long> GetAllCount(SearchTbl_TEXT? search);

        //oneKey    
    public Task<Tbl_TEXT?> Tbl_TEXTGetSingle(int id);
    
    
    public  IAsyncEnumerable<Tbl_TEXT> Tbl_TEXTSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value);
    public  IAsyncEnumerable<Tbl_TEXT> Tbl_TEXTSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<Tbl_TEXT> Tbl_TEXTSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  string value);
    public  IAsyncEnumerable<Tbl_TEXT> Tbl_TEXTSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc);
        } //interface searchdata   

   public class SearchDataTbl_TEXT: ISearchDataTbl_TEXT{
        private SimpleTablesMultipleData context;
        public SearchDataTbl_TEXT (SimpleTablesMultipleData context) {
            this.context=context;
        }
           
        public async Task<long> GetAllCount(){
            return await context.Tbl_TEXTCount(null);
        }
        public async Task<long> GetAllCount(SearchTbl_TEXT? search){
            return await context.Tbl_TEXTCount(search);
        }
        public IAsyncEnumerable<Tbl_TEXT> Tbl_TEXTFind_AsyncEnumerable(SearchTbl_TEXT? search){
            return context.Tbl_TEXTFind_AsyncEnumerable(search);
        }
        //oneKey    
    public Task<Tbl_TEXT?> Tbl_TEXTGetSingle(int id){
            return context.Tbl_TEXTGetSingle(id);
    }
    public  IAsyncEnumerable<Tbl_TEXT> Tbl_TEXTSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_TEXTColumns colToSearch, string? value){
        var search =SearchTbl_TEXT.FromSearch(sc,colToSearch,value);
    /*
            var search = new SearchTbl_TEXT();
            var orderBy = new GeneratorFromDB.OrderBy<eTbl_TEXTColumns>();
                              orderBy.FieldName = eTbl_TEXTColumns.ID;
          
            orderBy.Asc = false;
            search.OrderBys = new[] { orderBy };
            search.PageNumber = 1;
            search.PageSize = int.MaxValue;
            var s = new GeneratorFromDB.SearchField<eTbl_TEXTColumns>();
            s.Criteria = sc;
            s.FieldName = colToSearch;
            s.Value = value;
            search.SearchFields = new[] { s };
       */
            var data = this.Tbl_TEXTFind_AsyncEnumerable(search);
            return data;
        }

    
        //False
    public  IAsyncEnumerable<Tbl_TEXT> Tbl_TEXTSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value){
         return Tbl_TEXTSimpleSearch(sc,eTbl_TEXTColumns.ID,value.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_TEXT> Tbl_TEXTSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc){
        return Tbl_TEXTSimpleSearch(sc,eTbl_TEXTColumns.ID,null);

    }


        //True
    public  IAsyncEnumerable<Tbl_TEXT> Tbl_TEXTSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  string value){
         return Tbl_TEXTSimpleSearch(sc,eTbl_TEXTColumns.DataColumn,value?.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_TEXT> Tbl_TEXTSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc){
        return Tbl_TEXTSimpleSearch(sc,eTbl_TEXTColumns.DataColumn,null);

    }


        } //class searchdata




    
   public interface ISearchDataTbl_TIME {
        IAsyncEnumerable<Tbl_TIME> Tbl_TIMEFind_AsyncEnumerable(SearchTbl_TIME? search);
    
    public Task<long> GetAllCount();
    public Task<long> GetAllCount(SearchTbl_TIME? search);

        //oneKey    
    public Task<Tbl_TIME?> Tbl_TIMEGetSingle(int id);
    
    
    public  IAsyncEnumerable<Tbl_TIME> Tbl_TIMESimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value);
    public  IAsyncEnumerable<Tbl_TIME> Tbl_TIMESimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<Tbl_TIME> Tbl_TIMESimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  TimeSpan? value);
    public  IAsyncEnumerable<Tbl_TIME> Tbl_TIMESimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc);
        } //interface searchdata   

   public class SearchDataTbl_TIME: ISearchDataTbl_TIME{
        private SimpleTablesMultipleData context;
        public SearchDataTbl_TIME (SimpleTablesMultipleData context) {
            this.context=context;
        }
           
        public async Task<long> GetAllCount(){
            return await context.Tbl_TIMECount(null);
        }
        public async Task<long> GetAllCount(SearchTbl_TIME? search){
            return await context.Tbl_TIMECount(search);
        }
        public IAsyncEnumerable<Tbl_TIME> Tbl_TIMEFind_AsyncEnumerable(SearchTbl_TIME? search){
            return context.Tbl_TIMEFind_AsyncEnumerable(search);
        }
        //oneKey    
    public Task<Tbl_TIME?> Tbl_TIMEGetSingle(int id){
            return context.Tbl_TIMEGetSingle(id);
    }
    public  IAsyncEnumerable<Tbl_TIME> Tbl_TIMESimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_TIMEColumns colToSearch, string? value){
        var search =SearchTbl_TIME.FromSearch(sc,colToSearch,value);
    /*
            var search = new SearchTbl_TIME();
            var orderBy = new GeneratorFromDB.OrderBy<eTbl_TIMEColumns>();
                              orderBy.FieldName = eTbl_TIMEColumns.ID;
          
            orderBy.Asc = false;
            search.OrderBys = new[] { orderBy };
            search.PageNumber = 1;
            search.PageSize = int.MaxValue;
            var s = new GeneratorFromDB.SearchField<eTbl_TIMEColumns>();
            s.Criteria = sc;
            s.FieldName = colToSearch;
            s.Value = value;
            search.SearchFields = new[] { s };
       */
            var data = this.Tbl_TIMEFind_AsyncEnumerable(search);
            return data;
        }

    
        //False
    public  IAsyncEnumerable<Tbl_TIME> Tbl_TIMESimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value){
         return Tbl_TIMESimpleSearch(sc,eTbl_TIMEColumns.ID,value.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_TIME> Tbl_TIMESimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc){
        return Tbl_TIMESimpleSearch(sc,eTbl_TIMEColumns.ID,null);

    }


        //True
    public  IAsyncEnumerable<Tbl_TIME> Tbl_TIMESimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  TimeSpan? value){
         return Tbl_TIMESimpleSearch(sc,eTbl_TIMEColumns.DataColumn,value?.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_TIME> Tbl_TIMESimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc){
        return Tbl_TIMESimpleSearch(sc,eTbl_TIMEColumns.DataColumn,null);

    }


        } //class searchdata




    
   public interface ISearchDataTbl_TINYINT {
        IAsyncEnumerable<Tbl_TINYINT> Tbl_TINYINTFind_AsyncEnumerable(SearchTbl_TINYINT? search);
    
    public Task<long> GetAllCount();
    public Task<long> GetAllCount(SearchTbl_TINYINT? search);

        //oneKey    
    public Task<Tbl_TINYINT?> Tbl_TINYINTGetSingle(int id);
    
    
    public  IAsyncEnumerable<Tbl_TINYINT> Tbl_TINYINTSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value);
    public  IAsyncEnumerable<Tbl_TINYINT> Tbl_TINYINTSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<Tbl_TINYINT> Tbl_TINYINTSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  byte? value);
    public  IAsyncEnumerable<Tbl_TINYINT> Tbl_TINYINTSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc);
        } //interface searchdata   

   public class SearchDataTbl_TINYINT: ISearchDataTbl_TINYINT{
        private SimpleTablesMultipleData context;
        public SearchDataTbl_TINYINT (SimpleTablesMultipleData context) {
            this.context=context;
        }
           
        public async Task<long> GetAllCount(){
            return await context.Tbl_TINYINTCount(null);
        }
        public async Task<long> GetAllCount(SearchTbl_TINYINT? search){
            return await context.Tbl_TINYINTCount(search);
        }
        public IAsyncEnumerable<Tbl_TINYINT> Tbl_TINYINTFind_AsyncEnumerable(SearchTbl_TINYINT? search){
            return context.Tbl_TINYINTFind_AsyncEnumerable(search);
        }
        //oneKey    
    public Task<Tbl_TINYINT?> Tbl_TINYINTGetSingle(int id){
            return context.Tbl_TINYINTGetSingle(id);
    }
    public  IAsyncEnumerable<Tbl_TINYINT> Tbl_TINYINTSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_TINYINTColumns colToSearch, string? value){
        var search =SearchTbl_TINYINT.FromSearch(sc,colToSearch,value);
    /*
            var search = new SearchTbl_TINYINT();
            var orderBy = new GeneratorFromDB.OrderBy<eTbl_TINYINTColumns>();
                              orderBy.FieldName = eTbl_TINYINTColumns.ID;
          
            orderBy.Asc = false;
            search.OrderBys = new[] { orderBy };
            search.PageNumber = 1;
            search.PageSize = int.MaxValue;
            var s = new GeneratorFromDB.SearchField<eTbl_TINYINTColumns>();
            s.Criteria = sc;
            s.FieldName = colToSearch;
            s.Value = value;
            search.SearchFields = new[] { s };
       */
            var data = this.Tbl_TINYINTFind_AsyncEnumerable(search);
            return data;
        }

    
        //False
    public  IAsyncEnumerable<Tbl_TINYINT> Tbl_TINYINTSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value){
         return Tbl_TINYINTSimpleSearch(sc,eTbl_TINYINTColumns.ID,value.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_TINYINT> Tbl_TINYINTSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc){
        return Tbl_TINYINTSimpleSearch(sc,eTbl_TINYINTColumns.ID,null);

    }


        //True
    public  IAsyncEnumerable<Tbl_TINYINT> Tbl_TINYINTSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  byte? value){
         return Tbl_TINYINTSimpleSearch(sc,eTbl_TINYINTColumns.DataColumn,value?.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_TINYINT> Tbl_TINYINTSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc){
        return Tbl_TINYINTSimpleSearch(sc,eTbl_TINYINTColumns.DataColumn,null);

    }


        } //class searchdata




    
   public interface ISearchDataTbl_UNIQUEIDENTIFIER {
        IAsyncEnumerable<Tbl_UNIQUEIDENTIFIER> Tbl_UNIQUEIDENTIFIERFind_AsyncEnumerable(SearchTbl_UNIQUEIDENTIFIER? search);
    
    public Task<long> GetAllCount();
    public Task<long> GetAllCount(SearchTbl_UNIQUEIDENTIFIER? search);

        //oneKey    
    public Task<Tbl_UNIQUEIDENTIFIER?> Tbl_UNIQUEIDENTIFIERGetSingle(int id);
    
    
    public  IAsyncEnumerable<Tbl_UNIQUEIDENTIFIER> Tbl_UNIQUEIDENTIFIERSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value);
    public  IAsyncEnumerable<Tbl_UNIQUEIDENTIFIER> Tbl_UNIQUEIDENTIFIERSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<Tbl_UNIQUEIDENTIFIER> Tbl_UNIQUEIDENTIFIERSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  Guid? value);
    public  IAsyncEnumerable<Tbl_UNIQUEIDENTIFIER> Tbl_UNIQUEIDENTIFIERSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc);
        } //interface searchdata   

   public class SearchDataTbl_UNIQUEIDENTIFIER: ISearchDataTbl_UNIQUEIDENTIFIER{
        private SimpleTablesMultipleData context;
        public SearchDataTbl_UNIQUEIDENTIFIER (SimpleTablesMultipleData context) {
            this.context=context;
        }
           
        public async Task<long> GetAllCount(){
            return await context.Tbl_UNIQUEIDENTIFIERCount(null);
        }
        public async Task<long> GetAllCount(SearchTbl_UNIQUEIDENTIFIER? search){
            return await context.Tbl_UNIQUEIDENTIFIERCount(search);
        }
        public IAsyncEnumerable<Tbl_UNIQUEIDENTIFIER> Tbl_UNIQUEIDENTIFIERFind_AsyncEnumerable(SearchTbl_UNIQUEIDENTIFIER? search){
            return context.Tbl_UNIQUEIDENTIFIERFind_AsyncEnumerable(search);
        }
        //oneKey    
    public Task<Tbl_UNIQUEIDENTIFIER?> Tbl_UNIQUEIDENTIFIERGetSingle(int id){
            return context.Tbl_UNIQUEIDENTIFIERGetSingle(id);
    }
    public  IAsyncEnumerable<Tbl_UNIQUEIDENTIFIER> Tbl_UNIQUEIDENTIFIERSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_UNIQUEIDENTIFIERColumns colToSearch, string? value){
        var search =SearchTbl_UNIQUEIDENTIFIER.FromSearch(sc,colToSearch,value);
    /*
            var search = new SearchTbl_UNIQUEIDENTIFIER();
            var orderBy = new GeneratorFromDB.OrderBy<eTbl_UNIQUEIDENTIFIERColumns>();
                              orderBy.FieldName = eTbl_UNIQUEIDENTIFIERColumns.ID;
          
            orderBy.Asc = false;
            search.OrderBys = new[] { orderBy };
            search.PageNumber = 1;
            search.PageSize = int.MaxValue;
            var s = new GeneratorFromDB.SearchField<eTbl_UNIQUEIDENTIFIERColumns>();
            s.Criteria = sc;
            s.FieldName = colToSearch;
            s.Value = value;
            search.SearchFields = new[] { s };
       */
            var data = this.Tbl_UNIQUEIDENTIFIERFind_AsyncEnumerable(search);
            return data;
        }

    
        //False
    public  IAsyncEnumerable<Tbl_UNIQUEIDENTIFIER> Tbl_UNIQUEIDENTIFIERSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value){
         return Tbl_UNIQUEIDENTIFIERSimpleSearch(sc,eTbl_UNIQUEIDENTIFIERColumns.ID,value.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_UNIQUEIDENTIFIER> Tbl_UNIQUEIDENTIFIERSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc){
        return Tbl_UNIQUEIDENTIFIERSimpleSearch(sc,eTbl_UNIQUEIDENTIFIERColumns.ID,null);

    }


        //True
    public  IAsyncEnumerable<Tbl_UNIQUEIDENTIFIER> Tbl_UNIQUEIDENTIFIERSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  Guid? value){
         return Tbl_UNIQUEIDENTIFIERSimpleSearch(sc,eTbl_UNIQUEIDENTIFIERColumns.DataColumn,value?.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_UNIQUEIDENTIFIER> Tbl_UNIQUEIDENTIFIERSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc){
        return Tbl_UNIQUEIDENTIFIERSimpleSearch(sc,eTbl_UNIQUEIDENTIFIERColumns.DataColumn,null);

    }


        } //class searchdata




    
   public interface ISearchDataTbl_VARBINARY {
        IAsyncEnumerable<Tbl_VARBINARY> Tbl_VARBINARYFind_AsyncEnumerable(SearchTbl_VARBINARY? search);
    
    public Task<long> GetAllCount();
    public Task<long> GetAllCount(SearchTbl_VARBINARY? search);

        //oneKey    
    public Task<Tbl_VARBINARY?> Tbl_VARBINARYGetSingle(int id);
    
    
    public  IAsyncEnumerable<Tbl_VARBINARY> Tbl_VARBINARYSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value);
    public  IAsyncEnumerable<Tbl_VARBINARY> Tbl_VARBINARYSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<Tbl_VARBINARY> Tbl_VARBINARYSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  byte[] value);
    public  IAsyncEnumerable<Tbl_VARBINARY> Tbl_VARBINARYSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc);
        } //interface searchdata   

   public class SearchDataTbl_VARBINARY: ISearchDataTbl_VARBINARY{
        private SimpleTablesMultipleData context;
        public SearchDataTbl_VARBINARY (SimpleTablesMultipleData context) {
            this.context=context;
        }
           
        public async Task<long> GetAllCount(){
            return await context.Tbl_VARBINARYCount(null);
        }
        public async Task<long> GetAllCount(SearchTbl_VARBINARY? search){
            return await context.Tbl_VARBINARYCount(search);
        }
        public IAsyncEnumerable<Tbl_VARBINARY> Tbl_VARBINARYFind_AsyncEnumerable(SearchTbl_VARBINARY? search){
            return context.Tbl_VARBINARYFind_AsyncEnumerable(search);
        }
        //oneKey    
    public Task<Tbl_VARBINARY?> Tbl_VARBINARYGetSingle(int id){
            return context.Tbl_VARBINARYGetSingle(id);
    }
    public  IAsyncEnumerable<Tbl_VARBINARY> Tbl_VARBINARYSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_VARBINARYColumns colToSearch, string? value){
        var search =SearchTbl_VARBINARY.FromSearch(sc,colToSearch,value);
    /*
            var search = new SearchTbl_VARBINARY();
            var orderBy = new GeneratorFromDB.OrderBy<eTbl_VARBINARYColumns>();
                              orderBy.FieldName = eTbl_VARBINARYColumns.ID;
          
            orderBy.Asc = false;
            search.OrderBys = new[] { orderBy };
            search.PageNumber = 1;
            search.PageSize = int.MaxValue;
            var s = new GeneratorFromDB.SearchField<eTbl_VARBINARYColumns>();
            s.Criteria = sc;
            s.FieldName = colToSearch;
            s.Value = value;
            search.SearchFields = new[] { s };
       */
            var data = this.Tbl_VARBINARYFind_AsyncEnumerable(search);
            return data;
        }

    
        //False
    public  IAsyncEnumerable<Tbl_VARBINARY> Tbl_VARBINARYSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value){
         return Tbl_VARBINARYSimpleSearch(sc,eTbl_VARBINARYColumns.ID,value.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_VARBINARY> Tbl_VARBINARYSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc){
        return Tbl_VARBINARYSimpleSearch(sc,eTbl_VARBINARYColumns.ID,null);

    }


        //True
    public  IAsyncEnumerable<Tbl_VARBINARY> Tbl_VARBINARYSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  byte[] value){
         return Tbl_VARBINARYSimpleSearch(sc,eTbl_VARBINARYColumns.DataColumn,value?.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_VARBINARY> Tbl_VARBINARYSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc){
        return Tbl_VARBINARYSimpleSearch(sc,eTbl_VARBINARYColumns.DataColumn,null);

    }


        } //class searchdata




    
   public interface ISearchDataTbl_VARCHAR {
        IAsyncEnumerable<Tbl_VARCHAR> Tbl_VARCHARFind_AsyncEnumerable(SearchTbl_VARCHAR? search);
    
    public Task<long> GetAllCount();
    public Task<long> GetAllCount(SearchTbl_VARCHAR? search);

        //oneKey    
    public Task<Tbl_VARCHAR?> Tbl_VARCHARGetSingle(int id);
    
    
    public  IAsyncEnumerable<Tbl_VARCHAR> Tbl_VARCHARSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value);
    public  IAsyncEnumerable<Tbl_VARCHAR> Tbl_VARCHARSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<Tbl_VARCHAR> Tbl_VARCHARSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  string value);
    public  IAsyncEnumerable<Tbl_VARCHAR> Tbl_VARCHARSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc);
        } //interface searchdata   

   public class SearchDataTbl_VARCHAR: ISearchDataTbl_VARCHAR{
        private SimpleTablesMultipleData context;
        public SearchDataTbl_VARCHAR (SimpleTablesMultipleData context) {
            this.context=context;
        }
           
        public async Task<long> GetAllCount(){
            return await context.Tbl_VARCHARCount(null);
        }
        public async Task<long> GetAllCount(SearchTbl_VARCHAR? search){
            return await context.Tbl_VARCHARCount(search);
        }
        public IAsyncEnumerable<Tbl_VARCHAR> Tbl_VARCHARFind_AsyncEnumerable(SearchTbl_VARCHAR? search){
            return context.Tbl_VARCHARFind_AsyncEnumerable(search);
        }
        //oneKey    
    public Task<Tbl_VARCHAR?> Tbl_VARCHARGetSingle(int id){
            return context.Tbl_VARCHARGetSingle(id);
    }
    public  IAsyncEnumerable<Tbl_VARCHAR> Tbl_VARCHARSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_VARCHARColumns colToSearch, string? value){
        var search =SearchTbl_VARCHAR.FromSearch(sc,colToSearch,value);
    /*
            var search = new SearchTbl_VARCHAR();
            var orderBy = new GeneratorFromDB.OrderBy<eTbl_VARCHARColumns>();
                              orderBy.FieldName = eTbl_VARCHARColumns.ID;
          
            orderBy.Asc = false;
            search.OrderBys = new[] { orderBy };
            search.PageNumber = 1;
            search.PageSize = int.MaxValue;
            var s = new GeneratorFromDB.SearchField<eTbl_VARCHARColumns>();
            s.Criteria = sc;
            s.FieldName = colToSearch;
            s.Value = value;
            search.SearchFields = new[] { s };
       */
            var data = this.Tbl_VARCHARFind_AsyncEnumerable(search);
            return data;
        }

    
        //False
    public  IAsyncEnumerable<Tbl_VARCHAR> Tbl_VARCHARSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value){
         return Tbl_VARCHARSimpleSearch(sc,eTbl_VARCHARColumns.ID,value.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_VARCHAR> Tbl_VARCHARSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc){
        return Tbl_VARCHARSimpleSearch(sc,eTbl_VARCHARColumns.ID,null);

    }


        //True
    public  IAsyncEnumerable<Tbl_VARCHAR> Tbl_VARCHARSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  string value){
         return Tbl_VARCHARSimpleSearch(sc,eTbl_VARCHARColumns.DataColumn,value?.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_VARCHAR> Tbl_VARCHARSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc){
        return Tbl_VARCHARSimpleSearch(sc,eTbl_VARCHARColumns.DataColumn,null);

    }


        } //class searchdata




    
   public interface ISearchDataTbl_XML {
        IAsyncEnumerable<Tbl_XML> Tbl_XMLFind_AsyncEnumerable(SearchTbl_XML? search);
    
    public Task<long> GetAllCount();
    public Task<long> GetAllCount(SearchTbl_XML? search);

        //oneKey    
    public Task<Tbl_XML?> Tbl_XMLGetSingle(int id);
    
    
    public  IAsyncEnumerable<Tbl_XML> Tbl_XMLSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value);
    public  IAsyncEnumerable<Tbl_XML> Tbl_XMLSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<Tbl_XML> Tbl_XMLSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  string value);
    public  IAsyncEnumerable<Tbl_XML> Tbl_XMLSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc);
        } //interface searchdata   

   public class SearchDataTbl_XML: ISearchDataTbl_XML{
        private SimpleTablesMultipleData context;
        public SearchDataTbl_XML (SimpleTablesMultipleData context) {
            this.context=context;
        }
           
        public async Task<long> GetAllCount(){
            return await context.Tbl_XMLCount(null);
        }
        public async Task<long> GetAllCount(SearchTbl_XML? search){
            return await context.Tbl_XMLCount(search);
        }
        public IAsyncEnumerable<Tbl_XML> Tbl_XMLFind_AsyncEnumerable(SearchTbl_XML? search){
            return context.Tbl_XMLFind_AsyncEnumerable(search);
        }
        //oneKey    
    public Task<Tbl_XML?> Tbl_XMLGetSingle(int id){
            return context.Tbl_XMLGetSingle(id);
    }
    public  IAsyncEnumerable<Tbl_XML> Tbl_XMLSimpleSearch(GeneratorFromDB.SearchCriteria sc, eTbl_XMLColumns colToSearch, string? value){
        var search =SearchTbl_XML.FromSearch(sc,colToSearch,value);
    /*
            var search = new SearchTbl_XML();
            var orderBy = new GeneratorFromDB.OrderBy<eTbl_XMLColumns>();
                              orderBy.FieldName = eTbl_XMLColumns.ID;
          
            orderBy.Asc = false;
            search.OrderBys = new[] { orderBy };
            search.PageNumber = 1;
            search.PageSize = int.MaxValue;
            var s = new GeneratorFromDB.SearchField<eTbl_XMLColumns>();
            s.Criteria = sc;
            s.FieldName = colToSearch;
            s.Value = value;
            search.SearchFields = new[] { s };
       */
            var data = this.Tbl_XMLFind_AsyncEnumerable(search);
            return data;
        }

    
        //False
    public  IAsyncEnumerable<Tbl_XML> Tbl_XMLSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  int value){
         return Tbl_XMLSimpleSearch(sc,eTbl_XMLColumns.ID,value.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_XML> Tbl_XMLSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc){
        return Tbl_XMLSimpleSearch(sc,eTbl_XMLColumns.ID,null);

    }


        //True
    public  IAsyncEnumerable<Tbl_XML> Tbl_XMLSimpleSearch_DataColumn(GeneratorFromDB.SearchCriteria sc,  string value){
         return Tbl_XMLSimpleSearch(sc,eTbl_XMLColumns.DataColumn,value?.ToString());

    
    }
    public  IAsyncEnumerable<Tbl_XML> Tbl_XMLSimpleSearchNull_DataColumn(GeneratorFromDB.SearchCriteria sc){
        return Tbl_XMLSimpleSearch(sc,eTbl_XMLColumns.DataColumn,null);

    }


        } //class searchdata




    
   


//end added new




